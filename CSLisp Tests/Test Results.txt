TEST RESULTS: 7:25:51 PM
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got 2  - expected 2
test: got "foo"  - expected "foo"
test: got "bar"  - expected "bar"
test: got ()  - expected ()
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got "("foo" "bar")"  - expected "("foo" "bar")"
test: got #t  - expected #t
test: got #t  - expected #t
test: got 2  - expected 2
test: got "foo"  - expected "foo"
test: got "bar"  - expected "bar"
test: got ()  - expected ()
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got "("foo" "bar")"  - expected "("foo" "bar")"
test: got #t  - expected #t
test: got #t  - expected #t
test: got "foo"  - expected "foo"
test: got "bar"  - expected "bar"
test: got #t  - expected #t
test: got #t  - expected #t
test: got #t  - expected #t
test: got "("foo" . "bar")"  - expected "("foo" . "bar")"
SUCCESS
test: got 2  - expected 2
test: got 0  - expected 0
test: got 1  - expected 1
test: got 1  - expected 1
test: got 0  - expected 0
test: got 0  - expected 0
test: got temp:env2symbol0  - expected temp:env2symbol0
test: got temp:NEW_SYMBOL  - expected temp:NEW_SYMBOL
test: got 2  - expected 2
test: got 0  - expected 0
SUCCESS
test: got #t  - expected #t
test: got 102  - expected 102
test: got 102  - expected 102
test: got 111  - expected 111
test: got 111  - expected 111
test: got 111  - expected 111
test: got 0  - expected 0
test: got #t  - expected #t
test: got #t  - expected #t
test: got 102  - expected 102
test: got #t  - expected #t
SUCCESS
==>  1
test: got #t  - expected #t
test: got 1  - expected 1
==>  1.1
test: got #t  - expected #t
test: got 1.1  - expected 1.1
==>  -2
test: got #t  - expected #t
test: got -2  - expected -2
==>  -2
test: got #t  - expected #t
test: got -2  - expected -2
==>  #t
test: got #t  - expected #t
test: got #t  - expected #t
==>  #f
test: got #t  - expected #t
test: got #f  - expected #f
==>  #f
test: got #t  - expected #t
test: got #f  - expected #f
==>  a
test: got #t  - expected #t
test: got a  - expected a
==>  ()
test: got #t  - expected #t
test: got ()  - expected ()
==>  "foo " "
test: got #t  - expected #t
test: got "foo " "  - expected "foo " "
==>  (a b c)
test: got #t  - expected #t
test: got "(a b c)"  - expected "(a b c)"
==>  (1 2.1 -3 #t #f () a b c)
test: got #t  - expected #t
test: got "(1 2.1 -3 #t #f () a b c)"  - expected "(1 2.1 -3 #t #f () a b c)"
==>  (a (b (c d)) e)
test: got #t  - expected #t
test: got "(a (b (c d)) e)"  - expected "(a (b (c d)) e)"
==>  (quote (foo))
==>  (quote ((a b) c))
==>  (quote ())
test: got #t  - expected #t
test: got "(quote (foo))"  - expected "(quote (foo))"
test: got "(quote ((a b) c))"  - expected "(quote ((a b) c))"
test: got "(quote ())"  - expected "(quote ())"
==>  (a b e f)
test: got #t  - expected #t
test: got "(a b e f)"  - expected "(a b e f)"
==>  foo
==>  (quote foo)
==>  (quote foo)
==>  foo
test: got #t  - expected #t
test: got "foo"  - expected "foo"
test: got "(quote foo)"  - expected "(quote foo)"
test: got "(quote foo)"  - expected "(quote foo)"
test: got "foo"  - expected "foo"
==>  (list (quote foo))
test: got #t  - expected #t
test: got "(list (quote foo))"  - expected "(list (quote foo))"
==>  (list (quote foo) (quote foo))
test: got #t  - expected #t
test: got "(list (quote foo) (quote foo))"  - expected "(list (quote foo) (quote foo))"
==>  (list foo)
test: got #t  - expected #t
test: got "(list foo)"  - expected "(list foo)"
==>  (append foo)
test: got #t  - expected #t
test: got "(append foo)"  - expected "(append foo)"
SUCCESS
COMPILE inputs:  5
==>  5
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	RETURN_VAL

COMPILE inputs:  "foo"
==>  "foo"
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	RETURN_VAL

COMPILE inputs:  #t
==>  #t
	0	MAKE_ENV	0
	1	PUSH_CONST	#t
	2	RETURN_VAL

COMPILE inputs:  'foo
==>  (quote foo)
	0	MAKE_ENV	0
	1	PUSH_CONST	foo
	2	RETURN_VAL

COMPILE inputs:  (begin 1)
==>  (begin 1)
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	RETURN_VAL

COMPILE inputs:  (begin 1 2 3)
==>  (begin 1 2 3)
	0	MAKE_ENV	0
	1	PUSH_CONST	3
	2	RETURN_VAL

COMPILE inputs:  x
==>  x
	0	MAKE_ENV	0
	1	GLOBAL_GET	x
	2	RETURN_VAL

COMPILE inputs:  (set! x (begin 1 2 3))
==>  (set! x (begin 1 2 3))
	0	MAKE_ENV	0
	1	PUSH_CONST	3
	2	GLOBAL_SET	x
	3	RETURN_VAL

COMPILE inputs:  (begin (set! x (begin 1 2 3)) x)
==>  (begin (set! x (begin 1 2 3)) x)
	0	MAKE_ENV	0
	1	PUSH_CONST	3
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	RETURN_VAL

COMPILE inputs:  (if p x y)
==>  (if p x y)
	0	MAKE_ENV	0
	1	GLOBAL_GET	p
	2	JMP_IF_FALSE	"L0"	5
	3	GLOBAL_GET	x
	4	RETURN_VAL
5	MAKE_LABEL	"L0"
	6	GLOBAL_GET	y
	7	RETURN_VAL

COMPILE inputs:  (begin (if p x y) z)
==>  (begin (if p x y) z)
	0	MAKE_ENV	0
	1	GLOBAL_GET	z
	2	RETURN_VAL

COMPILE inputs:  (if 5 x y)
==>  (if 5 x y)
	0	MAKE_ENV	0
	1	GLOBAL_GET	x
	2	RETURN_VAL

COMPILE inputs:  (if #f x y)
==>  (if #f x y)
	0	MAKE_ENV	0
	1	GLOBAL_GET	y
	2	RETURN_VAL

COMPILE inputs:  (if x y)
==>  (if x y)
	0	MAKE_ENV	0
	1	GLOBAL_GET	x
	2	JMP_IF_FALSE	"L0"	5
	3	GLOBAL_GET	y
	4	RETURN_VAL
5	MAKE_LABEL	"L0"
	6	RETURN_VAL

COMPILE inputs:  (if p x (begin 1 2 x))
==>  (if p x (begin 1 2 x))
	0	MAKE_ENV	0
	1	GLOBAL_GET	x
	2	RETURN_VAL

COMPILE inputs:  (if (not p) x y)
==>  (if (core:not p) x y)
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	GLOBAL_GET	p
	3	GLOBAL_GET	core:not
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L1"	9
	7	GLOBAL_GET	x
	8	RETURN_VAL
9	MAKE_LABEL	"L1"
	10	GLOBAL_GET	y
	11	RETURN_VAL

COMPILE inputs:  (if (if a b c) x y)
==>  (if (if a b c) x y)
	0	MAKE_ENV	0
	1	GLOBAL_GET	a
	2	JMP_IF_FALSE	"L0"	5
	3	GLOBAL_GET	b
	4	JMP_TO_LABEL	"L1"	7
5	MAKE_LABEL	"L0"
	6	GLOBAL_GET	c
7	MAKE_LABEL	"L1"
	8	JMP_IF_FALSE	"L2"	11
	9	GLOBAL_GET	x
	10	RETURN_VAL
11	MAKE_LABEL	"L2"
	12	GLOBAL_GET	y
	13	RETURN_VAL

COMPILE inputs:  (lambda () 5)
==>  (lambda () 5)
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; (5)
		0	MAKE_ENV	0
		1	PUSH_CONST	5
		2	RETURN_VAL
	2	RETURN_VAL

COMPILE inputs:  ((lambda () 5))
==>  ((lambda () 5))
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	RETURN_VAL

COMPILE inputs:  (lambda (a) a)
==>  (lambda (a) a)
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; (a)
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; a
		2	RETURN_VAL
	2	RETURN_VAL

COMPILE inputs:  (lambda (a) (lambda (b) a))
==>  (lambda (a) (lambda (b) a))
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; ((lambda (b) a))
		0	MAKE_ENV	1
		1	MAKE_CLOSURE	[Closure]	; (a)
			0	MAKE_ENV	1
			1	LOCAL_GET	1	0	; a
			2	RETURN_VAL
		2	RETURN_VAL
	2	RETURN_VAL

COMPILE inputs:  (set! x (lambda (a) a))
==>  (set! x (lambda (a) a))
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; (a)
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; a
		2	RETURN_VAL
	2	GLOBAL_SET	x
	3	RETURN_VAL

COMPILE inputs:  ((lambda (a) a) 5)
==>  ((lambda (a) a) 5)
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	MAKE_CLOSURE	[Closure]	; (a)
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; a
		2	RETURN_VAL
	3	JMP_CLOSURE	1

COMPILE inputs:  ((lambda (x) ((lambda (y z) (f x y z)) 3 x)) 4)
==>  ((lambda (x) ((lambda (y z) (f x y z)) 3 x)) 4)
	0	MAKE_ENV	0
	1	PUSH_CONST	4
	2	MAKE_CLOSURE	[Closure]	; (((lambda (y z) (f x y z)) 3 x))
		0	MAKE_ENV	1
		1	PUSH_CONST	3
		2	LOCAL_GET	0	0	; x
		3	MAKE_CLOSURE	[Closure]	; ((f x y z))
			0	MAKE_ENV	2
			1	LOCAL_GET	1	0	; x
			2	LOCAL_GET	0	0	; y
			3	LOCAL_GET	0	1	; z
			4	GLOBAL_GET	f
			5	JMP_CLOSURE	3
		4	JMP_CLOSURE	2
	3	JMP_CLOSURE	1

COMPILE inputs:  (if a b (f c))
==>  (if a b (f c))
	0	MAKE_ENV	0
	1	GLOBAL_GET	a
	2	JMP_IF_FALSE	"L0"	5
	3	GLOBAL_GET	b
	4	RETURN_VAL
5	MAKE_LABEL	"L0"
	6	GLOBAL_GET	c
	7	GLOBAL_GET	f
	8	JMP_CLOSURE	1

COMPILE inputs:  (if* (+ 1 2) b)
==>  (if* (core:+ 1 2) b)
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:+
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	DUPLICATE
	8	JMP_IF_TRUE	"L1"	12
	9	STACK_POP
	10	GLOBAL_GET	b
	11	RETURN_VAL
12	MAKE_LABEL	"L1"
	13	RETURN_VAL

COMPILE inputs:  (if* #f b)
==>  (if* #f b)
	0	MAKE_ENV	0
	1	GLOBAL_GET	b
	2	RETURN_VAL

COMPILE inputs:  (begin (- 2 3) (+ 2 3))
==>  (begin (core:- 2 3) (core:+ 2 3))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	GLOBAL_GET	core:-
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	STACK_POP
	8	PUSH_CONST	2
	9	PUSH_CONST	3
	10	GLOBAL_GET	core:+
	11	JMP_CLOSURE	2

SUCCESS


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  5
==>  5
Parsed:  5
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	RETURN_VAL

Running...
Executing:  lambda: (5)
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  #t
==>  #t
Parsed:  #t
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	#t
	2	RETURN_VAL

Running...
Executing:  lambda: (#t)
	0	MAKE_ENV	0
	1	PUSH_CONST	#t
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]   2 : RETURN_VAL
test: got "#t"  - expected "#t"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  "foo"
==>  "foo"
Parsed:  "foo"
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	RETURN_VAL

Running...
Executing:  lambda: ("foo")
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : RETURN_VAL
test: got ""foo""  - expected ""foo""


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin 1 2 3)
==>  (begin 1 2 3)
Parsed:  (begin 1 2 3)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	3
	2	RETURN_VAL

Running...
Executing:  lambda: ((begin 1 2 3))
	0	MAKE_ENV	0
	1	PUSH_CONST	3
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	3
                                      1: [ 3 ]
[ 1]   2 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  xyz
==>  xyz
Parsed:  xyz
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	xyz
	2	RETURN_VAL

Running...
Executing:  lambda: (xyz)
	0	MAKE_ENV	0
	1	GLOBAL_GET	xyz
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	xyz
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
test: got "()"  - expected "()"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  xyz
==>  xyz
Parsed:  xyz
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	xyz
	2	RETURN_VAL

Running...
Executing:  lambda: (xyz)
	0	MAKE_ENV	0
	1	GLOBAL_GET	xyz
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	xyz
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
test: got "()"  - expected "()"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (set! x 5)
==>  (set! x 5)
Parsed:  (set! x 5)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	RETURN_VAL

Running...
Executing:  lambda: ((set! x 5))
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ 5 ]
[ 1]   3 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x 2) x)
==>  (begin (set! x 2) x)
Parsed:  (begin (set! x 2) x)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	2
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	RETURN_VAL

Running...
Executing:  lambda: ((begin (set! x 2) x))
	0	MAKE_ENV	0
	1	PUSH_CONST	2
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	2
                                      1: [ 2 ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ 2 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : GLOBAL_GET	x
                                      1: [ 2 ]
[ 1]   5 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x #t) (if x 5 6))
==>  (begin (set! x #t) (if x 5 6))
Parsed:  (begin (set! x #t) (if x 5 6))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	#t
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	JMP_IF_FALSE	"L0"	8
	6	PUSH_CONST	5
	7	RETURN_VAL
8	MAKE_LABEL	"L0"
	9	PUSH_CONST	6
	10	RETURN_VAL

Running...
Executing:  lambda: ((begin (set! x #t) (if x 5 6)))
	0	MAKE_ENV	0
	1	PUSH_CONST	#t
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	JMP_IF_FALSE	"L0"	8
	6	PUSH_CONST	5
	7	RETURN_VAL
8	MAKE_LABEL	"L0"
	9	PUSH_CONST	6
	10	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ #t ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : GLOBAL_GET	x
                                      1: [ #t ]
[ 1]   5 : JMP_IF_FALSE	"L0"	8
                                      0: [  ]
[ 0]   6 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   7 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x #f) (if x 5 6))
==>  (begin (set! x #f) (if x 5 6))
Parsed:  (begin (set! x #f) (if x 5 6))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	#f
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	JMP_IF_FALSE	"L0"	8
	6	PUSH_CONST	5
	7	RETURN_VAL
8	MAKE_LABEL	"L0"
	9	PUSH_CONST	6
	10	RETURN_VAL

Running...
Executing:  lambda: ((begin (set! x #f) (if x 5 6)))
	0	MAKE_ENV	0
	1	PUSH_CONST	#f
	2	GLOBAL_SET	x
	3	STACK_POP
	4	GLOBAL_GET	x
	5	JMP_IF_FALSE	"L0"	8
	6	PUSH_CONST	5
	7	RETURN_VAL
8	MAKE_LABEL	"L0"
	9	PUSH_CONST	6
	10	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#f
                                      1: [ #f ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ #f ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : GLOBAL_GET	x
                                      1: [ #f ]
[ 1]   5 : JMP_IF_FALSE	"L0"	8
                                      0: [  ]
[ 0]   8 : MAKE_LABEL	"L0"
                                      0: [  ]
[ 0]   9 : PUSH_CONST	6
                                      1: [ 6 ]
[ 1]  10 : RETURN_VAL
test: got "6"  - expected "6"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (if* 5 6))
==>  (begin (if* 5 6))
Parsed:  (begin (if* 5 6))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	DUPLICATE
	3	JMP_IF_TRUE	"L0"	7
	4	STACK_POP
	5	PUSH_CONST	6
	6	RETURN_VAL
7	MAKE_LABEL	"L0"
	8	RETURN_VAL

Running...
Executing:  lambda: ((begin (if* 5 6)))
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	DUPLICATE
	3	JMP_IF_TRUE	"L0"	7
	4	STACK_POP
	5	PUSH_CONST	6
	6	RETURN_VAL
7	MAKE_LABEL	"L0"
	8	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : DUPLICATE
                                      2: [ 5 5 ]
[ 2]   3 : JMP_IF_TRUE	"L0"	7
                                      1: [ 5 ]
[ 1]   7 : MAKE_LABEL	"L0"
                                      1: [ 5 ]
[ 1]   8 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (if* (if 5 #f) 6))
==>  (begin (if* (if 5 #f) 6))
Parsed:  (begin (if* (if 5 #f) 6))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	#f
	2	DUPLICATE
	3	JMP_IF_TRUE	"L0"	7
	4	STACK_POP
	5	PUSH_CONST	6
	6	RETURN_VAL
7	MAKE_LABEL	"L0"
	8	RETURN_VAL

Running...
Executing:  lambda: ((begin (if* (if 5 #f) 6)))
	0	MAKE_ENV	0
	1	PUSH_CONST	#f
	2	DUPLICATE
	3	JMP_IF_TRUE	"L0"	7
	4	STACK_POP
	5	PUSH_CONST	6
	6	RETURN_VAL
7	MAKE_LABEL	"L0"
	8	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#f
                                      1: [ #f ]
[ 1]   2 : DUPLICATE
                                      2: [ #f #f ]
[ 2]   3 : JMP_IF_TRUE	"L0"	7
                                      1: [ #f ]
[ 1]   4 : STACK_POP
                                      0: [  ]
[ 0]   5 : PUSH_CONST	6
                                      1: [ 6 ]
[ 1]   6 : RETURN_VAL
test: got "6"  - expected "6"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (if* (+ 1 2) 4) 5)
==>  (begin (if* (core:+ 1 2) 4) 5)
Parsed:  (begin (if* (core:+ 1 2) 4) 5)
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:+
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	DUPLICATE
	8	JMP_IF_TRUE	"L1"	11
	9	STACK_POP
	10	PUSH_CONST	4
11	MAKE_LABEL	"L1"
	12	STACK_POP
	13	PUSH_CONST	5
	14	RETURN_VAL

Running...
Executing:  lambda: ((begin (if* (core:+ 1 2) 4) 5))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:+
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	DUPLICATE
	8	JMP_IF_TRUE	"L1"	11
	9	STACK_POP
	10	PUSH_CONST	4
11	MAKE_LABEL	"L1"
	12	STACK_POP
	13	PUSH_CONST	5
	14	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0:6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [K0:6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K0:6] 1 2 ]
[ 3]   4 : GLOBAL_GET	core:+
                                      4: [ [K0:6] 1 2 [Closure] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0:6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0:6] 3 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 3 ]
[ 1]   6 : MAKE_LABEL	"K0"
                                      1: [ 3 ]
[ 1]   7 : DUPLICATE
                                      2: [ 3 3 ]
[ 2]   8 : JMP_IF_TRUE	"L1"	11
                                      1: [ 3 ]
[ 1]  11 : MAKE_LABEL	"L1"
                                      1: [ 3 ]
[ 1]  12 : STACK_POP
                                      0: [  ]
[ 0]  13 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]  14 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (if* (if 5 #f) 4) 5)
==>  (begin (if* (if 5 #f) 4) 5)
Parsed:  (begin (if* (if 5 #f) 4) 5)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	#f
	2	DUPLICATE
	3	JMP_IF_TRUE	"L0"	6
	4	STACK_POP
	5	PUSH_CONST	4
6	MAKE_LABEL	"L0"
	7	STACK_POP
	8	PUSH_CONST	5
	9	RETURN_VAL

Running...
Executing:  lambda: ((begin (if* (if 5 #f) 4) 5))
	0	MAKE_ENV	0
	1	PUSH_CONST	#f
	2	DUPLICATE
	3	JMP_IF_TRUE	"L0"	6
	4	STACK_POP
	5	PUSH_CONST	4
6	MAKE_LABEL	"L0"
	7	STACK_POP
	8	PUSH_CONST	5
	9	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#f
                                      1: [ #f ]
[ 1]   2 : DUPLICATE
                                      2: [ #f #f ]
[ 2]   3 : JMP_IF_TRUE	"L0"	6
                                      1: [ #f ]
[ 1]   4 : STACK_POP
                                      0: [  ]
[ 0]   5 : PUSH_CONST	4
                                      1: [ 4 ]
[ 1]   6 : MAKE_LABEL	"L0"
                                      1: [ 4 ]
[ 1]   7 : STACK_POP
                                      0: [  ]
[ 0]   8 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   9 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (a) a) 5)
==>  ((lambda (a) a) 5)
Parsed:  ((lambda (a) a) 5)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	MAKE_CLOSURE	[Closure]	; (a)
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; a
		2	RETURN_VAL
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: (((lambda (a) a) 5))
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	MAKE_CLOSURE	[Closure]	; (a)
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; a
		2	RETURN_VAL
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; (a)
                                      2: [ 5 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 5 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; a
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (a . b) b) 5 6 7 8)
==>  ((lambda (a . b) b) 5 6 7 8)
Parsed:  ((lambda (a . b) b) 5 6 7 8)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	PUSH_CONST	6
	3	PUSH_CONST	7
	4	PUSH_CONST	8
	5	MAKE_CLOSURE	[Closure]	; (b)
		0	MAKE_ENVDOT	1
		1	LOCAL_GET	0	1	; b
		2	RETURN_VAL
	6	JMP_CLOSURE	4

Running...
Executing:  lambda: (((lambda (a . b) b) 5 6 7 8))
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	PUSH_CONST	6
	3	PUSH_CONST	7
	4	PUSH_CONST	8
	5	MAKE_CLOSURE	[Closure]	; (b)
		0	MAKE_ENVDOT	1
		1	LOCAL_GET	0	1	; b
		2	RETURN_VAL
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : PUSH_CONST	6
                                      2: [ 5 6 ]
[ 2]   3 : PUSH_CONST	7
                                      3: [ 5 6 7 ]
[ 3]   4 : PUSH_CONST	8
                                      4: [ 5 6 7 8 ]
[ 4]   5 : MAKE_CLOSURE	[Closure]	; (b)
                                      5: [ 5 6 7 8 [Closure] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ 5 6 7 8 ]
[ 4]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	1	; b
                                      1: [ (6 7 8) ]
[ 1]   2 : RETURN_VAL
test: got "(6 7 8)"  - expected "(6 7 8)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (a) (set! a 6) a) 1)
==>  ((lambda (a) (set! a 6) a) 1)
Parsed:  ((lambda (a) (set! a 6) a) 1)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((set! a 6) a)
		0	MAKE_ENV	1
		1	PUSH_CONST	6
		2	LOCAL_SET	0	0	; a
		3	STACK_POP
		4	LOCAL_GET	0	0	; a
		5	RETURN_VAL
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: (((lambda (a) (set! a 6) a) 1))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((set! a 6) a)
		0	MAKE_ENV	1
		1	PUSH_CONST	6
		2	LOCAL_SET	0	0	; a
		3	STACK_POP
		4	LOCAL_GET	0	0	; a
		5	RETURN_VAL
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((set! a 6) a)
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : PUSH_CONST	6
                                      1: [ 6 ]
[ 1]   2 : LOCAL_SET	0	0	; a
                                      1: [ 6 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	0	0	; a
                                      1: [ 6 ]
[ 1]   5 : RETURN_VAL
test: got "6"  - expected "6"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (x . rest) (if x 'foo rest)) #t 'a 'b 'c)
==>  ((lambda (x . rest) (if x (quote foo) rest)) #t (quote a) (quote b) (quote c))
Parsed:  ((lambda (x . rest) (if x (quote foo) rest)) #t (quote a) (quote b) (quote c))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	#t
	2	PUSH_CONST	a
	3	PUSH_CONST	b
	4	PUSH_CONST	c
	5	MAKE_CLOSURE	[Closure]	; ((if x (quote foo) rest))
		0	MAKE_ENVDOT	1
		1	LOCAL_GET	0	0	; x
		2	JMP_IF_FALSE	"L0"	5
		3	PUSH_CONST	foo
		4	RETURN_VAL
	5	MAKE_LABEL	"L0"
		6	LOCAL_GET	0	1	; rest
		7	RETURN_VAL
	6	JMP_CLOSURE	4

Running...
Executing:  lambda: (((lambda (x . rest) (if x (quote foo) rest)) #t (quote a) (quote b) (quote c)))
	0	MAKE_ENV	0
	1	PUSH_CONST	#t
	2	PUSH_CONST	a
	3	PUSH_CONST	b
	4	PUSH_CONST	c
	5	MAKE_CLOSURE	[Closure]	; ((if x (quote foo) rest))
		0	MAKE_ENVDOT	1
		1	LOCAL_GET	0	0	; x
		2	JMP_IF_FALSE	"L0"	5
		3	PUSH_CONST	foo
		4	RETURN_VAL
	5	MAKE_LABEL	"L0"
		6	LOCAL_GET	0	1	; rest
		7	RETURN_VAL
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]   2 : PUSH_CONST	a
                                      2: [ #t a ]
[ 2]   3 : PUSH_CONST	b
                                      3: [ #t a b ]
[ 3]   4 : PUSH_CONST	c
                                      4: [ #t a b c ]
[ 4]   5 : MAKE_CLOSURE	[Closure]	; ((if x (quote foo) rest))
                                      5: [ #t a b c [Closure] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ #t a b c ]
[ 4]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ #t ]
[ 1]   2 : JMP_IF_FALSE	"L0"	5
                                      0: [  ]
[ 0]   3 : PUSH_CONST	foo
                                      1: [ foo ]
[ 1]   4 : RETURN_VAL
test: got "foo"  - expected "foo"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (x . rest) (if x 'foo rest)) #f 'a 'b 'c)
==>  ((lambda (x . rest) (if x (quote foo) rest)) #f (quote a) (quote b) (quote c))
Parsed:  ((lambda (x . rest) (if x (quote foo) rest)) #f (quote a) (quote b) (quote c))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	#f
	2	PUSH_CONST	a
	3	PUSH_CONST	b
	4	PUSH_CONST	c
	5	MAKE_CLOSURE	[Closure]	; ((if x (quote foo) rest))
		0	MAKE_ENVDOT	1
		1	LOCAL_GET	0	0	; x
		2	JMP_IF_FALSE	"L0"	5
		3	PUSH_CONST	foo
		4	RETURN_VAL
	5	MAKE_LABEL	"L0"
		6	LOCAL_GET	0	1	; rest
		7	RETURN_VAL
	6	JMP_CLOSURE	4

Running...
Executing:  lambda: (((lambda (x . rest) (if x (quote foo) rest)) #f (quote a) (quote b) (quote c)))
	0	MAKE_ENV	0
	1	PUSH_CONST	#f
	2	PUSH_CONST	a
	3	PUSH_CONST	b
	4	PUSH_CONST	c
	5	MAKE_CLOSURE	[Closure]	; ((if x (quote foo) rest))
		0	MAKE_ENVDOT	1
		1	LOCAL_GET	0	0	; x
		2	JMP_IF_FALSE	"L0"	5
		3	PUSH_CONST	foo
		4	RETURN_VAL
	5	MAKE_LABEL	"L0"
		6	LOCAL_GET	0	1	; rest
		7	RETURN_VAL
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#f
                                      1: [ #f ]
[ 1]   2 : PUSH_CONST	a
                                      2: [ #f a ]
[ 2]   3 : PUSH_CONST	b
                                      3: [ #f a b ]
[ 3]   4 : PUSH_CONST	c
                                      4: [ #f a b c ]
[ 4]   5 : MAKE_CLOSURE	[Closure]	; ((if x (quote foo) rest))
                                      5: [ #f a b c [Closure] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ #f a b c ]
[ 4]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ #f ]
[ 1]   2 : JMP_IF_FALSE	"L0"	5
                                      0: [  ]
[ 0]   5 : MAKE_LABEL	"L0"
                                      0: [  ]
[ 0]   6 : LOCAL_GET	0	1	; rest
                                      1: [ (a b c) ]
[ 1]   7 : RETURN_VAL
test: got "(a b c)"  - expected "(a b c)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x (lambda (a b c) (if a b c))) (x #t 5 6))
==>  (begin (set! x (lambda (a b c) (if a b c))) (x #t 5 6))
Parsed:  (begin (set! x (lambda (a b c) (if a b c))) (x #t 5 6))
Compiled:
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; ((if a b c))
		0	MAKE_ENV	3
		1	LOCAL_GET	0	0	; a
		2	JMP_IF_FALSE	"L0"	5
		3	LOCAL_GET	0	1	; b
		4	RETURN_VAL
	5	MAKE_LABEL	"L0"
		6	LOCAL_GET	0	2	; c
		7	RETURN_VAL
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	#t
	5	PUSH_CONST	5
	6	PUSH_CONST	6
	7	GLOBAL_GET	x
	8	JMP_CLOSURE	3

Running...
Executing:  lambda: ((begin (set! x (lambda (a b c) (if a b c))) (x #t 5 6)))
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; ((if a b c))
		0	MAKE_ENV	3
		1	LOCAL_GET	0	0	; a
		2	JMP_IF_FALSE	"L0"	5
		3	LOCAL_GET	0	1	; b
		4	RETURN_VAL
	5	MAKE_LABEL	"L0"
		6	LOCAL_GET	0	2	; c
		7	RETURN_VAL
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	#t
	5	PUSH_CONST	5
	6	PUSH_CONST	6
	7	GLOBAL_GET	x
	8	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if a b c))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]   5 : PUSH_CONST	5
                                      2: [ #t 5 ]
[ 2]   6 : PUSH_CONST	6
                                      3: [ #t 5 6 ]
[ 3]   7 : GLOBAL_GET	x
                                      4: [ #t 5 6 [Closure] ]
[ 4]   8 : JMP_CLOSURE	3
                                      3: [ #t 5 6 ]
[ 3]   0 : MAKE_ENV	3
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; a
                                      1: [ #t ]
[ 1]   2 : JMP_IF_FALSE	"L0"	5
                                      0: [  ]
[ 0]   3 : LOCAL_GET	0	1	; b
                                      1: [ 5 ]
[ 1]   4 : RETURN_VAL
test: got "5"  - expected "5"
SUCCESS


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (+ 1 2)
==>  (core:+ 1 2)
Parsed:  (core:+ 1 2)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	core:+
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((core:+ 1 2))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	core:+
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : GLOBAL_GET	core:+
                                      3: [ 1 2 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (+ (+ 1 2) 3)
==>  (core:+ (core:+ 1 2) 3)
Parsed:  (core:+ (core:+ 1 2) 3)
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:+
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	PUSH_CONST	3
	8	GLOBAL_GET	core:+
	9	JMP_CLOSURE	2

Running...
Executing:  lambda: ((core:+ (core:+ 1 2) 3))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:+
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	PUSH_CONST	3
	8	GLOBAL_GET	core:+
	9	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0:6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [K0:6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K0:6] 1 2 ]
[ 3]   4 : GLOBAL_GET	core:+
                                      4: [ [K0:6] 1 2 [Closure] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0:6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0:6] 3 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 3 ]
[ 1]   6 : MAKE_LABEL	"K0"
                                      1: [ 3 ]
[ 1]   7 : PUSH_CONST	3
                                      2: [ 3 3 ]
[ 2]   8 : GLOBAL_GET	core:+
                                      3: [ 3 3 [Closure] ]
[ 3]   9 : JMP_CLOSURE	2
                                      2: [ 3 3 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 6 ]
[ 1]   1 : RETURN_VAL
test: got "6"  - expected "6"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (+ 1 2 3 4)
==>  (core:+ 1 2 3 4)
Parsed:  (core:+ 1 2 3 4)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	4
	5	GLOBAL_GET	core:+
	6	JMP_CLOSURE	4

Running...
Executing:  lambda: ((core:+ 1 2 3 4))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	4
	5	GLOBAL_GET	core:+
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : PUSH_CONST	3
                                      3: [ 1 2 3 ]
[ 3]   4 : PUSH_CONST	4
                                      4: [ 1 2 3 4 ]
[ 4]   5 : GLOBAL_GET	core:+
                                      5: [ 1 2 3 4 [Closure] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ 1 2 3 4 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      1: [ 10 ]
[ 1]   1 : RETURN_VAL
test: got "10"  - expected "10"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (* 1 2 3 4)
==>  (core:* 1 2 3 4)
Parsed:  (core:* 1 2 3 4)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	4
	5	GLOBAL_GET	core:*
	6	JMP_CLOSURE	4

Running...
Executing:  lambda: ((core:* 1 2 3 4))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	4
	5	GLOBAL_GET	core:*
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : PUSH_CONST	3
                                      3: [ 1 2 3 ]
[ 3]   4 : PUSH_CONST	4
                                      4: [ 1 2 3 4 ]
[ 4]   5 : GLOBAL_GET	core:*
                                      5: [ 1 2 3 4 [Closure] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ 1 2 3 4 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      1: [ 24 ]
[ 1]   1 : RETURN_VAL
test: got "24"  - expected "24"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (= 1 1)
==>  (core:= 1 1)
Parsed:  (core:= 1 1)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	1
	3	GLOBAL_GET	core:=
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((core:= 1 1))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	1
	3	GLOBAL_GET	core:=
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	core:=
                                      3: [ 1 1 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"="
                                      1: [ #t ]
[ 1]   1 : RETURN_VAL
test: got "#t"  - expected "#t"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (!= 1 1)
==>  (core:!= 1 1)
Parsed:  (core:!= 1 1)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	1
	3	GLOBAL_GET	core:!=
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((core:!= 1 1))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	1
	3	GLOBAL_GET	core:!=
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	core:!=
                                      3: [ 1 1 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"!="
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
test: got "#f"  - expected "#f"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cons 1 2)
==>  (core:cons 1 2)
Parsed:  (core:cons 1 2)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	core:cons
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((core:cons 1 2))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	core:cons
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : GLOBAL_GET	core:cons
                                      3: [ 1 2 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ (1 . 2) ]
[ 1]   1 : RETURN_VAL
test: got "(1 . 2)"  - expected "(1 . 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  `(a 1)
==>  (list (quote a) (quote 1))
Parsed:  (list (quote a) (quote 1))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	a
	2	PUSH_CONST	1
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((list (quote a) (quote 1)))
	0	MAKE_ENV	0
	1	PUSH_CONST	a
	2	PUSH_CONST	1
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	a
                                      1: [ a ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ a 1 ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ a 1 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ a 1 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (a 1) ]
[ 1]   1 : RETURN_VAL
test: got "(a 1)"  - expected "(a 1)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list)
==>  (list)
Parsed:  (list)
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	list
	2	JMP_CLOSURE	0

Running...
Executing:  lambda: ((list))
	0	MAKE_ENV	0
	1	GLOBAL_GET	list
	2	JMP_CLOSURE	0

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	list
                                      1: [ [Closure] ]
[ 1]   2 : JMP_CLOSURE	0
                                      0: [  ]
[ 0]   0 : CALL_PRIMOP	"list"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list 1)
==>  (list 1)
Parsed:  (list 1)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	GLOBAL_GET	list
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((list 1))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	GLOBAL_GET	list
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : GLOBAL_GET	list
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : CALL_PRIMOP	"list"
                                      1: [ (1) ]
[ 1]   1 : RETURN_VAL
test: got "(1)"  - expected "(1)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list 1 2)
==>  (list 1 2)
Parsed:  (list 1 2)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((list 1 2))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ 1 2 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2)"  - expected "(1 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list 1 2 3)
==>  (list 1 2 3)
Parsed:  (list 1 2 3)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

Running...
Executing:  lambda: ((list 1 2 3))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : PUSH_CONST	3
                                      3: [ 1 2 3 ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ 1 2 3 [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ 1 2 3 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3)"  - expected "(1 2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (length '(a b c))
==>  (core:length (quote (a b c)))
Parsed:  (core:length (quote (a b c)))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(a b c)
	2	GLOBAL_GET	core:length
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:length (quote (a b c))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(a b c)
	2	GLOBAL_GET	core:length
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(a b c)
                                      1: [ (a b c) ]
[ 1]   2 : GLOBAL_GET	core:length
                                      2: [ (a b c) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (a b c) ]
[ 1]   0 : CALL_PRIMOP	"length"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (append '(1 2) '(3 4) '() '(5))
==>  (append (quote (1 2)) (quote (3 4)) (quote ()) (quote (5)))
Parsed:  (append (quote (1 2)) (quote (3 4)) (quote ()) (quote (5)))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2)
	2	PUSH_CONST	(3 4)
	3	PUSH_CONST	()
	4	PUSH_CONST	(5)
	5	GLOBAL_GET	append
	6	JMP_CLOSURE	4

Running...
Executing:  lambda: ((append (quote (1 2)) (quote (3 4)) (quote ()) (quote (5))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2)
	2	PUSH_CONST	(3 4)
	3	PUSH_CONST	()
	4	PUSH_CONST	(5)
	5	GLOBAL_GET	append
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2)
                                      1: [ (1 2) ]
[ 1]   2 : PUSH_CONST	(3 4)
                                      2: [ (1 2) (3 4) ]
[ 2]   3 : PUSH_CONST	()
                                      3: [ (1 2) (3 4) () ]
[ 3]   4 : PUSH_CONST	(5)
                                      4: [ (1 2) (3 4) () (5) ]
[ 4]   5 : GLOBAL_GET	append
                                      5: [ (1 2) (3 4) () (5) [Closure] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ (1 2) (3 4) () (5) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (1 2 3 4 5) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3 4 5)"  - expected "(1 2 3 4 5)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (append '() '(3 4)) (append '(1 2) '()))
==>  (list (append (quote ()) (quote (3 4))) (append (quote (1 2)) (quote ())))
Parsed:  (list (append (quote ()) (quote (3 4))) (append (quote (1 2)) (quote ())))
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	()
	3	PUSH_CONST	(3 4)
	4	GLOBAL_GET	append
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	SAVE_RETURN	"K1"	12
	8	PUSH_CONST	(1 2)
	9	PUSH_CONST	()
	10	GLOBAL_GET	append
	11	JMP_CLOSURE	2
12	MAKE_LABEL	"K1"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	2

Running...
Executing:  lambda: ((list (append (quote ()) (quote (3 4))) (append (quote (1 2)) (quote ()))))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	()
	3	PUSH_CONST	(3 4)
	4	GLOBAL_GET	append
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	SAVE_RETURN	"K1"	12
	8	PUSH_CONST	(1 2)
	9	PUSH_CONST	()
	10	GLOBAL_GET	append
	11	JMP_CLOSURE	2
12	MAKE_LABEL	"K1"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0:6] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [K0:6] () ]
[ 2]   3 : PUSH_CONST	(3 4)
                                      3: [ [K0:6] () (3 4) ]
[ 3]   4 : GLOBAL_GET	append
                                      4: [ [K0:6] () (3 4) [Closure] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0:6] () (3 4) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      2: [ [K0:6] (3 4) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (3 4) ]
[ 1]   6 : MAKE_LABEL	"K0"
                                      1: [ (3 4) ]
[ 1]   7 : SAVE_RETURN	"K1"	12
                                      2: [ (3 4) [K1:12] ]
[ 2]   8 : PUSH_CONST	(1 2)
                                      3: [ (3 4) [K1:12] (1 2) ]
[ 3]   9 : PUSH_CONST	()
                                      4: [ (3 4) [K1:12] (1 2) () ]
[ 4]  10 : GLOBAL_GET	append
                                      5: [ (3 4) [K1:12] (1 2) () [Closure] ]
[ 5]  11 : JMP_CLOSURE	2
                                      4: [ (3 4) [K1:12] (1 2) () ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      3: [ (3 4) [K1:12] (1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (3 4) (1 2) ]
[ 2]  12 : MAKE_LABEL	"K1"
                                      2: [ (3 4) (1 2) ]
[ 2]  13 : GLOBAL_GET	list
                                      3: [ (3 4) (1 2) [Closure] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ (3 4) (1 2) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ ((3 4) (1 2)) ]
[ 1]   1 : RETURN_VAL
test: got "((3 4) (1 2))"  - expected "((3 4) (1 2))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list #t (not #t) #f (not #f) 1 (not 1) 0 (not 0))
==>  (list #t (core:not #t) #f (core:not #f) 1 (core:not 1) 0 (core:not 0))
Parsed:  (list #t (core:not #t) #f (core:not #f) 1 (core:not 1) 0 (core:not 0))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	#t
	2	SAVE_RETURN	"K0"	6
	3	PUSH_CONST	#t
	4	GLOBAL_GET	core:not
	5	JMP_CLOSURE	1
6	MAKE_LABEL	"K0"
	7	PUSH_CONST	#f
	8	SAVE_RETURN	"K1"	12
	9	PUSH_CONST	#f
	10	GLOBAL_GET	core:not
	11	JMP_CLOSURE	1
12	MAKE_LABEL	"K1"
	13	PUSH_CONST	1
	14	SAVE_RETURN	"K2"	18
	15	PUSH_CONST	1
	16	GLOBAL_GET	core:not
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K2"
	19	PUSH_CONST	0
	20	SAVE_RETURN	"K3"	24
	21	PUSH_CONST	0
	22	GLOBAL_GET	core:not
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K3"
	25	GLOBAL_GET	list
	26	JMP_CLOSURE	8

Running...
Executing:  lambda: ((list #t (core:not #t) #f (core:not #f) 1 (core:not 1) 0 (core:not 0)))
	0	MAKE_ENV	0
	1	PUSH_CONST	#t
	2	SAVE_RETURN	"K0"	6
	3	PUSH_CONST	#t
	4	GLOBAL_GET	core:not
	5	JMP_CLOSURE	1
6	MAKE_LABEL	"K0"
	7	PUSH_CONST	#f
	8	SAVE_RETURN	"K1"	12
	9	PUSH_CONST	#f
	10	GLOBAL_GET	core:not
	11	JMP_CLOSURE	1
12	MAKE_LABEL	"K1"
	13	PUSH_CONST	1
	14	SAVE_RETURN	"K2"	18
	15	PUSH_CONST	1
	16	GLOBAL_GET	core:not
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K2"
	19	PUSH_CONST	0
	20	SAVE_RETURN	"K3"	24
	21	PUSH_CONST	0
	22	GLOBAL_GET	core:not
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K3"
	25	GLOBAL_GET	list
	26	JMP_CLOSURE	8

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]   2 : SAVE_RETURN	"K0"	6
                                      2: [ #t [K0:6] ]
[ 2]   3 : PUSH_CONST	#t
                                      3: [ #t [K0:6] #t ]
[ 3]   4 : GLOBAL_GET	core:not
                                      4: [ #t [K0:6] #t [Closure] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ #t [K0:6] #t ]
[ 3]   0 : CALL_PRIMOP	"not"
                                      3: [ #t [K0:6] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ #t #f ]
[ 2]   6 : MAKE_LABEL	"K0"
                                      2: [ #t #f ]
[ 2]   7 : PUSH_CONST	#f
                                      3: [ #t #f #f ]
[ 3]   8 : SAVE_RETURN	"K1"	12
                                      4: [ #t #f #f [K1:12] ]
[ 4]   9 : PUSH_CONST	#f
                                      5: [ #t #f #f [K1:12] #f ]
[ 5]  10 : GLOBAL_GET	core:not
                                      6: [ #t #f #f [K1:12] #f [Closure] ]
[ 6]  11 : JMP_CLOSURE	1
                                      5: [ #t #f #f [K1:12] #f ]
[ 5]   0 : CALL_PRIMOP	"not"
                                      5: [ #t #f #f [K1:12] #t ]
[ 5]   1 : RETURN_VAL
                                      4: [ #t #f #f #t ]
[ 4]  12 : MAKE_LABEL	"K1"
                                      4: [ #t #f #f #t ]
[ 4]  13 : PUSH_CONST	1
                                      5: [ #t #f #f #t 1 ]
[ 5]  14 : SAVE_RETURN	"K2"	18
                                      6: [ #t #f #f #t 1 [K2:18] ]
[ 6]  15 : PUSH_CONST	1
                                      7: [ #t #f #f #t 1 [K2:18] 1 ]
[ 7]  16 : GLOBAL_GET	core:not
                                      8: [ #t #f #f #t 1 [K2:18] 1 [Closure] ]
[ 8]  17 : JMP_CLOSURE	1
                                      7: [ #t #f #f #t 1 [K2:18] 1 ]
[ 7]   0 : CALL_PRIMOP	"not"
                                      7: [ #t #f #f #t 1 [K2:18] #f ]
[ 7]   1 : RETURN_VAL
                                      6: [ #t #f #f #t 1 #f ]
[ 6]  18 : MAKE_LABEL	"K2"
                                      6: [ #t #f #f #t 1 #f ]
[ 6]  19 : PUSH_CONST	0
                                      7: [ #t #f #f #t 1 #f 0 ]
[ 7]  20 : SAVE_RETURN	"K3"	24
                                      8: [ #t #f #f #t 1 #f 0 [K3:24] ]
[ 8]  21 : PUSH_CONST	0
                                      9: [ #t #f #f #t 1 #f 0 [K3:24] 0 ]
[ 9]  22 : GLOBAL_GET	core:not
                                     10: [ #t #f #f #t 1 #f 0 [K3:24] 0 [Closure] ]
[10]  23 : JMP_CLOSURE	1
                                      9: [ #t #f #f #t 1 #f 0 [K3:24] 0 ]
[ 9]   0 : CALL_PRIMOP	"not"
                                      9: [ #t #f #f #t 1 #f 0 [K3:24] #f ]
[ 9]   1 : RETURN_VAL
                                      8: [ #t #f #f #t 1 #f 0 #f ]
[ 8]  24 : MAKE_LABEL	"K3"
                                      8: [ #t #f #f #t 1 #f 0 #f ]
[ 8]  25 : GLOBAL_GET	list
                                      9: [ #t #f #f #t 1 #f 0 #f [Closure] ]
[ 9]  26 : JMP_CLOSURE	8
                                      8: [ #t #f #f #t 1 #f 0 #f ]
[ 8]   0 : CALL_PRIMOP	"list"
                                      1: [ (#t #f #f #t 1 #f 0 #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#t #f #f #t 1 #f 0 #f)"  - expected "(#t #f #f #t 1 #f 0 #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (null? ()) (null? '(a)) (null? 0) (null? 1) (null? #f))
==>  (list (core:null? ()) (core:null? (quote (a))) (core:null? 0) (core:null? 1) (core:null? #f))
Parsed:  (list (core:null? ()) (core:null? (quote (a))) (core:null? 0) (core:null? 1) (core:null? #f))
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	core:null?
	9	JMP_CLOSURE	1
10	MAKE_LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	core:null?
	14	JMP_CLOSURE	1
15	MAKE_LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	core:null?
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	core:null?
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

Running...
Executing:  lambda: ((list (core:null? ()) (core:null? (quote (a))) (core:null? 0) (core:null? 1) (core:null? #f)))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	core:null?
	9	JMP_CLOSURE	1
10	MAKE_LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	core:null?
	14	JMP_CLOSURE	1
15	MAKE_LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	core:null?
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	core:null?
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : SAVE_RETURN	"K1"	10
                                      2: [ #t [K1:10] ]
[ 2]   7 : PUSH_CONST	(a)
                                      3: [ #t [K1:10] (a) ]
[ 3]   8 : GLOBAL_GET	core:null?
                                      4: [ #t [K1:10] (a) [Closure] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ #t [K1:10] (a) ]
[ 3]   0 : CALL_PRIMOP	"null?"
                                      3: [ #t [K1:10] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ #t #f ]
[ 2]  10 : MAKE_LABEL	"K1"
                                      2: [ #t #f ]
[ 2]  11 : SAVE_RETURN	"K2"	15
                                      3: [ #t #f [K2:15] ]
[ 3]  12 : PUSH_CONST	0
                                      4: [ #t #f [K2:15] 0 ]
[ 4]  13 : GLOBAL_GET	core:null?
                                      5: [ #t #f [K2:15] 0 [Closure] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ #t #f [K2:15] 0 ]
[ 4]   0 : CALL_PRIMOP	"null?"
                                      4: [ #t #f [K2:15] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ #t #f #f ]
[ 3]  15 : MAKE_LABEL	"K2"
                                      3: [ #t #f #f ]
[ 3]  16 : SAVE_RETURN	"K3"	20
                                      4: [ #t #f #f [K3:20] ]
[ 4]  17 : PUSH_CONST	1
                                      5: [ #t #f #f [K3:20] 1 ]
[ 5]  18 : GLOBAL_GET	core:null?
                                      6: [ #t #f #f [K3:20] 1 [Closure] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ #t #f #f [K3:20] 1 ]
[ 5]   0 : CALL_PRIMOP	"null?"
                                      5: [ #t #f #f [K3:20] #f ]
[ 5]   1 : RETURN_VAL
                                      4: [ #t #f #f #f ]
[ 4]  20 : MAKE_LABEL	"K3"
                                      4: [ #t #f #f #f ]
[ 4]  21 : SAVE_RETURN	"K4"	25
                                      5: [ #t #f #f #f [K4:25] ]
[ 5]  22 : PUSH_CONST	#f
                                      6: [ #t #f #f #f [K4:25] #f ]
[ 6]  23 : GLOBAL_GET	core:null?
                                      7: [ #t #f #f #f [K4:25] #f [Closure] ]
[ 7]  24 : JMP_CLOSURE	1
                                      6: [ #t #f #f #f [K4:25] #f ]
[ 6]   0 : CALL_PRIMOP	"null?"
                                      6: [ #t #f #f #f [K4:25] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ #t #f #f #f #f ]
[ 5]  25 : MAKE_LABEL	"K4"
                                      5: [ #t #f #f #f #f ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ #t #f #f #f #f [Closure] ]
[ 6]  27 : JMP_CLOSURE	5
                                      5: [ #t #f #f #f #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      1: [ (#t #f #f #f #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#t #f #f #f #f)"  - expected "(#t #f #f #f #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (cons? ()) (cons? '(a)) (cons? 0) (cons? 1) (cons? #f))
==>  (list (core:cons? ()) (core:cons? (quote (a))) (core:cons? 0) (core:cons? 1) (core:cons? #f))
Parsed:  (list (core:cons? ()) (core:cons? (quote (a))) (core:cons? 0) (core:cons? 1) (core:cons? #f))
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	core:cons?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	core:cons?
	9	JMP_CLOSURE	1
10	MAKE_LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	core:cons?
	14	JMP_CLOSURE	1
15	MAKE_LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	core:cons?
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	core:cons?
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

Running...
Executing:  lambda: ((list (core:cons? ()) (core:cons? (quote (a))) (core:cons? 0) (core:cons? 1) (core:cons? #f)))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	core:cons?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	core:cons?
	9	JMP_CLOSURE	1
10	MAKE_LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	core:cons?
	14	JMP_CLOSURE	1
15	MAKE_LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	core:cons?
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	core:cons?
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:cons?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : SAVE_RETURN	"K1"	10
                                      2: [ #f [K1:10] ]
[ 2]   7 : PUSH_CONST	(a)
                                      3: [ #f [K1:10] (a) ]
[ 3]   8 : GLOBAL_GET	core:cons?
                                      4: [ #f [K1:10] (a) [Closure] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ #f [K1:10] (a) ]
[ 3]   0 : CALL_PRIMOP	"cons?"
                                      3: [ #f [K1:10] #t ]
[ 3]   1 : RETURN_VAL
                                      2: [ #f #t ]
[ 2]  10 : MAKE_LABEL	"K1"
                                      2: [ #f #t ]
[ 2]  11 : SAVE_RETURN	"K2"	15
                                      3: [ #f #t [K2:15] ]
[ 3]  12 : PUSH_CONST	0
                                      4: [ #f #t [K2:15] 0 ]
[ 4]  13 : GLOBAL_GET	core:cons?
                                      5: [ #f #t [K2:15] 0 [Closure] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ #f #t [K2:15] 0 ]
[ 4]   0 : CALL_PRIMOP	"cons?"
                                      4: [ #f #t [K2:15] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ #f #t #f ]
[ 3]  15 : MAKE_LABEL	"K2"
                                      3: [ #f #t #f ]
[ 3]  16 : SAVE_RETURN	"K3"	20
                                      4: [ #f #t #f [K3:20] ]
[ 4]  17 : PUSH_CONST	1
                                      5: [ #f #t #f [K3:20] 1 ]
[ 5]  18 : GLOBAL_GET	core:cons?
                                      6: [ #f #t #f [K3:20] 1 [Closure] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ #f #t #f [K3:20] 1 ]
[ 5]   0 : CALL_PRIMOP	"cons?"
                                      5: [ #f #t #f [K3:20] #f ]
[ 5]   1 : RETURN_VAL
                                      4: [ #f #t #f #f ]
[ 4]  20 : MAKE_LABEL	"K3"
                                      4: [ #f #t #f #f ]
[ 4]  21 : SAVE_RETURN	"K4"	25
                                      5: [ #f #t #f #f [K4:25] ]
[ 5]  22 : PUSH_CONST	#f
                                      6: [ #f #t #f #f [K4:25] #f ]
[ 6]  23 : GLOBAL_GET	core:cons?
                                      7: [ #f #t #f #f [K4:25] #f [Closure] ]
[ 7]  24 : JMP_CLOSURE	1
                                      6: [ #f #t #f #f [K4:25] #f ]
[ 6]   0 : CALL_PRIMOP	"cons?"
                                      6: [ #f #t #f #f [K4:25] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ #f #t #f #f #f ]
[ 5]  25 : MAKE_LABEL	"K4"
                                      5: [ #f #t #f #f #f ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ #f #t #f #f #f [Closure] ]
[ 6]  27 : JMP_CLOSURE	5
                                      5: [ #f #t #f #f #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      1: [ (#f #t #f #f #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#f #t #f #f #f)"  - expected "(#f #t #f #f #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (atom? ()) (atom? '(a)) (atom? 0) (atom? 1) (atom? #f))
==>  (list (core:atom? ()) (core:atom? (quote (a))) (core:atom? 0) (core:atom? 1) (core:atom? #f))
Parsed:  (list (core:atom? ()) (core:atom? (quote (a))) (core:atom? 0) (core:atom? 1) (core:atom? #f))
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	core:atom?
	9	JMP_CLOSURE	1
10	MAKE_LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	core:atom?
	14	JMP_CLOSURE	1
15	MAKE_LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	core:atom?
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	core:atom?
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

Running...
Executing:  lambda: ((list (core:atom? ()) (core:atom? (quote (a))) (core:atom? 0) (core:atom? 1) (core:atom? #f)))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	core:atom?
	9	JMP_CLOSURE	1
10	MAKE_LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	core:atom?
	14	JMP_CLOSURE	1
15	MAKE_LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	core:atom?
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	core:atom?
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : SAVE_RETURN	"K1"	10
                                      2: [ #t [K1:10] ]
[ 2]   7 : PUSH_CONST	(a)
                                      3: [ #t [K1:10] (a) ]
[ 3]   8 : GLOBAL_GET	core:atom?
                                      4: [ #t [K1:10] (a) [Closure] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ #t [K1:10] (a) ]
[ 3]   0 : CALL_PRIMOP	"atom?"
                                      3: [ #t [K1:10] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ #t #f ]
[ 2]  10 : MAKE_LABEL	"K1"
                                      2: [ #t #f ]
[ 2]  11 : SAVE_RETURN	"K2"	15
                                      3: [ #t #f [K2:15] ]
[ 3]  12 : PUSH_CONST	0
                                      4: [ #t #f [K2:15] 0 ]
[ 4]  13 : GLOBAL_GET	core:atom?
                                      5: [ #t #f [K2:15] 0 [Closure] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ #t #f [K2:15] 0 ]
[ 4]   0 : CALL_PRIMOP	"atom?"
                                      4: [ #t #f [K2:15] #t ]
[ 4]   1 : RETURN_VAL
                                      3: [ #t #f #t ]
[ 3]  15 : MAKE_LABEL	"K2"
                                      3: [ #t #f #t ]
[ 3]  16 : SAVE_RETURN	"K3"	20
                                      4: [ #t #f #t [K3:20] ]
[ 4]  17 : PUSH_CONST	1
                                      5: [ #t #f #t [K3:20] 1 ]
[ 5]  18 : GLOBAL_GET	core:atom?
                                      6: [ #t #f #t [K3:20] 1 [Closure] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ #t #f #t [K3:20] 1 ]
[ 5]   0 : CALL_PRIMOP	"atom?"
                                      5: [ #t #f #t [K3:20] #t ]
[ 5]   1 : RETURN_VAL
                                      4: [ #t #f #t #t ]
[ 4]  20 : MAKE_LABEL	"K3"
                                      4: [ #t #f #t #t ]
[ 4]  21 : SAVE_RETURN	"K4"	25
                                      5: [ #t #f #t #t [K4:25] ]
[ 5]  22 : PUSH_CONST	#f
                                      6: [ #t #f #t #t [K4:25] #f ]
[ 6]  23 : GLOBAL_GET	core:atom?
                                      7: [ #t #f #t #t [K4:25] #f [Closure] ]
[ 7]  24 : JMP_CLOSURE	1
                                      6: [ #t #f #t #t [K4:25] #f ]
[ 6]   0 : CALL_PRIMOP	"atom?"
                                      6: [ #t #f #t #t [K4:25] #t ]
[ 6]   1 : RETURN_VAL
                                      5: [ #t #f #t #t #t ]
[ 5]  25 : MAKE_LABEL	"K4"
                                      5: [ #t #f #t #t #t ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ #t #f #t #t #t [Closure] ]
[ 6]  27 : JMP_CLOSURE	5
                                      5: [ #t #f #t #t #t ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      1: [ (#t #f #t #t #t) ]
[ 1]   1 : RETURN_VAL
test: got "(#t #f #t #t #t)"  - expected "(#t #f #t #t #t)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (number? ()) (number? '(a)) (number? 0) (number? 1) (number? #f))
==>  (list (core:number? ()) (core:number? (quote (a))) (core:number? 0) (core:number? 1) (core:number? #f))
Parsed:  (list (core:number? ()) (core:number? (quote (a))) (core:number? 0) (core:number? 1) (core:number? #f))
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	core:number?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	core:number?
	9	JMP_CLOSURE	1
10	MAKE_LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	core:number?
	14	JMP_CLOSURE	1
15	MAKE_LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	core:number?
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	core:number?
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

Running...
Executing:  lambda: ((list (core:number? ()) (core:number? (quote (a))) (core:number? 0) (core:number? 1) (core:number? #f)))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	core:number?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	core:number?
	9	JMP_CLOSURE	1
10	MAKE_LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	core:number?
	14	JMP_CLOSURE	1
15	MAKE_LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	core:number?
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	core:number?
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K4"
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	5

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:number?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"number?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : SAVE_RETURN	"K1"	10
                                      2: [ #f [K1:10] ]
[ 2]   7 : PUSH_CONST	(a)
                                      3: [ #f [K1:10] (a) ]
[ 3]   8 : GLOBAL_GET	core:number?
                                      4: [ #f [K1:10] (a) [Closure] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ #f [K1:10] (a) ]
[ 3]   0 : CALL_PRIMOP	"number?"
                                      3: [ #f [K1:10] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ #f #f ]
[ 2]  10 : MAKE_LABEL	"K1"
                                      2: [ #f #f ]
[ 2]  11 : SAVE_RETURN	"K2"	15
                                      3: [ #f #f [K2:15] ]
[ 3]  12 : PUSH_CONST	0
                                      4: [ #f #f [K2:15] 0 ]
[ 4]  13 : GLOBAL_GET	core:number?
                                      5: [ #f #f [K2:15] 0 [Closure] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ #f #f [K2:15] 0 ]
[ 4]   0 : CALL_PRIMOP	"number?"
                                      4: [ #f #f [K2:15] #t ]
[ 4]   1 : RETURN_VAL
                                      3: [ #f #f #t ]
[ 3]  15 : MAKE_LABEL	"K2"
                                      3: [ #f #f #t ]
[ 3]  16 : SAVE_RETURN	"K3"	20
                                      4: [ #f #f #t [K3:20] ]
[ 4]  17 : PUSH_CONST	1
                                      5: [ #f #f #t [K3:20] 1 ]
[ 5]  18 : GLOBAL_GET	core:number?
                                      6: [ #f #f #t [K3:20] 1 [Closure] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ #f #f #t [K3:20] 1 ]
[ 5]   0 : CALL_PRIMOP	"number?"
                                      5: [ #f #f #t [K3:20] #t ]
[ 5]   1 : RETURN_VAL
                                      4: [ #f #f #t #t ]
[ 4]  20 : MAKE_LABEL	"K3"
                                      4: [ #f #f #t #t ]
[ 4]  21 : SAVE_RETURN	"K4"	25
                                      5: [ #f #f #t #t [K4:25] ]
[ 5]  22 : PUSH_CONST	#f
                                      6: [ #f #f #t #t [K4:25] #f ]
[ 6]  23 : GLOBAL_GET	core:number?
                                      7: [ #f #f #t #t [K4:25] #f [Closure] ]
[ 7]  24 : JMP_CLOSURE	1
                                      6: [ #f #f #t #t [K4:25] #f ]
[ 6]   0 : CALL_PRIMOP	"number?"
                                      6: [ #f #f #t #t [K4:25] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ #f #f #t #t #f ]
[ 5]  25 : MAKE_LABEL	"K4"
                                      5: [ #f #f #t #t #f ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ #f #f #t #t #f [Closure] ]
[ 6]  27 : JMP_CLOSURE	5
                                      5: [ #f #f #t #t #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      1: [ (#f #f #t #t #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#f #f #t #t #f)"  - expected "(#f #f #t #t #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (string? ()) (string? '(a)) (string? 0) (string? 1) (string? #f) (string? "foo"))
==>  (list (core:string? ()) (core:string? (quote (a))) (core:string? 0) (core:string? 1) (core:string? #f) (core:string? "foo"))
Parsed:  (list (core:string? ()) (core:string? (quote (a))) (core:string? 0) (core:string? 1) (core:string? #f) (core:string? "foo"))
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	core:string?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	core:string?
	9	JMP_CLOSURE	1
10	MAKE_LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	core:string?
	14	JMP_CLOSURE	1
15	MAKE_LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	core:string?
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	core:string?
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K4"
	26	SAVE_RETURN	"K5"	30
	27	PUSH_CONST	"foo"
	28	GLOBAL_GET	core:string?
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	list
	32	JMP_CLOSURE	6

Running...
Executing:  lambda: ((list (core:string? ()) (core:string? (quote (a))) (core:string? 0) (core:string? 1) (core:string? #f) (core:string? "foo")))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	()
	3	GLOBAL_GET	core:string?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(a)
	8	GLOBAL_GET	core:string?
	9	JMP_CLOSURE	1
10	MAKE_LABEL	"K1"
	11	SAVE_RETURN	"K2"	15
	12	PUSH_CONST	0
	13	GLOBAL_GET	core:string?
	14	JMP_CLOSURE	1
15	MAKE_LABEL	"K2"
	16	SAVE_RETURN	"K3"	20
	17	PUSH_CONST	1
	18	GLOBAL_GET	core:string?
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	SAVE_RETURN	"K4"	25
	22	PUSH_CONST	#f
	23	GLOBAL_GET	core:string?
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K4"
	26	SAVE_RETURN	"K5"	30
	27	PUSH_CONST	"foo"
	28	GLOBAL_GET	core:string?
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	list
	32	JMP_CLOSURE	6

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:string?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"string?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : SAVE_RETURN	"K1"	10
                                      2: [ #f [K1:10] ]
[ 2]   7 : PUSH_CONST	(a)
                                      3: [ #f [K1:10] (a) ]
[ 3]   8 : GLOBAL_GET	core:string?
                                      4: [ #f [K1:10] (a) [Closure] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ #f [K1:10] (a) ]
[ 3]   0 : CALL_PRIMOP	"string?"
                                      3: [ #f [K1:10] #f ]
[ 3]   1 : RETURN_VAL
                                      2: [ #f #f ]
[ 2]  10 : MAKE_LABEL	"K1"
                                      2: [ #f #f ]
[ 2]  11 : SAVE_RETURN	"K2"	15
                                      3: [ #f #f [K2:15] ]
[ 3]  12 : PUSH_CONST	0
                                      4: [ #f #f [K2:15] 0 ]
[ 4]  13 : GLOBAL_GET	core:string?
                                      5: [ #f #f [K2:15] 0 [Closure] ]
[ 5]  14 : JMP_CLOSURE	1
                                      4: [ #f #f [K2:15] 0 ]
[ 4]   0 : CALL_PRIMOP	"string?"
                                      4: [ #f #f [K2:15] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ #f #f #f ]
[ 3]  15 : MAKE_LABEL	"K2"
                                      3: [ #f #f #f ]
[ 3]  16 : SAVE_RETURN	"K3"	20
                                      4: [ #f #f #f [K3:20] ]
[ 4]  17 : PUSH_CONST	1
                                      5: [ #f #f #f [K3:20] 1 ]
[ 5]  18 : GLOBAL_GET	core:string?
                                      6: [ #f #f #f [K3:20] 1 [Closure] ]
[ 6]  19 : JMP_CLOSURE	1
                                      5: [ #f #f #f [K3:20] 1 ]
[ 5]   0 : CALL_PRIMOP	"string?"
                                      5: [ #f #f #f [K3:20] #f ]
[ 5]   1 : RETURN_VAL
                                      4: [ #f #f #f #f ]
[ 4]  20 : MAKE_LABEL	"K3"
                                      4: [ #f #f #f #f ]
[ 4]  21 : SAVE_RETURN	"K4"	25
                                      5: [ #f #f #f #f [K4:25] ]
[ 5]  22 : PUSH_CONST	#f
                                      6: [ #f #f #f #f [K4:25] #f ]
[ 6]  23 : GLOBAL_GET	core:string?
                                      7: [ #f #f #f #f [K4:25] #f [Closure] ]
[ 7]  24 : JMP_CLOSURE	1
                                      6: [ #f #f #f #f [K4:25] #f ]
[ 6]   0 : CALL_PRIMOP	"string?"
                                      6: [ #f #f #f #f [K4:25] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ #f #f #f #f #f ]
[ 5]  25 : MAKE_LABEL	"K4"
                                      5: [ #f #f #f #f #f ]
[ 5]  26 : SAVE_RETURN	"K5"	30
                                      6: [ #f #f #f #f #f [K5:30] ]
[ 6]  27 : PUSH_CONST	"foo"
                                      7: [ #f #f #f #f #f [K5:30] "foo" ]
[ 7]  28 : GLOBAL_GET	core:string?
                                      8: [ #f #f #f #f #f [K5:30] "foo" [Closure] ]
[ 8]  29 : JMP_CLOSURE	1
                                      7: [ #f #f #f #f #f [K5:30] "foo" ]
[ 7]   0 : CALL_PRIMOP	"string?"
                                      7: [ #f #f #f #f #f [K5:30] #t ]
[ 7]   1 : RETURN_VAL
                                      6: [ #f #f #f #f #f #t ]
[ 6]  30 : MAKE_LABEL	"K5"
                                      6: [ #f #f #f #f #f #t ]
[ 6]  31 : GLOBAL_GET	list
                                      7: [ #f #f #f #f #f #t [Closure] ]
[ 7]  32 : JMP_CLOSURE	6
                                      6: [ #f #f #f #f #f #t ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      1: [ (#f #f #f #f #f #t) ]
[ 1]   1 : RETURN_VAL
test: got "(#f #f #f #f #f #t)"  - expected "(#f #f #f #f #f #t)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x '(1 2 3 4 5)) (list (car x) (cadr x) (caddr x)))
==>  (begin (set! x (quote (1 2 3 4 5))) (list (core:car x) (core:cadr x) (core:caddr x)))
Parsed:  (begin (set! x (quote (1 2 3 4 5))) (list (core:car x) (core:cadr x) (core:caddr x)))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	core:car
	7	JMP_CLOSURE	1
8	MAKE_LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	core:cadr
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	core:caddr
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

Running...
Executing:  lambda: ((begin (set! x (quote (1 2 3 4 5))) (list (core:car x) (core:cadr x) (core:caddr x))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	core:car
	7	JMP_CLOSURE	1
8	MAKE_LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	core:cadr
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	core:caddr
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ (1 2 3 4 5) ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"K0"	8
                                      1: [ [K0:8] ]
[ 1]   5 : GLOBAL_GET	x
                                      2: [ [K0:8] (1 2 3 4 5) ]
[ 2]   6 : GLOBAL_GET	core:car
                                      3: [ [K0:8] (1 2 3 4 5) [Closure] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [K0:8] (1 2 3 4 5) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [K0:8] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]   8 : MAKE_LABEL	"K0"
                                      1: [ 1 ]
[ 1]   9 : SAVE_RETURN	"K1"	13
                                      2: [ 1 [K1:13] ]
[ 2]  10 : GLOBAL_GET	x
                                      3: [ 1 [K1:13] (1 2 3 4 5) ]
[ 3]  11 : GLOBAL_GET	core:cadr
                                      4: [ 1 [K1:13] (1 2 3 4 5) [Closure] ]
[ 4]  12 : JMP_CLOSURE	1
                                      3: [ 1 [K1:13] (1 2 3 4 5) ]
[ 3]   0 : CALL_PRIMOP	"cadr"
                                      3: [ 1 [K1:13] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 2 ]
[ 2]  13 : MAKE_LABEL	"K1"
                                      2: [ 1 2 ]
[ 2]  14 : SAVE_RETURN	"K2"	18
                                      3: [ 1 2 [K2:18] ]
[ 3]  15 : GLOBAL_GET	x
                                      4: [ 1 2 [K2:18] (1 2 3 4 5) ]
[ 4]  16 : GLOBAL_GET	core:caddr
                                      5: [ 1 2 [K2:18] (1 2 3 4 5) [Closure] ]
[ 5]  17 : JMP_CLOSURE	1
                                      4: [ 1 2 [K2:18] (1 2 3 4 5) ]
[ 4]   0 : CALL_PRIMOP	"caddr"
                                      4: [ 1 2 [K2:18] 3 ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 2 3 ]
[ 3]  18 : MAKE_LABEL	"K2"
                                      3: [ 1 2 3 ]
[ 3]  19 : GLOBAL_GET	list
                                      4: [ 1 2 3 [Closure] ]
[ 4]  20 : JMP_CLOSURE	3
                                      3: [ 1 2 3 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3)"  - expected "(1 2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x '(1 2 3 4 5)) (list (cdr x) (cddr x) (cdddr x)))
==>  (begin (set! x (quote (1 2 3 4 5))) (list (core:cdr x) (core:cddr x) (core:cdddr x)))
Parsed:  (begin (set! x (quote (1 2 3 4 5))) (list (core:cdr x) (core:cddr x) (core:cdddr x)))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	core:cdr
	7	JMP_CLOSURE	1
8	MAKE_LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	core:cddr
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	core:cdddr
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

Running...
Executing:  lambda: ((begin (set! x (quote (1 2 3 4 5))) (list (core:cdr x) (core:cddr x) (core:cdddr x))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	x
	6	GLOBAL_GET	core:cdr
	7	JMP_CLOSURE	1
8	MAKE_LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	x
	11	GLOBAL_GET	core:cddr
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	x
	16	GLOBAL_GET	core:cdddr
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K2"
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ (1 2 3 4 5) ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"K0"	8
                                      1: [ [K0:8] ]
[ 1]   5 : GLOBAL_GET	x
                                      2: [ [K0:8] (1 2 3 4 5) ]
[ 2]   6 : GLOBAL_GET	core:cdr
                                      3: [ [K0:8] (1 2 3 4 5) [Closure] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [K0:8] (1 2 3 4 5) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [K0:8] (2 3 4 5) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (2 3 4 5) ]
[ 1]   8 : MAKE_LABEL	"K0"
                                      1: [ (2 3 4 5) ]
[ 1]   9 : SAVE_RETURN	"K1"	13
                                      2: [ (2 3 4 5) [K1:13] ]
[ 2]  10 : GLOBAL_GET	x
                                      3: [ (2 3 4 5) [K1:13] (1 2 3 4 5) ]
[ 3]  11 : GLOBAL_GET	core:cddr
                                      4: [ (2 3 4 5) [K1:13] (1 2 3 4 5) [Closure] ]
[ 4]  12 : JMP_CLOSURE	1
                                      3: [ (2 3 4 5) [K1:13] (1 2 3 4 5) ]
[ 3]   0 : CALL_PRIMOP	"cddr"
                                      3: [ (2 3 4 5) [K1:13] (3 4 5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (2 3 4 5) (3 4 5) ]
[ 2]  13 : MAKE_LABEL	"K1"
                                      2: [ (2 3 4 5) (3 4 5) ]
[ 2]  14 : SAVE_RETURN	"K2"	18
                                      3: [ (2 3 4 5) (3 4 5) [K2:18] ]
[ 3]  15 : GLOBAL_GET	x
                                      4: [ (2 3 4 5) (3 4 5) [K2:18] (1 2 3 4 5) ]
[ 4]  16 : GLOBAL_GET	core:cdddr
                                      5: [ (2 3 4 5) (3 4 5) [K2:18] (1 2 3 4 5) [Closure] ]
[ 5]  17 : JMP_CLOSURE	1
                                      4: [ (2 3 4 5) (3 4 5) [K2:18] (1 2 3 4 5) ]
[ 4]   0 : CALL_PRIMOP	"cdddr"
                                      4: [ (2 3 4 5) (3 4 5) [K2:18] (4 5) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]  18 : MAKE_LABEL	"K2"
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]  19 : GLOBAL_GET	list
                                      4: [ (2 3 4 5) (3 4 5) (4 5) [Closure] ]
[ 4]  20 : JMP_CLOSURE	3
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ ((2 3 4 5) (3 4 5) (4 5)) ]
[ 1]   1 : RETURN_VAL
test: got "((2 3 4 5) (3 4 5) (4 5))"  - expected "((2 3 4 5) (3 4 5) (4 5))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (nth '(1 2 3 4 5) 2)
==>  (core:nth (quote (1 2 3 4 5)) 2)
Parsed:  (core:nth (quote (1 2 3 4 5)) 2)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	PUSH_CONST	2
	3	GLOBAL_GET	core:nth
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((core:nth (quote (1 2 3 4 5)) 2))
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	PUSH_CONST	2
	3	GLOBAL_GET	core:nth
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ (1 2 3 4 5) 2 ]
[ 2]   3 : GLOBAL_GET	core:nth
                                      3: [ (1 2 3 4 5) 2 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ (1 2 3 4 5) 2 ]
[ 2]   0 : CALL_PRIMOP	"nth"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (nth-tail '(1 2 3 4 5) 2)
==>  (core:nth-tail (quote (1 2 3 4 5)) 2)
Parsed:  (core:nth-tail (quote (1 2 3 4 5)) 2)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	PUSH_CONST	2
	3	GLOBAL_GET	core:nth-tail
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((core:nth-tail (quote (1 2 3 4 5)) 2))
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	PUSH_CONST	2
	3	GLOBAL_GET	core:nth-tail
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ (1 2 3 4 5) 2 ]
[ 2]   3 : GLOBAL_GET	core:nth-tail
                                      3: [ (1 2 3 4 5) 2 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ (1 2 3 4 5) 2 ]
[ 2]   0 : CALL_PRIMOP	"nth-tail"
                                      1: [ (4 5) ]
[ 1]   1 : RETURN_VAL
test: got "(4 5)"  - expected "(4 5)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (nth-cons '(1 2 3 4 5) 2)
==>  (core:nth-cons (quote (1 2 3 4 5)) 2)
Parsed:  (core:nth-cons (quote (1 2 3 4 5)) 2)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	PUSH_CONST	2
	3	GLOBAL_GET	core:nth-cons
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((core:nth-cons (quote (1 2 3 4 5)) 2))
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	PUSH_CONST	2
	3	GLOBAL_GET	core:nth-cons
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ (1 2 3 4 5) 2 ]
[ 2]   3 : GLOBAL_GET	core:nth-cons
                                      3: [ (1 2 3 4 5) 2 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ (1 2 3 4 5) 2 ]
[ 2]   0 : CALL_PRIMOP	"nth-cons"
                                      1: [ (3 4 5) ]
[ 1]   1 : RETURN_VAL
test: got "(3 4 5)"  - expected "(3 4 5)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! first car) (first '(1 2 3)))
==>  (begin (set! first core:car) (first (quote (1 2 3))))
Parsed:  (begin (set! first core:car) (first (quote (1 2 3))))
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:car
	2	GLOBAL_SET	first
	3	STACK_POP
	4	PUSH_CONST	(1 2 3)
	5	GLOBAL_GET	first
	6	JMP_CLOSURE	1

Running...
Executing:  lambda: ((begin (set! first core:car) (first (quote (1 2 3)))))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:car
	2	GLOBAL_SET	first
	3	STACK_POP
	4	PUSH_CONST	(1 2 3)
	5	GLOBAL_GET	first
	6	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:car
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	first
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	(1 2 3)
                                      1: [ (1 2 3) ]
[ 1]   5 : GLOBAL_GET	first
                                      2: [ (1 2 3) [Closure] ]
[ 2]   6 : JMP_CLOSURE	1
                                      1: [ (1 2 3) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  `((list 1 2) ,(list 1 2) ,@(list 1 2))
==>  (list (list (quote list) (quote 1) (quote 2)) (list 1 2) 1 2)
Parsed:  (list (list (quote list) (quote 1) (quote 2)) (list 1 2) 1 2)
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	7
	2	PUSH_CONST	list
	3	PUSH_CONST	1
	4	PUSH_CONST	2
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	3
7	MAKE_LABEL	"K0"
	8	SAVE_RETURN	"K1"	13
	9	PUSH_CONST	1
	10	PUSH_CONST	2
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	2
13	MAKE_LABEL	"K1"
	14	PUSH_CONST	1
	15	PUSH_CONST	2
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	4

Running...
Executing:  lambda: ((list (list (quote list) (quote 1) (quote 2)) (list 1 2) 1 2))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	7
	2	PUSH_CONST	list
	3	PUSH_CONST	1
	4	PUSH_CONST	2
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	3
7	MAKE_LABEL	"K0"
	8	SAVE_RETURN	"K1"	13
	9	PUSH_CONST	1
	10	PUSH_CONST	2
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	2
13	MAKE_LABEL	"K1"
	14	PUSH_CONST	1
	15	PUSH_CONST	2
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	7
                                      1: [ [K0:7] ]
[ 1]   2 : PUSH_CONST	list
                                      2: [ [K0:7] list ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0:7] list 1 ]
[ 3]   4 : PUSH_CONST	2
                                      4: [ [K0:7] list 1 2 ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:7] list 1 2 [Closure] ]
[ 5]   6 : JMP_CLOSURE	3
                                      4: [ [K0:7] list 1 2 ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:7] (list 1 2) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (list 1 2) ]
[ 1]   7 : MAKE_LABEL	"K0"
                                      1: [ (list 1 2) ]
[ 1]   8 : SAVE_RETURN	"K1"	13
                                      2: [ (list 1 2) [K1:13] ]
[ 2]   9 : PUSH_CONST	1
                                      3: [ (list 1 2) [K1:13] 1 ]
[ 3]  10 : PUSH_CONST	2
                                      4: [ (list 1 2) [K1:13] 1 2 ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ (list 1 2) [K1:13] 1 2 [Closure] ]
[ 5]  12 : JMP_CLOSURE	2
                                      4: [ (list 1 2) [K1:13] 1 2 ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      3: [ (list 1 2) [K1:13] (1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (list 1 2) (1 2) ]
[ 2]  13 : MAKE_LABEL	"K1"
                                      2: [ (list 1 2) (1 2) ]
[ 2]  14 : PUSH_CONST	1
                                      3: [ (list 1 2) (1 2) 1 ]
[ 3]  15 : PUSH_CONST	2
                                      4: [ (list 1 2) (1 2) 1 2 ]
[ 4]  16 : GLOBAL_GET	list
                                      5: [ (list 1 2) (1 2) 1 2 [Closure] ]
[ 5]  17 : JMP_CLOSURE	4
                                      4: [ (list 1 2) (1 2) 1 2 ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ ((list 1 2) (1 2) 1 2) ]
[ 1]   1 : RETURN_VAL
test: got "((list 1 2) (1 2) 1 2)"  - expected "((list 1 2) (1 2) 1 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x 5) (set! y '(a b)) `(x ,x ,y ,@y))
==>  (begin (set! x 5) (set! y (quote (a b))) (append (list (quote x)) (list x) (list y) y))
Parsed:  (begin (set! x 5) (set! y (quote (a b))) (append (list (quote x)) (list x) (list y) y))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	(a b)
	5	GLOBAL_SET	y
	6	STACK_POP
	7	SAVE_RETURN	"K0"	11
	8	PUSH_CONST	x
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K0"
	12	SAVE_RETURN	"K1"	16
	13	GLOBAL_GET	x
	14	GLOBAL_GET	list
	15	JMP_CLOSURE	1
16	MAKE_LABEL	"K1"
	17	SAVE_RETURN	"K2"	21
	18	GLOBAL_GET	y
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	1
21	MAKE_LABEL	"K2"
	22	GLOBAL_GET	y
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

Running...
Executing:  lambda: ((begin (set! x 5) (set! y (quote (a b))) (append (list (quote x)) (list x) (list y) y)))
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	STACK_POP
	4	PUSH_CONST	(a b)
	5	GLOBAL_SET	y
	6	STACK_POP
	7	SAVE_RETURN	"K0"	11
	8	PUSH_CONST	x
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K0"
	12	SAVE_RETURN	"K1"	16
	13	GLOBAL_GET	x
	14	GLOBAL_GET	list
	15	JMP_CLOSURE	1
16	MAKE_LABEL	"K1"
	17	SAVE_RETURN	"K2"	21
	18	GLOBAL_GET	y
	19	GLOBAL_GET	list
	20	JMP_CLOSURE	1
21	MAKE_LABEL	"K2"
	22	GLOBAL_GET	y
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ 5 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	(a b)
                                      1: [ (a b) ]
[ 1]   5 : GLOBAL_SET	y
                                      1: [ (a b) ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K0"	11
                                      1: [ [K0:11] ]
[ 1]   8 : PUSH_CONST	x
                                      2: [ [K0:11] x ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [K0:11] x [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K0:11] x ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:11] (x) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (x) ]
[ 1]  11 : MAKE_LABEL	"K0"
                                      1: [ (x) ]
[ 1]  12 : SAVE_RETURN	"K1"	16
                                      2: [ (x) [K1:16] ]
[ 2]  13 : GLOBAL_GET	x
                                      3: [ (x) [K1:16] 5 ]
[ 3]  14 : GLOBAL_GET	list
                                      4: [ (x) [K1:16] 5 [Closure] ]
[ 4]  15 : JMP_CLOSURE	1
                                      3: [ (x) [K1:16] 5 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (x) [K1:16] (5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (x) (5) ]
[ 2]  16 : MAKE_LABEL	"K1"
                                      2: [ (x) (5) ]
[ 2]  17 : SAVE_RETURN	"K2"	21
                                      3: [ (x) (5) [K2:21] ]
[ 3]  18 : GLOBAL_GET	y
                                      4: [ (x) (5) [K2:21] (a b) ]
[ 4]  19 : GLOBAL_GET	list
                                      5: [ (x) (5) [K2:21] (a b) [Closure] ]
[ 5]  20 : JMP_CLOSURE	1
                                      4: [ (x) (5) [K2:21] (a b) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ (x) (5) [K2:21] ((a b)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (x) (5) ((a b)) ]
[ 3]  21 : MAKE_LABEL	"K2"
                                      3: [ (x) (5) ((a b)) ]
[ 3]  22 : GLOBAL_GET	y
                                      4: [ (x) (5) ((a b)) (a b) ]
[ 4]  23 : GLOBAL_GET	append
                                      5: [ (x) (5) ((a b)) (a b) [Closure] ]
[ 5]  24 : JMP_CLOSURE	4
                                      4: [ (x) (5) ((a b)) (a b) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (x 5 (a b) a b) ]
[ 1]   1 : RETURN_VAL
test: got "(x 5 (a b) a b)"  - expected "(x 5 (a b) a b)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (defmacro inc1 (x) `(+ ,x 1)) (inc1 2))
==>  (begin (defmacro inc1 (x) (list (quote core:+) x (quote 1))) (inc1 2))
Parsed:  (begin (defmacro inc1 (x) (list (quote core:+) x (quote 1))) (inc1 2))
Executing:  lambda: ((list (quote core:+) x (quote 1)))
	0	MAKE_ENV	1
	1	PUSH_CONST	core:+
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      1: [ 2 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : PUSH_CONST	core:+
                                      1: [ core:+ ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ core:+ 2 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ core:+ 2 1 ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ core:+ 2 1 [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ core:+ 2 1 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:+ 2 1) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	2
	2	PUSH_CONST	1
	3	GLOBAL_GET	core:+
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((begin (defmacro inc1 (x) (list (quote core:+) x (quote 1))) (inc1 2)))
	0	MAKE_ENV	0
	1	PUSH_CONST	2
	2	PUSH_CONST	1
	3	GLOBAL_GET	core:+
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	2
                                      1: [ 2 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 2 1 ]
[ 2]   3 : GLOBAL_GET	core:+
                                      3: [ 2 1 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 2 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (defmacro foo (op . rest) `(,op ,@(map number? rest))) (foo list 1 #f 'a))
==>  (begin (defmacro foo (op . rest) (append (list op) (core:map core:number? rest))) (foo list 1 #f (quote a)))
Parsed:  (begin (defmacro foo (op . rest) (append (list op) (core:map core:number? rest))) (foo list 1 #f (quote a)))
Executing:  lambda: ((append (list op) (core:map core:number? rest)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; op
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	11
	7	GLOBAL_GET	core:number?
	8	LOCAL_GET	0	1	; rest
	9	GLOBAL_GET	core:map
	10	JMP_CLOSURE	2
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	append
	13	JMP_CLOSURE	2

                                      4: [ list 1 #f (quote a) ]
[ 4]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; op
                                      2: [ [K0:5] list ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [K0:5] list [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] list ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:5] (list) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (list) ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ (list) ]
[ 1]   6 : SAVE_RETURN	"K1"	11
                                      2: [ (list) [K1:11] ]
[ 2]   7 : GLOBAL_GET	core:number?
                                      3: [ (list) [K1:11] [Closure] ]
[ 3]   8 : LOCAL_GET	0	1	; rest
                                      4: [ (list) [K1:11] [Closure] (1 #f (quote a)) ]
[ 4]   9 : GLOBAL_GET	core:map
                                      5: [ (list) [K1:11] [Closure] (1 #f (quote a)) [Closure] ]
[ 5]  10 : JMP_CLOSURE	2
                                      4: [ (list) [K1:11] [Closure] (1 #f (quote a)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ 1 ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #t ]
[ 1]   1 : RETURN_VAL
Executing:  primitive: core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ #f ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
Executing:  primitive: core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ (quote a) ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
                                      3: [ (list) [K1:11] (#t #f #f) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (list) (#t #f #f) ]
[ 2]  11 : MAKE_LABEL	"K1"
                                      2: [ (list) (#t #f #f) ]
[ 2]  12 : GLOBAL_GET	append
                                      3: [ (list) (#t #f #f) [Closure] ]
[ 3]  13 : JMP_CLOSURE	2
                                      2: [ (list) (#t #f #f) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (list #t #f #f) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	#t
	2	PUSH_CONST	#f
	3	PUSH_CONST	#f
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

Running...
Executing:  lambda: ((begin (defmacro foo (op . rest) (append (list op) (core:map core:number? rest))) (foo list 1 #f (quote a))))
	0	MAKE_ENV	0
	1	PUSH_CONST	#t
	2	PUSH_CONST	#f
	3	PUSH_CONST	#f
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]   2 : PUSH_CONST	#f
                                      2: [ #t #f ]
[ 2]   3 : PUSH_CONST	#f
                                      3: [ #t #f #f ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ #t #f #f [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ #t #f #f ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (#t #f #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#t #f #f)"  - expected "(#t #f #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (defmacro lettest (bindings . body) `((lambda ,(map car bindings) ,@body) ,@(map cadr bindings))) (lettest ((x 1) (y 2)) (+ x y)))
==>  (begin (defmacro lettest (bindings . body) (append (list (append (list (quote lambda)) (list (core:map core:car bindings)) body)) (core:map core:cadr bindings))) (lettest ((x 1) (y 2)) (core:+ x y)))
Parsed:  (begin (defmacro lettest (bindings . body) (append (list (append (list (quote lambda)) (list (core:map core:car bindings)) body)) (core:map core:cadr bindings))) (lettest ((x 1) (y 2)) (core:+ x y)))
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car bindings)) body)) (core:map core:cadr bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((x 1) (y 2)) (core:+ x y) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((x 1) (y 2)) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((x 1) (y 2)) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((x 1) (y 2)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ x ]
[ 1]   1 : RETURN_VAL
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (y 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (x y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (x y) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (x y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (x y) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (x y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((x y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((x y)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((x y)) ]
[ 4]  18 : LOCAL_GET	0	1	; body
                                      5: [ [K0:24] [K1:21] (lambda) ((x y)) ((core:+ x y)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((x y)) ((core:+ x y)) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((x y)) ((core:+ x y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (x y) (core:+ x y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (x y) (core:+ x y)) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (x y) (core:+ x y)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (x y) (core:+ x y)) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (x y) (core:+ x y)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (x y) (core:+ x y))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (x y) (core:+ x y))) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (x y) (core:+ x y))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (x y) (core:+ x y))) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (x y) (core:+ x y))) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; bindings
                                      4: [ ((lambda (x y) (core:+ x y))) [K5:30] [Closure] ((x 1) (y 2)) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (x y) (core:+ x y))) [K5:30] [Closure] ((x 1) (y 2)) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (x y) (core:+ x y))) [K5:30] [Closure] ((x 1) (y 2)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (y 2) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (x y) (core:+ x y))) [K5:30] (1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (x y) (core:+ x y))) (1 2) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (x y) (core:+ x y))) (1 2) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (x y) (core:+ x y))) (1 2) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (x y) (core:+ x y))) (1 2) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (x y) (core:+ x y)) 1 2) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	MAKE_CLOSURE	[Closure]	; ((core:+ x y))
		0	MAKE_ENV	2
		1	LOCAL_GET	0	0	; x
		2	LOCAL_GET	0	1	; y
		3	GLOBAL_GET	core:+
		4	JMP_CLOSURE	2
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((begin (defmacro lettest (bindings . body) (append (list (append (list (quote lambda)) (list (core:map core:car bindings)) body)) (core:map core:cadr bindings))) (lettest ((x 1) (y 2)) (core:+ x y))))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	MAKE_CLOSURE	[Closure]	; ((core:+ x y))
		0	MAKE_ENV	2
		1	LOCAL_GET	0	0	; x
		2	LOCAL_GET	0	1	; y
		3	GLOBAL_GET	core:+
		4	JMP_CLOSURE	2
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; ((core:+ x y))
                                      3: [ 1 2 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : MAKE_ENV	2
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; x
                                      1: [ 1 ]
[ 1]   2 : LOCAL_GET	0	1	; y
                                      2: [ 1 2 ]
[ 2]   3 : GLOBAL_GET	core:+
                                      3: [ 1 2 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 3 ]
[ 1]   1 : RETURN_VAL
test: got "3"  - expected "3"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (defmacro inc1 (x) `(+ ,x 1)) (inc1 (inc1 (inc1 1))))
==>  (begin (defmacro inc1 (x) (list (quote core:+) x (quote 1))) (inc1 (inc1 (inc1 1))))
Parsed:  (begin (defmacro inc1 (x) (list (quote core:+) x (quote 1))) (inc1 (inc1 (inc1 1))))
Executing:  lambda: ((list (quote core:+) x (quote 1)))
	0	MAKE_ENV	1
	1	PUSH_CONST	core:+
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      1: [ (inc1 (inc1 1)) ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : PUSH_CONST	core:+
                                      1: [ core:+ ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ core:+ (inc1 (inc1 1)) ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ core:+ (inc1 (inc1 1)) 1 ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ core:+ (inc1 (inc1 1)) 1 [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ core:+ (inc1 (inc1 1)) 1 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:+ (inc1 (inc1 1)) 1) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((list (quote core:+) x (quote 1)))
	0	MAKE_ENV	1
	1	PUSH_CONST	core:+
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      1: [ (inc1 1) ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : PUSH_CONST	core:+
                                      1: [ core:+ ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ core:+ (inc1 1) ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ core:+ (inc1 1) 1 ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ core:+ (inc1 1) 1 [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ core:+ (inc1 1) 1 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:+ (inc1 1) 1) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((list (quote core:+) x (quote 1)))
	0	MAKE_ENV	1
	1	PUSH_CONST	core:+
	2	LOCAL_GET	0	0	; x
	3	PUSH_CONST	1
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : PUSH_CONST	core:+
                                      1: [ core:+ ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ core:+ 1 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ core:+ 1 1 ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ core:+ 1 1 [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ core:+ 1 1 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:+ 1 1) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	11
	2	SAVE_RETURN	"K1"	7
	3	PUSH_CONST	1
	4	PUSH_CONST	1
	5	GLOBAL_GET	core:+
	6	JMP_CLOSURE	2
7	MAKE_LABEL	"K1"
	8	PUSH_CONST	1
	9	GLOBAL_GET	core:+
	10	JMP_CLOSURE	2
11	MAKE_LABEL	"K0"
	12	PUSH_CONST	1
	13	GLOBAL_GET	core:+
	14	JMP_CLOSURE	2

Running...
Executing:  lambda: ((begin (defmacro inc1 (x) (list (quote core:+) x (quote 1))) (inc1 (inc1 (inc1 1)))))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	11
	2	SAVE_RETURN	"K1"	7
	3	PUSH_CONST	1
	4	PUSH_CONST	1
	5	GLOBAL_GET	core:+
	6	JMP_CLOSURE	2
7	MAKE_LABEL	"K1"
	8	PUSH_CONST	1
	9	GLOBAL_GET	core:+
	10	JMP_CLOSURE	2
11	MAKE_LABEL	"K0"
	12	PUSH_CONST	1
	13	GLOBAL_GET	core:+
	14	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	11
                                      1: [ [K0:11] ]
[ 1]   2 : SAVE_RETURN	"K1"	7
                                      2: [ [K0:11] [K1:7] ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0:11] [K1:7] 1 ]
[ 3]   4 : PUSH_CONST	1
                                      4: [ [K0:11] [K1:7] 1 1 ]
[ 4]   5 : GLOBAL_GET	core:+
                                      5: [ [K0:11] [K1:7] 1 1 [Closure] ]
[ 5]   6 : JMP_CLOSURE	2
                                      4: [ [K0:11] [K1:7] 1 1 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ [K0:11] [K1:7] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:11] 2 ]
[ 2]   7 : MAKE_LABEL	"K1"
                                      2: [ [K0:11] 2 ]
[ 2]   8 : PUSH_CONST	1
                                      3: [ [K0:11] 2 1 ]
[ 3]   9 : GLOBAL_GET	core:+
                                      4: [ [K0:11] 2 1 [Closure] ]
[ 4]  10 : JMP_CLOSURE	2
                                      3: [ [K0:11] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0:11] 3 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 3 ]
[ 1]  11 : MAKE_LABEL	"K0"
                                      1: [ 3 ]
[ 1]  12 : PUSH_CONST	1
                                      2: [ 3 1 ]
[ 2]  13 : GLOBAL_GET	core:+
                                      3: [ 3 1 [Closure] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ 3 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 4 ]
[ 1]   1 : RETURN_VAL
test: got "4"  - expected "4"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (defmacro add (x y) `(+ ,x ,y)) (mx1 '(add 1 (add 2 3))))
==>  (begin (defmacro add (x y) (list (quote core:+) x y)) (core:mx1 (quote (add 1 (add 2 3)))))
Parsed:  (begin (defmacro add (x y) (list (quote core:+) x y)) (core:mx1 (quote (add 1 (add 2 3)))))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(add 1 (add 2 3))
	2	GLOBAL_GET	core:mx1
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((begin (defmacro add (x y) (list (quote core:+) x y)) (core:mx1 (quote (add 1 (add 2 3))))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(add 1 (add 2 3))
	2	GLOBAL_GET	core:mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(add 1 (add 2 3))
                                      1: [ (add 1 (add 2 3)) ]
[ 1]   2 : GLOBAL_GET	core:mx1
                                      2: [ (add 1 (add 2 3)) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (add 1 (add 2 3)) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  lambda: ((list (quote core:+) x y))
	0	MAKE_ENV	2
	1	PUSH_CONST	core:+
	2	LOCAL_GET	0	0	; x
	3	LOCAL_GET	0	1	; y
	4	GLOBAL_GET	list
	5	JMP_CLOSURE	3

                                      2: [ 1 (add 2 3) ]
[ 2]   0 : MAKE_ENV	2
                                      0: [  ]
[ 0]   1 : PUSH_CONST	core:+
                                      1: [ core:+ ]
[ 1]   2 : LOCAL_GET	0	0	; x
                                      2: [ core:+ 1 ]
[ 2]   3 : LOCAL_GET	0	1	; y
                                      3: [ core:+ 1 (add 2 3) ]
[ 3]   4 : GLOBAL_GET	list
                                      4: [ core:+ 1 (add 2 3) [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ core:+ 1 (add 2 3) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:+ 1 (add 2 3)) ]
[ 1]   1 : RETURN_VAL
                                      1: [ (core:+ 1 (add 2 3)) ]
[ 1]   1 : RETURN_VAL
test: got "(core:+ 1 (add 2 3))"  - expected "(core:+ 1 (add 2 3))"
SUCCESS


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo") (package-get)
==>  (core:package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-set "foo"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	core:package-set
                                      2: [ "foo" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""
==>  (core:package-get)
Parsed:  (core:package-get)
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:package-get
	2	JMP_CLOSURE	0

Running...
Executing:  lambda: ((core:package-get))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:package-get
	2	JMP_CLOSURE	0

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:package-get
                                      1: [ [Closure] ]
[ 1]   2 : JMP_CLOSURE	0
                                      0: [  ]
[ 0]   0 : CALL_PRIMOP	"package-get"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo") (package-import "core") (car '(1 2))
==>  (core:package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-set "foo"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	core:package-set
                                      2: [ "foo" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""
==>  (core:package-import "core")
Parsed:  (core:package-import "core")
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	core:package-import
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-import "core"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	core:package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	core:package-import
                                      2: [ "core" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
==>  (core:car (quote (1 2)))
Parsed:  (core:car (quote (1 2)))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	core:car
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:car (quote (1 2))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	core:car
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2)
                                      1: [ (1 2) ]
[ 1]   2 : GLOBAL_GET	core:car
                                      2: [ (1 2) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (1 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set nil) (set! x 5) (package-set "foo") (package-import "core") (set! x (+ 1 5)) (package-set nil) x
==>  (core:package-set foo:nil)
Parsed:  (core:package-set foo:nil)
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	foo:nil
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-set foo:nil))
	0	MAKE_ENV	0
	1	GLOBAL_GET	foo:nil
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	foo:nil
                                      1: [ () ]
[ 1]   2 : GLOBAL_GET	core:package-set
                                      2: [ () [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ () ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
==>  (set! x 5)
Parsed:  (set! x 5)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	RETURN_VAL

Running...
Executing:  lambda: ((set! x 5))
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	GLOBAL_SET	x
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_SET	x
                                      1: [ 5 ]
[ 1]   3 : RETURN_VAL
test: got "5"  - expected "5"
==>  (core:package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-set "foo"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	core:package-set
                                      2: [ "foo" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""
==>  (core:package-import "core")
Parsed:  (core:package-import "core")
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	core:package-import
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-import "core"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	core:package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	core:package-import
                                      2: [ "core" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
==>  (set! foo:x (core:+ 1 5))
Parsed:  (set! foo:x (core:+ 1 5))
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	5
	4	GLOBAL_GET	core:+
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	GLOBAL_SET	foo:x
	8	RETURN_VAL

Running...
Executing:  lambda: ((set! foo:x (core:+ 1 5)))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	5
	4	GLOBAL_GET	core:+
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	GLOBAL_SET	foo:x
	8	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0:6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [K0:6] 1 ]
[ 2]   3 : PUSH_CONST	5
                                      3: [ [K0:6] 1 5 ]
[ 3]   4 : GLOBAL_GET	core:+
                                      4: [ [K0:6] 1 5 [Closure] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0:6] 1 5 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0:6] 6 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 6 ]
[ 1]   6 : MAKE_LABEL	"K0"
                                      1: [ 6 ]
[ 1]   7 : GLOBAL_SET	foo:x
                                      1: [ 6 ]
[ 1]   8 : RETURN_VAL
test: got "6"  - expected "6"
==>  (core:package-set foo:nil)
Parsed:  (core:package-set foo:nil)
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	foo:nil
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-set foo:nil))
	0	MAKE_ENV	0
	1	GLOBAL_GET	foo:nil
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	foo:nil
                                      1: [ () ]
[ 1]   2 : GLOBAL_GET	core:package-set
                                      2: [ () [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ () ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
==>  x
Parsed:  x
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	x
	2	RETURN_VAL

Running...
Executing:  lambda: (x)
	0	MAKE_ENV	0
	1	GLOBAL_GET	x
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	x
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo") (package-import "core") (set! first car) (first '(1 2))
==>  (core:package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-set "foo"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	core:package-set
                                      2: [ "foo" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""
==>  (core:package-import "core")
Parsed:  (core:package-import "core")
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	core:package-import
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-import "core"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	core:package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	core:package-import
                                      2: [ "core" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
==>  (set! foo:first core:car)
Parsed:  (set! foo:first core:car)
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:car
	2	GLOBAL_SET	foo:first
	3	RETURN_VAL

Running...
Executing:  lambda: ((set! foo:first core:car))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:car
	2	GLOBAL_SET	foo:first
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:car
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	foo:first
                                      1: [ [Closure] ]
[ 1]   3 : RETURN_VAL
test: got "[Closure]"  - expected "[Closure]"
==>  (foo:first (quote (1 2)))
Parsed:  (foo:first (quote (1 2)))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	foo:first
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((foo:first (quote (1 2))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2)
	2	GLOBAL_GET	foo:first
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2)
                                      1: [ (1 2) ]
[ 1]   2 : GLOBAL_GET	foo:first
                                      2: [ (1 2) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (1 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "a") (package-export '(afoo)) (set! afoo 1) (package-set "b") (package-import "a") afoo
==>  (core:package-set "a")
Parsed:  (core:package-set "a")
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"a"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-set "a"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"a"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"a"
                                      1: [ "a" ]
[ 1]   2 : GLOBAL_GET	core:package-set
                                      2: [ "a" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "a" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "a" ]
[ 1]   1 : RETURN_VAL
test: got ""a""  - expected ""a""
==>  (core:package-export (quote (a:afoo)))
Parsed:  (core:package-export (quote (a:afoo)))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(a:afoo)
	2	GLOBAL_GET	core:package-export
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-export (quote (a:afoo))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(a:afoo)
	2	GLOBAL_GET	core:package-export
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(a:afoo)
                                      1: [ (a:afoo) ]
[ 1]   2 : GLOBAL_GET	core:package-export
                                      2: [ (a:afoo) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (a:afoo) ]
[ 1]   0 : CALL_PRIMOP	"package-export"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
==>  (set! a:afoo 1)
Parsed:  (set! a:afoo 1)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	GLOBAL_SET	a:afoo
	3	RETURN_VAL

Running...
Executing:  lambda: ((set! a:afoo 1))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	GLOBAL_SET	a:afoo
	3	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : GLOBAL_SET	a:afoo
                                      1: [ 1 ]
[ 1]   3 : RETURN_VAL
test: got "1"  - expected "1"
==>  (core:package-set "b")
Parsed:  (core:package-set "b")
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"b"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-set "b"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"b"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"b"
                                      1: [ "b" ]
[ 1]   2 : GLOBAL_GET	core:package-set
                                      2: [ "b" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "b" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "b" ]
[ 1]   1 : RETURN_VAL
test: got ""b""  - expected ""b""
==>  (core:package-import "a")
Parsed:  (core:package-import "a")
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"a"
	2	GLOBAL_GET	core:package-import
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-import "a"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"a"
	2	GLOBAL_GET	core:package-import
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"a"
                                      1: [ "a" ]
[ 1]   2 : GLOBAL_GET	core:package-import
                                      2: [ "a" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "a" ]
[ 1]   0 : CALL_PRIMOP	"package-import"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
test: got "()"  - expected "()"
==>  a:afoo
Parsed:  a:afoo
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	a:afoo
	2	RETURN_VAL

Running...
Executing:  lambda: (a:afoo)
	0	MAKE_ENV	0
	1	GLOBAL_GET	a:afoo
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	a:afoo
                                      1: [ 1 ]
[ 1]   2 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo")
==>  (core:package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-set "foo"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	core:package-set
                                      2: [ "foo" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (+ (+ 1 2) 3) 4)
==>  (begin (core:+ (core:+ 1 2) 3) 4)
Parsed:  (begin (core:+ (core:+ 1 2) 3) 4)
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	11
	2	SAVE_RETURN	"K1"	7
	3	PUSH_CONST	1
	4	PUSH_CONST	2
	5	GLOBAL_GET	core:+
	6	JMP_CLOSURE	2
7	MAKE_LABEL	"K1"
	8	PUSH_CONST	3
	9	GLOBAL_GET	core:+
	10	JMP_CLOSURE	2
11	MAKE_LABEL	"K0"
	12	STACK_POP
	13	PUSH_CONST	4
	14	RETURN_VAL

Running...
Executing:  lambda: ((begin (core:+ (core:+ 1 2) 3) 4))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	11
	2	SAVE_RETURN	"K1"	7
	3	PUSH_CONST	1
	4	PUSH_CONST	2
	5	GLOBAL_GET	core:+
	6	JMP_CLOSURE	2
7	MAKE_LABEL	"K1"
	8	PUSH_CONST	3
	9	GLOBAL_GET	core:+
	10	JMP_CLOSURE	2
11	MAKE_LABEL	"K0"
	12	STACK_POP
	13	PUSH_CONST	4
	14	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	11
                                      1: [ [K0:11] ]
[ 1]   2 : SAVE_RETURN	"K1"	7
                                      2: [ [K0:11] [K1:7] ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0:11] [K1:7] 1 ]
[ 3]   4 : PUSH_CONST	2
                                      4: [ [K0:11] [K1:7] 1 2 ]
[ 4]   5 : GLOBAL_GET	core:+
                                      5: [ [K0:11] [K1:7] 1 2 [Closure] ]
[ 5]   6 : JMP_CLOSURE	2
                                      4: [ [K0:11] [K1:7] 1 2 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ [K0:11] [K1:7] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:11] 3 ]
[ 2]   7 : MAKE_LABEL	"K1"
                                      2: [ [K0:11] 3 ]
[ 2]   8 : PUSH_CONST	3
                                      3: [ [K0:11] 3 3 ]
[ 3]   9 : GLOBAL_GET	core:+
                                      4: [ [K0:11] 3 3 [Closure] ]
[ 4]  10 : JMP_CLOSURE	2
                                      3: [ [K0:11] 3 3 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0:11] 6 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 6 ]
[ 1]  11 : MAKE_LABEL	"K0"
                                      1: [ 6 ]
[ 1]  12 : STACK_POP
                                      0: [  ]
[ 0]  13 : PUSH_CONST	4
                                      1: [ 4 ]
[ 1]  14 : RETURN_VAL
test: got "4"  - expected "4"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! incf (lambda (x) (+ x 1))) (incf (incf 5)))
==>  (begin (set! foo:incf (lambda (foo:x) (core:+ foo:x 1))) (foo:incf (foo:incf 5)))
Parsed:  (begin (set! foo:incf (lambda (foo:x) (core:+ foo:x 1))) (foo:incf (foo:incf 5)))
Compiled:
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; ((core:+ foo:x 1))
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; foo:x
		2	PUSH_CONST	1
		3	GLOBAL_GET	core:+
		4	JMP_CLOSURE	2
	2	GLOBAL_SET	foo:incf
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	PUSH_CONST	5
	6	GLOBAL_GET	foo:incf
	7	JMP_CLOSURE	1
8	MAKE_LABEL	"K0"
	9	GLOBAL_GET	foo:incf
	10	JMP_CLOSURE	1

Running...
Executing:  lambda: ((begin (set! foo:incf (lambda (foo:x) (core:+ foo:x 1))) (foo:incf (foo:incf 5))))
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; ((core:+ foo:x 1))
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; foo:x
		2	PUSH_CONST	1
		3	GLOBAL_GET	core:+
		4	JMP_CLOSURE	2
	2	GLOBAL_SET	foo:incf
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	PUSH_CONST	5
	6	GLOBAL_GET	foo:incf
	7	JMP_CLOSURE	1
8	MAKE_LABEL	"K0"
	9	GLOBAL_GET	foo:incf
	10	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((core:+ foo:x 1))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	foo:incf
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"K0"	8
                                      1: [ [K0:8] ]
[ 1]   5 : PUSH_CONST	5
                                      2: [ [K0:8] 5 ]
[ 2]   6 : GLOBAL_GET	foo:incf
                                      3: [ [K0:8] 5 [Closure] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [K0:8] 5 ]
[ 2]   0 : MAKE_ENV	1
                                      1: [ [K0:8] ]
[ 1]   1 : LOCAL_GET	0	0	; foo:x
                                      2: [ [K0:8] 5 ]
[ 2]   2 : PUSH_CONST	1
                                      3: [ [K0:8] 5 1 ]
[ 3]   3 : GLOBAL_GET	core:+
                                      4: [ [K0:8] 5 1 [Closure] ]
[ 4]   4 : JMP_CLOSURE	2
                                      3: [ [K0:8] 5 1 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0:8] 6 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 6 ]
[ 1]   8 : MAKE_LABEL	"K0"
                                      1: [ 6 ]
[ 1]   9 : GLOBAL_GET	foo:incf
                                      2: [ 6 [Closure] ]
[ 2]  10 : JMP_CLOSURE	1
                                      1: [ 6 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; foo:x
                                      1: [ 6 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 6 1 ]
[ 2]   3 : GLOBAL_GET	core:+
                                      3: [ 6 1 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 6 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 7 ]
[ 1]   1 : RETURN_VAL
test: got "7"  - expected "7"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! fact (lambda (x) (if (<= x 1) 1 (* x (fact (- x 1)))))) (fact 5))
==>  (begin (set! foo:fact (lambda (foo:x) (if (core:<= foo:x 1) 1 (core:* foo:x (foo:fact (core:- foo:x 1)))))) (foo:fact 5))
Parsed:  (begin (set! foo:fact (lambda (foo:x) (if (core:<= foo:x 1) 1 (core:* foo:x (foo:fact (core:- foo:x 1)))))) (foo:fact 5))
Compiled:
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; ((if (core:<= foo:x 1) 1 (core:* foo:x (foo:fact (core:- foo:x 1)))))
		0	MAKE_ENV	1
		1	SAVE_RETURN	"K0"	6
		2	LOCAL_GET	0	0	; foo:x
		3	PUSH_CONST	1
		4	GLOBAL_GET	core:<=
		5	JMP_CLOSURE	2
	6	MAKE_LABEL	"K0"
		7	JMP_IF_FALSE	"L3"	10
		8	PUSH_CONST	1
		9	RETURN_VAL
	10	MAKE_LABEL	"L3"
		11	LOCAL_GET	0	0	; foo:x
		12	SAVE_RETURN	"K1"	21
		13	SAVE_RETURN	"K2"	18
		14	LOCAL_GET	0	0	; foo:x
		15	PUSH_CONST	1
		16	GLOBAL_GET	core:-
		17	JMP_CLOSURE	2
	18	MAKE_LABEL	"K2"
		19	GLOBAL_GET	foo:fact
		20	JMP_CLOSURE	1
	21	MAKE_LABEL	"K1"
		22	GLOBAL_GET	core:*
		23	JMP_CLOSURE	2
	2	GLOBAL_SET	foo:fact
	3	STACK_POP
	4	PUSH_CONST	5
	5	GLOBAL_GET	foo:fact
	6	JMP_CLOSURE	1

Running...
Executing:  lambda: ((begin (set! foo:fact (lambda (foo:x) (if (core:<= foo:x 1) 1 (core:* foo:x (foo:fact (core:- foo:x 1)))))) (foo:fact 5)))
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; ((if (core:<= foo:x 1) 1 (core:* foo:x (foo:fact (core:- foo:x 1)))))
		0	MAKE_ENV	1
		1	SAVE_RETURN	"K0"	6
		2	LOCAL_GET	0	0	; foo:x
		3	PUSH_CONST	1
		4	GLOBAL_GET	core:<=
		5	JMP_CLOSURE	2
	6	MAKE_LABEL	"K0"
		7	JMP_IF_FALSE	"L3"	10
		8	PUSH_CONST	1
		9	RETURN_VAL
	10	MAKE_LABEL	"L3"
		11	LOCAL_GET	0	0	; foo:x
		12	SAVE_RETURN	"K1"	21
		13	SAVE_RETURN	"K2"	18
		14	LOCAL_GET	0	0	; foo:x
		15	PUSH_CONST	1
		16	GLOBAL_GET	core:-
		17	JMP_CLOSURE	2
	18	MAKE_LABEL	"K2"
		19	GLOBAL_GET	foo:fact
		20	JMP_CLOSURE	1
	21	MAKE_LABEL	"K1"
		22	GLOBAL_GET	core:*
		23	JMP_CLOSURE	2
	2	GLOBAL_SET	foo:fact
	3	STACK_POP
	4	PUSH_CONST	5
	5	GLOBAL_GET	foo:fact
	6	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (core:<= foo:x 1) 1 (core:* foo:x (foo:fact (core:- foo:x 1)))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	foo:fact
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   5 : GLOBAL_GET	foo:fact
                                      2: [ 5 [Closure] ]
[ 2]   6 : JMP_CLOSURE	1
                                      1: [ 5 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0:6] ]
[ 1]   2 : LOCAL_GET	0	0	; foo:x
                                      2: [ [K0:6] 5 ]
[ 2]   3 : PUSH_CONST	1
                                      3: [ [K0:6] 5 1 ]
[ 3]   4 : GLOBAL_GET	core:<=
                                      4: [ [K0:6] 5 1 [Closure] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0:6] 5 1 ]
[ 3]   0 : CALL_PRIMOP	"<="
                                      2: [ [K0:6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : MAKE_LABEL	"L3"
                                      0: [  ]
[ 0]  11 : LOCAL_GET	0	0	; foo:x
                                      1: [ 5 ]
[ 1]  12 : SAVE_RETURN	"K1"	21
                                      2: [ 5 [K1:21] ]
[ 2]  13 : SAVE_RETURN	"K2"	18
                                      3: [ 5 [K1:21] [K2:18] ]
[ 3]  14 : LOCAL_GET	0	0	; foo:x
                                      4: [ 5 [K1:21] [K2:18] 5 ]
[ 4]  15 : PUSH_CONST	1
                                      5: [ 5 [K1:21] [K2:18] 5 1 ]
[ 5]  16 : GLOBAL_GET	core:-
                                      6: [ 5 [K1:21] [K2:18] 5 1 [Closure] ]
[ 6]  17 : JMP_CLOSURE	2
                                      5: [ 5 [K1:21] [K2:18] 5 1 ]
[ 5]   0 : CALL_PRIMOP	"-"
                                      4: [ 5 [K1:21] [K2:18] 4 ]
[ 4]   1 : RETURN_VAL
                                      3: [ 5 [K1:21] 4 ]
[ 3]  18 : MAKE_LABEL	"K2"
                                      3: [ 5 [K1:21] 4 ]
[ 3]  19 : GLOBAL_GET	foo:fact
                                      4: [ 5 [K1:21] 4 [Closure] ]
[ 4]  20 : JMP_CLOSURE	1
                                      3: [ 5 [K1:21] 4 ]
[ 3]   0 : MAKE_ENV	1
                                      2: [ 5 [K1:21] ]
[ 2]   1 : SAVE_RETURN	"K0"	6
                                      3: [ 5 [K1:21] [K0:6] ]
[ 3]   2 : LOCAL_GET	0	0	; foo:x
                                      4: [ 5 [K1:21] [K0:6] 4 ]
[ 4]   3 : PUSH_CONST	1
                                      5: [ 5 [K1:21] [K0:6] 4 1 ]
[ 5]   4 : GLOBAL_GET	core:<=
                                      6: [ 5 [K1:21] [K0:6] 4 1 [Closure] ]
[ 6]   5 : JMP_CLOSURE	2
                                      5: [ 5 [K1:21] [K0:6] 4 1 ]
[ 5]   0 : CALL_PRIMOP	"<="
                                      4: [ 5 [K1:21] [K0:6] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ 5 [K1:21] #f ]
[ 3]   6 : MAKE_LABEL	"K0"
                                      3: [ 5 [K1:21] #f ]
[ 3]   7 : JMP_IF_FALSE	"L3"	10
                                      2: [ 5 [K1:21] ]
[ 2]  10 : MAKE_LABEL	"L3"
                                      2: [ 5 [K1:21] ]
[ 2]  11 : LOCAL_GET	0	0	; foo:x
                                      3: [ 5 [K1:21] 4 ]
[ 3]  12 : SAVE_RETURN	"K1"	21
                                      4: [ 5 [K1:21] 4 [K1:21] ]
[ 4]  13 : SAVE_RETURN	"K2"	18
                                      5: [ 5 [K1:21] 4 [K1:21] [K2:18] ]
[ 5]  14 : LOCAL_GET	0	0	; foo:x
                                      6: [ 5 [K1:21] 4 [K1:21] [K2:18] 4 ]
[ 6]  15 : PUSH_CONST	1
                                      7: [ 5 [K1:21] 4 [K1:21] [K2:18] 4 1 ]
[ 7]  16 : GLOBAL_GET	core:-
                                      8: [ 5 [K1:21] 4 [K1:21] [K2:18] 4 1 [Closure] ]
[ 8]  17 : JMP_CLOSURE	2
                                      7: [ 5 [K1:21] 4 [K1:21] [K2:18] 4 1 ]
[ 7]   0 : CALL_PRIMOP	"-"
                                      6: [ 5 [K1:21] 4 [K1:21] [K2:18] 3 ]
[ 6]   1 : RETURN_VAL
                                      5: [ 5 [K1:21] 4 [K1:21] 3 ]
[ 5]  18 : MAKE_LABEL	"K2"
                                      5: [ 5 [K1:21] 4 [K1:21] 3 ]
[ 5]  19 : GLOBAL_GET	foo:fact
                                      6: [ 5 [K1:21] 4 [K1:21] 3 [Closure] ]
[ 6]  20 : JMP_CLOSURE	1
                                      5: [ 5 [K1:21] 4 [K1:21] 3 ]
[ 5]   0 : MAKE_ENV	1
                                      4: [ 5 [K1:21] 4 [K1:21] ]
[ 4]   1 : SAVE_RETURN	"K0"	6
                                      5: [ 5 [K1:21] 4 [K1:21] [K0:6] ]
[ 5]   2 : LOCAL_GET	0	0	; foo:x
                                      6: [ 5 [K1:21] 4 [K1:21] [K0:6] 3 ]
[ 6]   3 : PUSH_CONST	1
                                      7: [ 5 [K1:21] 4 [K1:21] [K0:6] 3 1 ]
[ 7]   4 : GLOBAL_GET	core:<=
                                      8: [ 5 [K1:21] 4 [K1:21] [K0:6] 3 1 [Closure] ]
[ 8]   5 : JMP_CLOSURE	2
                                      7: [ 5 [K1:21] 4 [K1:21] [K0:6] 3 1 ]
[ 7]   0 : CALL_PRIMOP	"<="
                                      6: [ 5 [K1:21] 4 [K1:21] [K0:6] #f ]
[ 6]   1 : RETURN_VAL
                                      5: [ 5 [K1:21] 4 [K1:21] #f ]
[ 5]   6 : MAKE_LABEL	"K0"
                                      5: [ 5 [K1:21] 4 [K1:21] #f ]
[ 5]   7 : JMP_IF_FALSE	"L3"	10
                                      4: [ 5 [K1:21] 4 [K1:21] ]
[ 4]  10 : MAKE_LABEL	"L3"
                                      4: [ 5 [K1:21] 4 [K1:21] ]
[ 4]  11 : LOCAL_GET	0	0	; foo:x
                                      5: [ 5 [K1:21] 4 [K1:21] 3 ]
[ 5]  12 : SAVE_RETURN	"K1"	21
                                      6: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] ]
[ 6]  13 : SAVE_RETURN	"K2"	18
                                      7: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] [K2:18] ]
[ 7]  14 : LOCAL_GET	0	0	; foo:x
                                      8: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] [K2:18] 3 ]
[ 8]  15 : PUSH_CONST	1
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] [K2:18] 3 1 ]
[ 9]  16 : GLOBAL_GET	core:-
                                     10: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] [K2:18] 3 1 [Closure] ]
[10]  17 : JMP_CLOSURE	2
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] [K2:18] 3 1 ]
[ 9]   0 : CALL_PRIMOP	"-"
                                      8: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] [K2:18] 2 ]
[ 8]   1 : RETURN_VAL
                                      7: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 ]
[ 7]  18 : MAKE_LABEL	"K2"
                                      7: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 ]
[ 7]  19 : GLOBAL_GET	foo:fact
                                      8: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [Closure] ]
[ 8]  20 : JMP_CLOSURE	1
                                      7: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 ]
[ 7]   0 : MAKE_ENV	1
                                      6: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] ]
[ 6]   1 : SAVE_RETURN	"K0"	6
                                      7: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] [K0:6] ]
[ 7]   2 : LOCAL_GET	0	0	; foo:x
                                      8: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] [K0:6] 2 ]
[ 8]   3 : PUSH_CONST	1
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] [K0:6] 2 1 ]
[ 9]   4 : GLOBAL_GET	core:<=
                                     10: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] [K0:6] 2 1 [Closure] ]
[10]   5 : JMP_CLOSURE	2
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] [K0:6] 2 1 ]
[ 9]   0 : CALL_PRIMOP	"<="
                                      8: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] [K0:6] #f ]
[ 8]   1 : RETURN_VAL
                                      7: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] #f ]
[ 7]   6 : MAKE_LABEL	"K0"
                                      7: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] #f ]
[ 7]   7 : JMP_IF_FALSE	"L3"	10
                                      6: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] ]
[ 6]  10 : MAKE_LABEL	"L3"
                                      6: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] ]
[ 6]  11 : LOCAL_GET	0	0	; foo:x
                                      7: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 ]
[ 7]  12 : SAVE_RETURN	"K1"	21
                                      8: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] ]
[ 8]  13 : SAVE_RETURN	"K2"	18
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] [K2:18] ]
[ 9]  14 : LOCAL_GET	0	0	; foo:x
                                     10: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] [K2:18] 2 ]
[10]  15 : PUSH_CONST	1
                                     11: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] [K2:18] 2 1 ]
[11]  16 : GLOBAL_GET	core:-
                                     12: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] [K2:18] 2 1 [Closure] ]
[12]  17 : JMP_CLOSURE	2
                                     11: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] [K2:18] 2 1 ]
[11]   0 : CALL_PRIMOP	"-"
                                     10: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] [K2:18] 1 ]
[10]   1 : RETURN_VAL
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] 1 ]
[ 9]  18 : MAKE_LABEL	"K2"
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] 1 ]
[ 9]  19 : GLOBAL_GET	foo:fact
                                     10: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] 1 [Closure] ]
[10]  20 : JMP_CLOSURE	1
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] 1 ]
[ 9]   0 : MAKE_ENV	1
                                      8: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] ]
[ 8]   1 : SAVE_RETURN	"K0"	6
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] [K0:6] ]
[ 9]   2 : LOCAL_GET	0	0	; foo:x
                                     10: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] [K0:6] 1 ]
[10]   3 : PUSH_CONST	1
                                     11: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] [K0:6] 1 1 ]
[11]   4 : GLOBAL_GET	core:<=
                                     12: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] [K0:6] 1 1 [Closure] ]
[12]   5 : JMP_CLOSURE	2
                                     11: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] [K0:6] 1 1 ]
[11]   0 : CALL_PRIMOP	"<="
                                     10: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] [K0:6] #t ]
[10]   1 : RETURN_VAL
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] #t ]
[ 9]   6 : MAKE_LABEL	"K0"
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] #t ]
[ 9]   7 : JMP_IF_FALSE	"L3"	10
                                      8: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] ]
[ 8]   8 : PUSH_CONST	1
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 [K1:21] 1 ]
[ 9]   9 : RETURN_VAL
                                      8: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 1 ]
[ 8]  21 : MAKE_LABEL	"K1"
                                      8: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 1 ]
[ 8]  22 : GLOBAL_GET	core:*
                                      9: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 1 [Closure] ]
[ 9]  23 : JMP_CLOSURE	2
                                      8: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 1 ]
[ 8]   0 : CALL_PRIMOP	"*"
                                      7: [ 5 [K1:21] 4 [K1:21] 3 [K1:21] 2 ]
[ 7]   1 : RETURN_VAL
                                      6: [ 5 [K1:21] 4 [K1:21] 3 2 ]
[ 6]  21 : MAKE_LABEL	"K1"
                                      6: [ 5 [K1:21] 4 [K1:21] 3 2 ]
[ 6]  22 : GLOBAL_GET	core:*
                                      7: [ 5 [K1:21] 4 [K1:21] 3 2 [Closure] ]
[ 7]  23 : JMP_CLOSURE	2
                                      6: [ 5 [K1:21] 4 [K1:21] 3 2 ]
[ 6]   0 : CALL_PRIMOP	"*"
                                      5: [ 5 [K1:21] 4 [K1:21] 6 ]
[ 5]   1 : RETURN_VAL
                                      4: [ 5 [K1:21] 4 6 ]
[ 4]  21 : MAKE_LABEL	"K1"
                                      4: [ 5 [K1:21] 4 6 ]
[ 4]  22 : GLOBAL_GET	core:*
                                      5: [ 5 [K1:21] 4 6 [Closure] ]
[ 5]  23 : JMP_CLOSURE	2
                                      4: [ 5 [K1:21] 4 6 ]
[ 4]   0 : CALL_PRIMOP	"*"
                                      3: [ 5 [K1:21] 24 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 5 24 ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ 5 24 ]
[ 2]  22 : GLOBAL_GET	core:*
                                      3: [ 5 24 [Closure] ]
[ 3]  23 : JMP_CLOSURE	2
                                      2: [ 5 24 ]
[ 2]   0 : CALL_PRIMOP	"*"
                                      1: [ 120 ]
[ 1]   1 : RETURN_VAL
test: got "120"  - expected "120"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! add +) (add 3 (add 2 1)))
==>  (begin (set! foo:add core:+) (foo:add 3 (foo:add 2 1)))
Parsed:  (begin (set! foo:add core:+) (foo:add 3 (foo:add 2 1)))
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:+
	2	GLOBAL_SET	foo:add
	3	STACK_POP
	4	PUSH_CONST	3
	5	SAVE_RETURN	"K0"	10
	6	PUSH_CONST	2
	7	PUSH_CONST	1
	8	GLOBAL_GET	foo:add
	9	JMP_CLOSURE	2
10	MAKE_LABEL	"K0"
	11	GLOBAL_GET	foo:add
	12	JMP_CLOSURE	2

Running...
Executing:  lambda: ((begin (set! foo:add core:+) (foo:add 3 (foo:add 2 1))))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:+
	2	GLOBAL_SET	foo:add
	3	STACK_POP
	4	PUSH_CONST	3
	5	SAVE_RETURN	"K0"	10
	6	PUSH_CONST	2
	7	PUSH_CONST	1
	8	GLOBAL_GET	foo:add
	9	JMP_CLOSURE	2
10	MAKE_LABEL	"K0"
	11	GLOBAL_GET	foo:add
	12	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:+
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	foo:add
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	3
                                      1: [ 3 ]
[ 1]   5 : SAVE_RETURN	"K0"	10
                                      2: [ 3 [K0:10] ]
[ 2]   6 : PUSH_CONST	2
                                      3: [ 3 [K0:10] 2 ]
[ 3]   7 : PUSH_CONST	1
                                      4: [ 3 [K0:10] 2 1 ]
[ 4]   8 : GLOBAL_GET	foo:add
                                      5: [ 3 [K0:10] 2 1 [Closure] ]
[ 5]   9 : JMP_CLOSURE	2
                                      4: [ 3 [K0:10] 2 1 ]
[ 4]   0 : CALL_PRIMOP	"+"
                                      3: [ 3 [K0:10] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 3 3 ]
[ 2]  10 : MAKE_LABEL	"K0"
                                      2: [ 3 3 ]
[ 2]  11 : GLOBAL_GET	foo:add
                                      3: [ 3 3 [Closure] ]
[ 3]  12 : JMP_CLOSURE	2
                                      2: [ 3 3 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 6 ]
[ 1]   1 : RETURN_VAL
test: got "6"  - expected "6"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! kar car) (set! car cdr) (set! result (car '(1 2 3))) (set! car kar) result)
==>  (begin (set! foo:kar core:car) (set! core:car core:cdr) (set! foo:result (core:car (quote (1 2 3)))) (set! core:car foo:kar) foo:result)
Parsed:  (begin (set! foo:kar core:car) (set! core:car core:cdr) (set! foo:result (core:car (quote (1 2 3)))) (set! core:car foo:kar) foo:result)
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:car
	2	GLOBAL_SET	foo:kar
	3	STACK_POP
	4	GLOBAL_GET	core:cdr
	5	GLOBAL_SET	core:car
	6	STACK_POP
	7	SAVE_RETURN	"K0"	11
	8	PUSH_CONST	(1 2 3)
	9	GLOBAL_GET	core:car
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K0"
	12	GLOBAL_SET	foo:result
	13	STACK_POP
	14	GLOBAL_GET	foo:kar
	15	GLOBAL_SET	core:car
	16	STACK_POP
	17	GLOBAL_GET	foo:result
	18	RETURN_VAL

Running...
Executing:  lambda: ((begin (set! foo:kar core:car) (set! core:car core:cdr) (set! foo:result (core:car (quote (1 2 3)))) (set! core:car foo:kar) foo:result))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:car
	2	GLOBAL_SET	foo:kar
	3	STACK_POP
	4	GLOBAL_GET	core:cdr
	5	GLOBAL_SET	core:car
	6	STACK_POP
	7	SAVE_RETURN	"K0"	11
	8	PUSH_CONST	(1 2 3)
	9	GLOBAL_GET	core:car
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K0"
	12	GLOBAL_SET	foo:result
	13	STACK_POP
	14	GLOBAL_GET	foo:kar
	15	GLOBAL_SET	core:car
	16	STACK_POP
	17	GLOBAL_GET	foo:result
	18	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:car
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	foo:kar
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : GLOBAL_GET	core:cdr
                                      1: [ [Closure] ]
[ 1]   5 : GLOBAL_SET	core:car
                                      1: [ [Closure] ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K0"	11
                                      1: [ [K0:11] ]
[ 1]   8 : PUSH_CONST	(1 2 3)
                                      2: [ [K0:11] (1 2 3) ]
[ 2]   9 : GLOBAL_GET	core:car
                                      3: [ [K0:11] (1 2 3) [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K0:11] (1 2 3) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [K0:11] (2 3) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (2 3) ]
[ 1]  11 : MAKE_LABEL	"K0"
                                      1: [ (2 3) ]
[ 1]  12 : GLOBAL_SET	foo:result
                                      1: [ (2 3) ]
[ 1]  13 : STACK_POP
                                      0: [  ]
[ 0]  14 : GLOBAL_GET	foo:kar
                                      1: [ [Closure] ]
[ 1]  15 : GLOBAL_SET	core:car
                                      1: [ [Closure] ]
[ 1]  16 : STACK_POP
                                      0: [  ]
[ 0]  17 : GLOBAL_GET	foo:result
                                      1: [ (2 3) ]
[ 1]  18 : RETURN_VAL
test: got "(2 3)"  - expected "(2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  ((lambda (x) (set! x 5) x) 6)
==>  ((lambda (foo:x) (set! foo:x 5) foo:x) 6)
Parsed:  ((lambda (foo:x) (set! foo:x 5) foo:x) 6)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	6
	2	MAKE_CLOSURE	[Closure]	; ((set! foo:x 5) foo:x)
		0	MAKE_ENV	1
		1	PUSH_CONST	5
		2	LOCAL_SET	0	0	; foo:x
		3	STACK_POP
		4	LOCAL_GET	0	0	; foo:x
		5	RETURN_VAL
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: (((lambda (foo:x) (set! foo:x 5) foo:x) 6))
	0	MAKE_ENV	0
	1	PUSH_CONST	6
	2	MAKE_CLOSURE	[Closure]	; ((set! foo:x 5) foo:x)
		0	MAKE_ENV	1
		1	PUSH_CONST	5
		2	LOCAL_SET	0	0	; foo:x
		3	STACK_POP
		4	LOCAL_GET	0	0	; foo:x
		5	RETURN_VAL
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	6
                                      1: [ 6 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((set! foo:x 5) foo:x)
                                      2: [ 6 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 6 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : LOCAL_SET	0	0	; foo:x
                                      1: [ 5 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	0	0	; foo:x
                                      1: [ 5 ]
[ 1]   5 : RETURN_VAL
test: got "5"  - expected "5"
SUCCESS
==>  (core:package-set "core")
Executing:  lambda: ((core:package-set "core"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"core"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"core"
                                      1: [ "core" ]
[ 1]   2 : GLOBAL_GET	core:package-set
                                      2: [ "core" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "core" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "core" ]
[ 1]   1 : RETURN_VAL
==>  (core:package-export (quote (core:let core:let* core:letrec core:define core:and core:or core:cond core:case core:first core:second core:third core:rest core:fold-left core:fold-right)))
Executing:  lambda: ((core:package-export (quote (core:let core:let* core:letrec core:define core:and core:or core:cond core:case core:first core:second core:third core:rest core:fold-left core:fold-right))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(core:let core:let* core:letrec core:define core:and core:or core:cond core:case core:first core:second core:third core:rest core:fold-left core:fold-right)
	2	GLOBAL_GET	core:package-export
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(core:let core:let* core:letrec core:define core:and core:or core:cond core:case core:first core:second core:third core:rest core:fold-left core:fold-right)
                                      1: [ (core:let core:let* core:letrec core:define core:and core:or core:cond core:case core:first core:second core:third core:rest core:fold-left core:fold-right) ]
[ 1]   2 : GLOBAL_GET	core:package-export
                                      2: [ (core:let core:let* core:letrec core:define core:and core:or core:cond core:case core:first core:second core:third core:rest core:fold-left core:fold-right) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (core:let core:let* core:letrec core:define core:and core:or core:cond core:case core:first core:second core:third core:rest core:fold-left core:fold-right) ]
[ 1]   0 : CALL_PRIMOP	"package-export"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
==>  (defmacro core:let (core:bindings . core:body) (append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
Executing:  lambda: ((defmacro core:let (core:bindings . core:body) (append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings))))
	0	MAKE_ENV	0
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
==>  (defmacro core:let* (core:bindings . core:body) (if (core:null? core:bindings) (append (list (quote begin)) core:body) (list (quote core:let) (list (core:car core:bindings)) (append (list (quote core:let*)) (list (core:cdr core:bindings)) core:body))))
Executing:  lambda: ((defmacro core:let* (core:bindings . core:body) (if (core:null? core:bindings) (append (list (quote begin)) core:body) (list (quote core:let) (list (core:car core:bindings)) (append (list (quote core:let*)) (list (core:cdr core:bindings)) core:body)))))
	0	MAKE_ENV	0
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
==>  (defmacro core:letrec (core:bindings . core:body) (append (list (quote core:let)) (list (core:map (lambda (core:v) (core:list (core:car core:v) core:nil)) core:bindings)) (core:map (lambda (core:v) (append (list (quote set!)) core:v)) core:bindings) core:body))
Executing:  lambda: ((defmacro core:letrec (core:bindings . core:body) (append (list (quote core:let)) (list (core:map (lambda (core:v) (core:list (core:car core:v) core:nil)) core:bindings)) (core:map (lambda (core:v) (append (list (quote set!)) core:v)) core:bindings) core:body)))
	0	MAKE_ENV	0
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
==>  (defmacro core:define (core:name . core:body) (if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
Executing:  lambda: ((defmacro core:define (core:name . core:body) (if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body)))))
	0	MAKE_ENV	0
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
==>  (defmacro core:and (core:first . core:rest) (if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if)) (list core:first) core:rest (list (quote #f))) (list (quote if) core:first (append (list (quote core:and)) core:rest) (quote #f)))))
Executing:  lambda: ((defmacro core:and (core:first . core:rest) (if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if)) (list core:first) core:rest (list (quote #f))) (list (quote if) core:first (append (list (quote core:and)) core:rest) (quote #f))))))
	0	MAKE_ENV	0
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
==>  (defmacro core:or (core:first . core:rest) (if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if*)) (list core:first) core:rest) (list (quote if*) core:first (append (list (quote core:or)) core:rest)))))
Executing:  lambda: ((defmacro core:or (core:first . core:rest) (if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if*)) (list core:first) core:rest) (list (quote if*) core:first (append (list (quote core:or)) core:rest))))))
	0	MAKE_ENV	0
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
==>  (defmacro core:cond (core:first . core:rest) (if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
Executing:  lambda: ((defmacro core:cond (core:first . core:rest) (if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest)))))
	0	MAKE_ENV	0
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
==>  (defmacro core:case (core:key . core:rest) (core:let* ((core:keyval (core:gensym "KEY"))) (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))
Executing:  lambda: ((if (core:null? core:bindings) (append (list (quote begin)) core:body) (list (quote core:let) (list (core:car core:bindings)) (append (list (quote core:let*)) (list (core:cdr core:bindings)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:bindings
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	LOCAL_GET	0	1	; core:body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	MAKE_LABEL	"L8"
	16	PUSH_CONST	core:let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; core:bindings
	20	GLOBAL_GET	core:car
	21	JMP_CLOSURE	1
22	MAKE_LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	core:let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	MAKE_LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; core:bindings
	35	GLOBAL_GET	core:cdr
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	MAKE_LABEL	"K6"
	41	LOCAL_GET	0	1	; core:body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	MAKE_LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((core:keyval (core:gensym "KEY"))) (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:bindings
                                      2: [ [K0:5] ((core:keyval (core:gensym "KEY"))) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] ((core:keyval (core:gensym "KEY"))) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] ((core:keyval (core:gensym "KEY"))) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : MAKE_LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	core:let
                                      1: [ core:let ]
[ 1]  17 : SAVE_RETURN	"K2"	25
                                      2: [ core:let [K2:25] ]
[ 2]  18 : SAVE_RETURN	"K3"	22
                                      3: [ core:let [K2:25] [K3:22] ]
[ 3]  19 : LOCAL_GET	0	0	; core:bindings
                                      4: [ core:let [K2:25] [K3:22] ((core:keyval (core:gensym "KEY"))) ]
[ 4]  20 : GLOBAL_GET	core:car
                                      5: [ core:let [K2:25] [K3:22] ((core:keyval (core:gensym "KEY"))) [Closure] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ core:let [K2:25] [K3:22] ((core:keyval (core:gensym "KEY"))) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ core:let [K2:25] [K3:22] (core:keyval (core:gensym "KEY")) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:let [K2:25] (core:keyval (core:gensym "KEY")) ]
[ 3]  22 : MAKE_LABEL	"K3"
                                      3: [ core:let [K2:25] (core:keyval (core:gensym "KEY")) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ core:let [K2:25] (core:keyval (core:gensym "KEY")) [Closure] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ core:let [K2:25] (core:keyval (core:gensym "KEY")) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ core:let [K2:25] ((core:keyval (core:gensym "KEY"))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ core:let ((core:keyval (core:gensym "KEY"))) ]
[ 2]  25 : MAKE_LABEL	"K2"
                                      2: [ core:let ((core:keyval (core:gensym "KEY"))) ]
[ 2]  26 : SAVE_RETURN	"K4"	44
                                      3: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] ]
[ 3]  27 : SAVE_RETURN	"K5"	31
                                      4: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] [K5:31] ]
[ 4]  28 : PUSH_CONST	core:let*
                                      5: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] [K5:31] core:let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] [K5:31] core:let* [Closure] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] [K5:31] core:let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] [K5:31] (core:let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) ]
[ 4]  31 : MAKE_LABEL	"K5"
                                      4: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) ]
[ 4]  32 : SAVE_RETURN	"K6"	40
                                      5: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) [K6:40] ]
[ 5]  33 : SAVE_RETURN	"K7"	37
                                      6: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) [K6:40] [K7:37] ]
[ 6]  34 : LOCAL_GET	0	0	; core:bindings
                                      7: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) [K6:40] [K7:37] ((core:keyval (core:gensym "KEY"))) ]
[ 7]  35 : GLOBAL_GET	core:cdr
                                      8: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) [K6:40] [K7:37] ((core:keyval (core:gensym "KEY"))) [Closure] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) [K6:40] [K7:37] ((core:keyval (core:gensym "KEY"))) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) [K6:40] [K7:37] () ]
[ 7]   1 : RETURN_VAL
                                      6: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) [K6:40] () ]
[ 6]  37 : MAKE_LABEL	"K7"
                                      6: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) [K6:40] () ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) [K6:40] () [Closure] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) [K6:40] () ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) [K6:40] (()) ]
[ 6]   1 : RETURN_VAL
                                      5: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) (()) ]
[ 5]  40 : MAKE_LABEL	"K6"
                                      5: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) (()) ]
[ 5]  41 : LOCAL_GET	0	1	; core:body
                                      6: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) (()) ((list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) (()) ((list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) [Closure] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let*) (()) ((list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ core:let ((core:keyval (core:gensym "KEY"))) [K4:44] (core:let* () (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:let ((core:keyval (core:gensym "KEY"))) (core:let* () (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) ]
[ 3]  44 : MAKE_LABEL	"K4"
                                      3: [ core:let ((core:keyval (core:gensym "KEY"))) (core:let* () (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ core:let ((core:keyval (core:gensym "KEY"))) (core:let* () (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) [Closure] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ core:let ((core:keyval (core:gensym "KEY"))) (core:let* () (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:let ((core:keyval (core:gensym "KEY"))) (core:let* () (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))))) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:bindings) (append (list (quote begin)) core:body) (list (quote core:let) (list (core:car core:bindings)) (append (list (quote core:let*)) (list (core:cdr core:bindings)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:bindings
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	LOCAL_GET	0	1	; core:body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	MAKE_LABEL	"L8"
	16	PUSH_CONST	core:let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; core:bindings
	20	GLOBAL_GET	core:car
	21	JMP_CLOSURE	1
22	MAKE_LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	core:let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	MAKE_LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; core:bindings
	35	GLOBAL_GET	core:cdr
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	MAKE_LABEL	"K6"
	41	LOCAL_GET	0	1	; core:body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	MAKE_LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ () (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:bindings
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1:11] ]
[ 1]   8 : PUSH_CONST	begin
                                      2: [ [K1:11] begin ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [K1:11] begin [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1:11] begin ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K1:11] (begin) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (begin) ]
[ 1]  11 : MAKE_LABEL	"K1"
                                      1: [ (begin) ]
[ 1]  12 : LOCAL_GET	0	1	; core:body
                                      2: [ (begin) ((list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) ]
[ 2]  13 : GLOBAL_GET	append
                                      3: [ (begin) ((list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) [Closure] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ (begin) ((list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; core:bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; core:body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; core:bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((core:keyval (core:gensym "KEY"))) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; core:bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((core:keyval (core:gensym "KEY"))) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((core:keyval (core:gensym "KEY"))) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((core:keyval (core:gensym "KEY"))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (core:keyval (core:gensym "KEY")) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ core:keyval ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (core:keyval) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (core:keyval) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (core:keyval) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (core:keyval) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (core:keyval) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((core:keyval)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((core:keyval)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((core:keyval)) ]
[ 4]  18 : LOCAL_GET	0	1	; core:body
                                      5: [ [K0:24] [K1:21] (lambda) ((core:keyval)) ((begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((core:keyval)) ((begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))))) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((core:keyval)) ((begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))))) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))))) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; core:bindings
                                      4: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) [K5:30] [Closure] ((core:keyval (core:gensym "KEY"))) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) [K5:30] [Closure] ((core:keyval (core:gensym "KEY"))) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) [K5:30] [Closure] ((core:keyval (core:gensym "KEY"))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (core:keyval (core:gensym "KEY")) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (core:gensym "KEY") ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) [K5:30] ((core:gensym "KEY")) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) ((core:gensym "KEY")) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) ((core:gensym "KEY")) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) ((core:gensym "KEY")) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))) ((core:gensym "KEY")) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (core:keyval) (begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))))) (core:gensym "KEY")) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((defmacro core:case (core:key . core:rest) (core:let* ((core:keyval (core:gensym "KEY"))) (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest))))))
	0	MAKE_ENV	0
	1	PUSH_CONST	()
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : RETURN_VAL
==>  (core:define core:first core:car)
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ core:first core:car ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] core:first ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] core:first [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] core:first ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] core:first ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] core:first [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] core:first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (core:first) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (core:first) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (core:first) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (core:first) (core:car) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (core:first) (core:car) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (core:first) (core:car) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! core:first core:car) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! core:first core:car) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! core:first core:car) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! core:first core:car) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! core:first core:car) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! core:first core:car) [K4:28] quote core:first ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! core:first core:car) [K4:28] quote core:first [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! core:first core:car) [K4:28] quote core:first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! core:first core:car) [K4:28] (quote core:first) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! core:first core:car) (quote core:first) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! core:first core:car) (quote core:first) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! core:first core:car) (quote core:first) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! core:first core:car) (quote core:first) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! core:first core:car) (quote core:first)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((core:define core:first core:car))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:car
	2	GLOBAL_SET	core:first
	3	STACK_POP
	4	PUSH_CONST	core:first
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:car
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	core:first
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	core:first
                                      1: [ core:first ]
[ 1]   5 : RETURN_VAL
==>  (core:define core:second core:cadr)
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ core:second core:cadr ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] core:second ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] core:second [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] core:second ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] core:second ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] core:second [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] core:second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (core:second) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (core:second) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (core:second) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (core:second) (core:cadr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (core:second) (core:cadr) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (core:second) (core:cadr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! core:second core:cadr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! core:second core:cadr) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! core:second core:cadr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! core:second core:cadr) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! core:second core:cadr) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! core:second core:cadr) [K4:28] quote core:second ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! core:second core:cadr) [K4:28] quote core:second [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! core:second core:cadr) [K4:28] quote core:second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! core:second core:cadr) [K4:28] (quote core:second) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! core:second core:cadr) (quote core:second) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! core:second core:cadr) (quote core:second) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! core:second core:cadr) (quote core:second) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! core:second core:cadr) (quote core:second) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! core:second core:cadr) (quote core:second)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((core:define core:second core:cadr))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:cadr
	2	GLOBAL_SET	core:second
	3	STACK_POP
	4	PUSH_CONST	core:second
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:cadr
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	core:second
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	core:second
                                      1: [ core:second ]
[ 1]   5 : RETURN_VAL
==>  (core:define core:third core:caddr)
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ core:third core:caddr ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] core:third ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] core:third [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] core:third ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] core:third ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] core:third [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] core:third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (core:third) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (core:third) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (core:third) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (core:third) (core:caddr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (core:third) (core:caddr) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (core:third) (core:caddr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! core:third core:caddr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! core:third core:caddr) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! core:third core:caddr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! core:third core:caddr) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! core:third core:caddr) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! core:third core:caddr) [K4:28] quote core:third ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! core:third core:caddr) [K4:28] quote core:third [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! core:third core:caddr) [K4:28] quote core:third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! core:third core:caddr) [K4:28] (quote core:third) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! core:third core:caddr) (quote core:third) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! core:third core:caddr) (quote core:third) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! core:third core:caddr) (quote core:third) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! core:third core:caddr) (quote core:third) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! core:third core:caddr) (quote core:third)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((core:define core:third core:caddr))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:caddr
	2	GLOBAL_SET	core:third
	3	STACK_POP
	4	PUSH_CONST	core:third
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:caddr
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	core:third
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	core:third
                                      1: [ core:third ]
[ 1]   5 : RETURN_VAL
==>  (core:define core:rest core:cdr)
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ core:rest core:cdr ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] core:rest ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] core:rest [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] core:rest ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] core:rest ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] core:rest [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] core:rest ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (core:rest) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (core:rest) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (core:rest) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (core:rest) (core:cdr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (core:rest) (core:cdr) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (core:rest) (core:cdr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! core:rest core:cdr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! core:rest core:cdr) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! core:rest core:cdr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! core:rest core:cdr) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! core:rest core:cdr) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! core:rest core:cdr) [K4:28] quote core:rest ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! core:rest core:cdr) [K4:28] quote core:rest [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! core:rest core:cdr) [K4:28] quote core:rest ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! core:rest core:cdr) [K4:28] (quote core:rest) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! core:rest core:cdr) (quote core:rest) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! core:rest core:cdr) (quote core:rest) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! core:rest core:cdr) (quote core:rest) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! core:rest core:cdr) (quote core:rest) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! core:rest core:cdr) (quote core:rest)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((core:define core:rest core:cdr))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:cdr
	2	GLOBAL_SET	core:rest
	3	STACK_POP
	4	PUSH_CONST	core:rest
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:cdr
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	core:rest
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	core:rest
                                      1: [ core:rest ]
[ 1]   5 : RETURN_VAL
==>  (core:define core:after-first core:cdr)
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ core:after-first core:cdr ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] core:after-first ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] core:after-first [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] core:after-first ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] core:after-first ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] core:after-first [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] core:after-first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (core:after-first) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (core:after-first) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (core:after-first) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (core:after-first) (core:cdr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (core:after-first) (core:cdr) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (core:after-first) (core:cdr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! core:after-first core:cdr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! core:after-first core:cdr) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! core:after-first core:cdr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! core:after-first core:cdr) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! core:after-first core:cdr) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! core:after-first core:cdr) [K4:28] quote core:after-first ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! core:after-first core:cdr) [K4:28] quote core:after-first [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! core:after-first core:cdr) [K4:28] quote core:after-first ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! core:after-first core:cdr) [K4:28] (quote core:after-first) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! core:after-first core:cdr) (quote core:after-first) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! core:after-first core:cdr) (quote core:after-first) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! core:after-first core:cdr) (quote core:after-first) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! core:after-first core:cdr) (quote core:after-first) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! core:after-first core:cdr) (quote core:after-first)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((core:define core:after-first core:cdr))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:cdr
	2	GLOBAL_SET	core:after-first
	3	STACK_POP
	4	PUSH_CONST	core:after-first
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:cdr
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	core:after-first
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	core:after-first
                                      1: [ core:after-first ]
[ 1]   5 : RETURN_VAL
==>  (core:define core:after-second core:cddr)
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ core:after-second core:cddr ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] core:after-second ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] core:after-second [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] core:after-second ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] core:after-second ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] core:after-second [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] core:after-second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (core:after-second) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (core:after-second) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (core:after-second) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (core:after-second) (core:cddr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (core:after-second) (core:cddr) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (core:after-second) (core:cddr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! core:after-second core:cddr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! core:after-second core:cddr) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! core:after-second core:cddr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! core:after-second core:cddr) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! core:after-second core:cddr) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! core:after-second core:cddr) [K4:28] quote core:after-second ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! core:after-second core:cddr) [K4:28] quote core:after-second [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! core:after-second core:cddr) [K4:28] quote core:after-second ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! core:after-second core:cddr) [K4:28] (quote core:after-second) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! core:after-second core:cddr) (quote core:after-second) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! core:after-second core:cddr) (quote core:after-second) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! core:after-second core:cddr) (quote core:after-second) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! core:after-second core:cddr) (quote core:after-second) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! core:after-second core:cddr) (quote core:after-second)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((core:define core:after-second core:cddr))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:cddr
	2	GLOBAL_SET	core:after-second
	3	STACK_POP
	4	PUSH_CONST	core:after-second
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:cddr
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	core:after-second
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	core:after-second
                                      1: [ core:after-second ]
[ 1]   5 : RETURN_VAL
==>  (core:define core:after-third core:cdddr)
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ core:after-third core:cdddr ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] core:after-third ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] core:after-third [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] core:after-third ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] core:after-third ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] core:after-third [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] core:after-third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (core:after-third) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (core:after-third) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (core:after-third) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (core:after-third) (core:cdddr) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (core:after-third) (core:cdddr) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (core:after-third) (core:cdddr) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! core:after-third core:cdddr) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! core:after-third core:cdddr) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! core:after-third core:cdddr) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! core:after-third core:cdddr) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! core:after-third core:cdddr) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! core:after-third core:cdddr) [K4:28] quote core:after-third ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! core:after-third core:cdddr) [K4:28] quote core:after-third [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! core:after-third core:cdddr) [K4:28] quote core:after-third ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! core:after-third core:cdddr) [K4:28] (quote core:after-third) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! core:after-third core:cdddr) (quote core:after-third) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! core:after-third core:cdddr) (quote core:after-third) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! core:after-third core:cdddr) (quote core:after-third) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! core:after-third core:cdddr) (quote core:after-third) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! core:after-third core:cdddr) (quote core:after-third)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((core:define core:after-third core:cdddr))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:cdddr
	2	GLOBAL_SET	core:after-third
	3	STACK_POP
	4	PUSH_CONST	core:after-third
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:cdddr
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	core:after-third
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	core:after-third
                                      1: [ core:after-third ]
[ 1]   5 : RETURN_VAL
==>  (core:define (core:fold-left core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (core:fold-left core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] (core:fold-left core:fn core:base core:lst) ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] (core:fold-left core:fn core:base core:lst) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (core:fold-left core:fn core:base core:lst) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	core:define
                                      1: [ core:define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ core:define [K5:37] ]
[ 2]  34 : LOCAL_GET	0	0	; core:name
                                      3: [ core:define [K5:37] (core:fold-left core:fn core:base core:lst) ]
[ 3]  35 : GLOBAL_GET	core:car
                                      4: [ core:define [K5:37] (core:fold-left core:fn core:base core:lst) [Closure] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ core:define [K5:37] (core:fold-left core:fn core:base core:lst) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ core:define [K5:37] core:fold-left ]
[ 3]   1 : RETURN_VAL
                                      2: [ core:define core:fold-left ]
[ 2]  37 : MAKE_LABEL	"K5"
                                      2: [ core:define core:fold-left ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ core:define core:fold-left [K6:56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ core:define core:fold-left [K6:56] [K7:43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ core:define core:fold-left [K6:56] [K7:43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ core:define core:fold-left [K6:56] [K7:43] lambda [Closure] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ core:define core:fold-left [K6:56] [K7:43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ core:define core:fold-left [K6:56] [K7:43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ core:define core:fold-left [K6:56] (lambda) ]
[ 4]  43 : MAKE_LABEL	"K7"
                                      4: [ core:define core:fold-left [K6:56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ core:define core:fold-left [K6:56] (lambda) [K8:52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ core:define core:fold-left [K6:56] (lambda) [K8:52] [K9:49] ]
[ 6]  46 : LOCAL_GET	0	0	; core:name
                                      7: [ core:define core:fold-left [K6:56] (lambda) [K8:52] [K9:49] (core:fold-left core:fn core:base core:lst) ]
[ 7]  47 : GLOBAL_GET	core:cdr
                                      8: [ core:define core:fold-left [K6:56] (lambda) [K8:52] [K9:49] (core:fold-left core:fn core:base core:lst) [Closure] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ core:define core:fold-left [K6:56] (lambda) [K8:52] [K9:49] (core:fold-left core:fn core:base core:lst) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ core:define core:fold-left [K6:56] (lambda) [K8:52] [K9:49] (core:fn core:base core:lst) ]
[ 7]   1 : RETURN_VAL
                                      6: [ core:define core:fold-left [K6:56] (lambda) [K8:52] (core:fn core:base core:lst) ]
[ 6]  49 : MAKE_LABEL	"K9"
                                      6: [ core:define core:fold-left [K6:56] (lambda) [K8:52] (core:fn core:base core:lst) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ core:define core:fold-left [K6:56] (lambda) [K8:52] (core:fn core:base core:lst) [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ core:define core:fold-left [K6:56] (lambda) [K8:52] (core:fn core:base core:lst) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ core:define core:fold-left [K6:56] (lambda) [K8:52] ((core:fn core:base core:lst)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ core:define core:fold-left [K6:56] (lambda) ((core:fn core:base core:lst)) ]
[ 5]  52 : MAKE_LABEL	"K8"
                                      5: [ core:define core:fold-left [K6:56] (lambda) ((core:fn core:base core:lst)) ]
[ 5]  53 : LOCAL_GET	0	1	; core:body
                                      6: [ core:define core:fold-left [K6:56] (lambda) ((core:fn core:base core:lst)) ((if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst)))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ core:define core:fold-left [K6:56] (lambda) ((core:fn core:base core:lst)) ((if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst)))) [Closure] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ core:define core:fold-left [K6:56] (lambda) ((core:fn core:base core:lst)) ((if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst)))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ core:define core:fold-left [K6:56] (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst)))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:define core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst)))) ]
[ 3]  56 : MAKE_LABEL	"K6"
                                      3: [ core:define core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst)))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ core:define core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst)))) [Closure] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ core:define core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst)))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:define core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst)))) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] core:fold-left ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] core:fold-left [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] core:fold-left ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] core:fold-left ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] core:fold-left [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] core:fold-left ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (core:fold-left) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (core:fold-left) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (core:fold-left) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (core:fold-left) ((lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (core:fold-left) ((lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (core:fold-left) ((lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) [K4:28] quote core:fold-left ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) [K4:28] quote core:fold-left [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) [K4:28] quote core:fold-left ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) [K4:28] (quote core:fold-left) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) (quote core:fold-left) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) (quote core:fold-left) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) (quote core:fold-left) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) (quote core:fold-left) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! core:fold-left (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))) (quote core:fold-left)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((core:define (core:fold-left core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst)))))
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; ((if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))
		0	MAKE_ENV	3
		1	SAVE_RETURN	"K0"	10
		2	SAVE_RETURN	"K1"	6
		3	LOCAL_GET	0	2	; core:lst
		4	GLOBAL_GET	core:length
		5	JMP_CLOSURE	1
	6	MAKE_LABEL	"K1"
		7	PUSH_CONST	0
		8	GLOBAL_GET	core:=
		9	JMP_CLOSURE	2
	10	MAKE_LABEL	"K0"
		11	JMP_IF_FALSE	"L5"	14
		12	LOCAL_GET	0	1	; core:base
		13	RETURN_VAL
	14	MAKE_LABEL	"L5"
		15	LOCAL_GET	0	0	; core:fn
		16	SAVE_RETURN	"K2"	25
		17	LOCAL_GET	0	1	; core:base
		18	SAVE_RETURN	"K3"	22
		19	LOCAL_GET	0	2	; core:lst
		20	GLOBAL_GET	core:car
		21	JMP_CLOSURE	1
	22	MAKE_LABEL	"K3"
		23	LOCAL_GET	0	0	; core:fn
		24	JMP_CLOSURE	2
	25	MAKE_LABEL	"K2"
		26	SAVE_RETURN	"K4"	30
		27	LOCAL_GET	0	2	; core:lst
		28	GLOBAL_GET	core:cdr
		29	JMP_CLOSURE	1
	30	MAKE_LABEL	"K4"
		31	GLOBAL_GET	core:fold-left
		32	JMP_CLOSURE	3
	2	GLOBAL_SET	core:fold-left
	3	STACK_POP
	4	PUSH_CONST	core:fold-left
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (core:= (core:length core:lst) 0) core:base (core:fold-left core:fn (core:fn core:base (core:car core:lst)) (core:cdr core:lst))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	core:fold-left
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	core:fold-left
                                      1: [ core:fold-left ]
[ 1]   5 : RETURN_VAL
==>  (core:define (core:fold-right core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (core:fold-right core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] (core:fold-right core:fn core:base core:lst) ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] (core:fold-right core:fn core:base core:lst) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (core:fold-right core:fn core:base core:lst) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	core:define
                                      1: [ core:define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ core:define [K5:37] ]
[ 2]  34 : LOCAL_GET	0	0	; core:name
                                      3: [ core:define [K5:37] (core:fold-right core:fn core:base core:lst) ]
[ 3]  35 : GLOBAL_GET	core:car
                                      4: [ core:define [K5:37] (core:fold-right core:fn core:base core:lst) [Closure] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ core:define [K5:37] (core:fold-right core:fn core:base core:lst) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ core:define [K5:37] core:fold-right ]
[ 3]   1 : RETURN_VAL
                                      2: [ core:define core:fold-right ]
[ 2]  37 : MAKE_LABEL	"K5"
                                      2: [ core:define core:fold-right ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ core:define core:fold-right [K6:56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ core:define core:fold-right [K6:56] [K7:43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ core:define core:fold-right [K6:56] [K7:43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ core:define core:fold-right [K6:56] [K7:43] lambda [Closure] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ core:define core:fold-right [K6:56] [K7:43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ core:define core:fold-right [K6:56] [K7:43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ core:define core:fold-right [K6:56] (lambda) ]
[ 4]  43 : MAKE_LABEL	"K7"
                                      4: [ core:define core:fold-right [K6:56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ core:define core:fold-right [K6:56] (lambda) [K8:52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ core:define core:fold-right [K6:56] (lambda) [K8:52] [K9:49] ]
[ 6]  46 : LOCAL_GET	0	0	; core:name
                                      7: [ core:define core:fold-right [K6:56] (lambda) [K8:52] [K9:49] (core:fold-right core:fn core:base core:lst) ]
[ 7]  47 : GLOBAL_GET	core:cdr
                                      8: [ core:define core:fold-right [K6:56] (lambda) [K8:52] [K9:49] (core:fold-right core:fn core:base core:lst) [Closure] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ core:define core:fold-right [K6:56] (lambda) [K8:52] [K9:49] (core:fold-right core:fn core:base core:lst) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ core:define core:fold-right [K6:56] (lambda) [K8:52] [K9:49] (core:fn core:base core:lst) ]
[ 7]   1 : RETURN_VAL
                                      6: [ core:define core:fold-right [K6:56] (lambda) [K8:52] (core:fn core:base core:lst) ]
[ 6]  49 : MAKE_LABEL	"K9"
                                      6: [ core:define core:fold-right [K6:56] (lambda) [K8:52] (core:fn core:base core:lst) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ core:define core:fold-right [K6:56] (lambda) [K8:52] (core:fn core:base core:lst) [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ core:define core:fold-right [K6:56] (lambda) [K8:52] (core:fn core:base core:lst) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ core:define core:fold-right [K6:56] (lambda) [K8:52] ((core:fn core:base core:lst)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ core:define core:fold-right [K6:56] (lambda) ((core:fn core:base core:lst)) ]
[ 5]  52 : MAKE_LABEL	"K8"
                                      5: [ core:define core:fold-right [K6:56] (lambda) ((core:fn core:base core:lst)) ]
[ 5]  53 : LOCAL_GET	0	1	; core:body
                                      6: [ core:define core:fold-right [K6:56] (lambda) ((core:fn core:base core:lst)) ((if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst))))) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ core:define core:fold-right [K6:56] (lambda) ((core:fn core:base core:lst)) ((if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst))))) [Closure] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ core:define core:fold-right [K6:56] (lambda) ((core:fn core:base core:lst)) ((if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst))))) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ core:define core:fold-right [K6:56] (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst))))) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:define core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst))))) ]
[ 3]  56 : MAKE_LABEL	"K6"
                                      3: [ core:define core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst))))) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ core:define core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst))))) [Closure] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ core:define core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst))))) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:define core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst))))) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] core:fold-right ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] core:fold-right [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] core:fold-right ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] core:fold-right ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] core:fold-right [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] core:fold-right ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (core:fold-right) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (core:fold-right) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (core:fold-right) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (core:fold-right) ((lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (core:fold-right) ((lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (core:fold-right) ((lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) [K4:28] quote core:fold-right ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) [K4:28] quote core:fold-right [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) [K4:28] quote core:fold-right ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) [K4:28] (quote core:fold-right) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) (quote core:fold-right) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) (quote core:fold-right) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) (quote core:fold-right) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) (quote core:fold-right) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! core:fold-right (lambda (core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))) (quote core:fold-right)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((core:define (core:fold-right core:fn core:base core:lst) (if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst))))))
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; ((if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))
		0	MAKE_ENV	3
		1	SAVE_RETURN	"K0"	10
		2	SAVE_RETURN	"K1"	6
		3	LOCAL_GET	0	2	; core:lst
		4	GLOBAL_GET	core:length
		5	JMP_CLOSURE	1
	6	MAKE_LABEL	"K1"
		7	PUSH_CONST	0
		8	GLOBAL_GET	core:=
		9	JMP_CLOSURE	2
	10	MAKE_LABEL	"K0"
		11	JMP_IF_FALSE	"L5"	14
		12	LOCAL_GET	0	1	; core:base
		13	RETURN_VAL
	14	MAKE_LABEL	"L5"
		15	SAVE_RETURN	"K2"	19
		16	LOCAL_GET	0	2	; core:lst
		17	GLOBAL_GET	core:car
		18	JMP_CLOSURE	1
	19	MAKE_LABEL	"K2"
		20	SAVE_RETURN	"K3"	30
		21	LOCAL_GET	0	0	; core:fn
		22	LOCAL_GET	0	1	; core:base
		23	SAVE_RETURN	"K4"	27
		24	LOCAL_GET	0	2	; core:lst
		25	GLOBAL_GET	core:cdr
		26	JMP_CLOSURE	1
	27	MAKE_LABEL	"K4"
		28	GLOBAL_GET	core:fold-right
		29	JMP_CLOSURE	3
	30	MAKE_LABEL	"K3"
		31	LOCAL_GET	0	0	; core:fn
		32	JMP_CLOSURE	2
	2	GLOBAL_SET	core:fold-right
	3	STACK_POP
	4	PUSH_CONST	core:fold-right
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; ((if (core:= (core:length core:lst) 0) core:base (core:fn (core:car core:lst) (core:fold-right core:fn core:base (core:cdr core:lst)))))
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	core:fold-right
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	core:fold-right
                                      1: [ core:fold-right ]
[ 1]   5 : RETURN_VAL


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (map number? '(a 2 "foo"))
==>  (core:map core:number? (quote (core:a 2 "foo")))
Parsed:  (core:map core:number? (quote (core:a 2 "foo")))
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:number?
	2	PUSH_CONST	(core:a 2 "foo")
	3	GLOBAL_GET	core:map
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((core:map core:number? (quote (core:a 2 "foo"))))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:number?
	2	PUSH_CONST	(core:a 2 "foo")
	3	GLOBAL_GET	core:map
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:number?
                                      1: [ [Closure] ]
[ 1]   2 : PUSH_CONST	(core:a 2 "foo")
                                      2: [ [Closure] (core:a 2 "foo") ]
[ 2]   3 : GLOBAL_GET	core:map
                                      3: [ [Closure] (core:a 2 "foo") [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ [Closure] (core:a 2 "foo") ]
[ 2]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ core:a ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
Executing:  primitive: core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ 2 ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #t ]
[ 1]   1 : RETURN_VAL
Executing:  primitive: core:number?
	0	CALL_PRIMOP	"number?"
	1	RETURN_VAL

                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"number?"
                                      1: [ #f ]
[ 1]   1 : RETURN_VAL
                                      1: [ (#f #t #f) ]
[ 1]   1 : RETURN_VAL
test: got "(#f #t #f)"  - expected "(#f #t #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (package-set "foo")
==>  (core:package-set "foo")
Parsed:  (core:package-set "foo")
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:package-set "foo"))
	0	MAKE_ENV	0
	1	PUSH_CONST	"foo"
	2	GLOBAL_GET	core:package-set
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	"foo"
                                      1: [ "foo" ]
[ 1]   2 : GLOBAL_GET	core:package-set
                                      2: [ "foo" [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ "foo" ]
[ 1]   0 : CALL_PRIMOP	"package-set"
                                      1: [ "foo" ]
[ 1]   1 : RETURN_VAL
test: got ""foo""  - expected ""foo""


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(let ((x 1)) x))
==>  (core:mx1 (quote (core:let ((foo:x 1)) foo:x)))
Parsed:  (core:mx1 (quote (core:let ((foo:x 1)) foo:x)))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(core:let ((foo:x 1)) foo:x)
	2	GLOBAL_GET	core:mx1
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:mx1 (quote (core:let ((foo:x 1)) foo:x))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(core:let ((foo:x 1)) foo:x)
	2	GLOBAL_GET	core:mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(core:let ((foo:x 1)) foo:x)
                                      1: [ (core:let ((foo:x 1)) foo:x) ]
[ 1]   2 : GLOBAL_GET	core:mx1
                                      2: [ (core:let ((foo:x 1)) foo:x) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (core:let ((foo:x 1)) foo:x) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; core:bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; core:body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; core:bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((foo:x 1)) foo:x ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; core:bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1)) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1)) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (foo:x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((foo:x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x)) ]
[ 4]  18 : LOCAL_GET	0	1	; core:body
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x)) (foo:x) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((foo:x)) (foo:x) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x)) (foo:x) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (foo:x) foo:x) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (foo:x) foo:x) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (foo:x) foo:x) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (foo:x) foo:x) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (foo:x) foo:x) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (foo:x) foo:x)) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:x) foo:x)) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (foo:x) foo:x)) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (foo:x) foo:x)) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (foo:x) foo:x)) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; core:bindings
                                      4: [ ((lambda (foo:x) foo:x)) [K5:30] [Closure] ((foo:x 1)) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (foo:x) foo:x)) [K5:30] [Closure] ((foo:x 1)) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (foo:x) foo:x)) [K5:30] [Closure] ((foo:x 1)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (foo:x) foo:x)) [K5:30] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (foo:x) foo:x)) (1) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (foo:x) foo:x)) (1) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (foo:x) foo:x)) (1) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (foo:x) foo:x)) (1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (foo:x) foo:x) 1) ]
[ 1]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:x) foo:x) 1) ]
[ 1]   1 : RETURN_VAL
test: got "((lambda (foo:x) foo:x) 1)"  - expected "((lambda (foo:x) foo:x) 1)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(let ((x 1) (y 2)) (set! y 42) (+ x y)))
==>  (core:mx1 (quote (core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y))))
Parsed:  (core:mx1 (quote (core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y))))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y))
	2	GLOBAL_GET	core:mx1
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:mx1 (quote (core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y)))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y))
	2	GLOBAL_GET	core:mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y))
                                      1: [ (core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 1]   2 : GLOBAL_GET	core:mx1
                                      2: [ (core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y)) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; core:bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; core:body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; core:bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y) ]
[ 3]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; core:bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1) (foo:y 2)) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1) (foo:y 2)) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1) (foo:y 2)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:x ]
[ 1]   1 : RETURN_VAL
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:y 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (foo:x foo:y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x foo:y) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x foo:y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x foo:y) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x foo:y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((foo:x foo:y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ]
[ 4]  18 : LOCAL_GET	0	1	; core:body
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ((set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ((set! foo:y 42) (core:+ foo:x foo:y)) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ((set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; core:bindings
                                      4: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) [K5:30] [Closure] ((foo:x 1) (foo:y 2)) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) [K5:30] [Closure] ((foo:x 1) (foo:y 2)) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) [K5:30] [Closure] ((foo:x 1) (foo:y 2)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:y 2) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) [K5:30] (1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) (1 2) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) (1 2) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) (1 2) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) (1 2) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) 1 2) ]
[ 1]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) 1 2) ]
[ 1]   1 : RETURN_VAL
test: got "((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) 1 2)"  - expected "((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) 1 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(let* ((x 1) (y 2)) (+ x y)))
==>  (core:mx1 (quote (core:let* ((foo:x 1) (foo:y 2)) (core:+ foo:x foo:y))))
Parsed:  (core:mx1 (quote (core:let* ((foo:x 1) (foo:y 2)) (core:+ foo:x foo:y))))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(core:let* ((foo:x 1) (foo:y 2)) (core:+ foo:x foo:y))
	2	GLOBAL_GET	core:mx1
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:mx1 (quote (core:let* ((foo:x 1) (foo:y 2)) (core:+ foo:x foo:y)))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(core:let* ((foo:x 1) (foo:y 2)) (core:+ foo:x foo:y))
	2	GLOBAL_GET	core:mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(core:let* ((foo:x 1) (foo:y 2)) (core:+ foo:x foo:y))
                                      1: [ (core:let* ((foo:x 1) (foo:y 2)) (core:+ foo:x foo:y)) ]
[ 1]   2 : GLOBAL_GET	core:mx1
                                      2: [ (core:let* ((foo:x 1) (foo:y 2)) (core:+ foo:x foo:y)) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (core:let* ((foo:x 1) (foo:y 2)) (core:+ foo:x foo:y)) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  lambda: ((if (core:null? core:bindings) (append (list (quote begin)) core:body) (list (quote core:let) (list (core:car core:bindings)) (append (list (quote core:let*)) (list (core:cdr core:bindings)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:bindings
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	LOCAL_GET	0	1	; core:body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	MAKE_LABEL	"L8"
	16	PUSH_CONST	core:let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; core:bindings
	20	GLOBAL_GET	core:car
	21	JMP_CLOSURE	1
22	MAKE_LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	core:let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	MAKE_LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; core:bindings
	35	GLOBAL_GET	core:cdr
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	MAKE_LABEL	"K6"
	41	LOCAL_GET	0	1	; core:body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	MAKE_LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((foo:x 1) (foo:y 2)) (core:+ foo:x foo:y) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:bindings
                                      2: [ [K0:5] ((foo:x 1) (foo:y 2)) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] ((foo:x 1) (foo:y 2)) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] ((foo:x 1) (foo:y 2)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : MAKE_LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	core:let
                                      1: [ core:let ]
[ 1]  17 : SAVE_RETURN	"K2"	25
                                      2: [ core:let [K2:25] ]
[ 2]  18 : SAVE_RETURN	"K3"	22
                                      3: [ core:let [K2:25] [K3:22] ]
[ 3]  19 : LOCAL_GET	0	0	; core:bindings
                                      4: [ core:let [K2:25] [K3:22] ((foo:x 1) (foo:y 2)) ]
[ 4]  20 : GLOBAL_GET	core:car
                                      5: [ core:let [K2:25] [K3:22] ((foo:x 1) (foo:y 2)) [Closure] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ core:let [K2:25] [K3:22] ((foo:x 1) (foo:y 2)) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ core:let [K2:25] [K3:22] (foo:x 1) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:let [K2:25] (foo:x 1) ]
[ 3]  22 : MAKE_LABEL	"K3"
                                      3: [ core:let [K2:25] (foo:x 1) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ core:let [K2:25] (foo:x 1) [Closure] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ core:let [K2:25] (foo:x 1) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ core:let [K2:25] ((foo:x 1)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ core:let ((foo:x 1)) ]
[ 2]  25 : MAKE_LABEL	"K2"
                                      2: [ core:let ((foo:x 1)) ]
[ 2]  26 : SAVE_RETURN	"K4"	44
                                      3: [ core:let ((foo:x 1)) [K4:44] ]
[ 3]  27 : SAVE_RETURN	"K5"	31
                                      4: [ core:let ((foo:x 1)) [K4:44] [K5:31] ]
[ 4]  28 : PUSH_CONST	core:let*
                                      5: [ core:let ((foo:x 1)) [K4:44] [K5:31] core:let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ core:let ((foo:x 1)) [K4:44] [K5:31] core:let* [Closure] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ core:let ((foo:x 1)) [K4:44] [K5:31] core:let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ core:let ((foo:x 1)) [K4:44] [K5:31] (core:let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ core:let ((foo:x 1)) [K4:44] (core:let*) ]
[ 4]  31 : MAKE_LABEL	"K5"
                                      4: [ core:let ((foo:x 1)) [K4:44] (core:let*) ]
[ 4]  32 : SAVE_RETURN	"K6"	40
                                      5: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] ]
[ 5]  33 : SAVE_RETURN	"K7"	37
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] [K7:37] ]
[ 6]  34 : LOCAL_GET	0	0	; core:bindings
                                      7: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] [K7:37] ((foo:x 1) (foo:y 2)) ]
[ 7]  35 : GLOBAL_GET	core:cdr
                                      8: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] [K7:37] ((foo:x 1) (foo:y 2)) [Closure] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] [K7:37] ((foo:x 1) (foo:y 2)) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] [K7:37] ((foo:y 2)) ]
[ 7]   1 : RETURN_VAL
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] ((foo:y 2)) ]
[ 6]  37 : MAKE_LABEL	"K7"
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] ((foo:y 2)) ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] ((foo:y 2)) [Closure] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] ((foo:y 2)) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] (((foo:y 2))) ]
[ 6]   1 : RETURN_VAL
                                      5: [ core:let ((foo:x 1)) [K4:44] (core:let*) (((foo:y 2))) ]
[ 5]  40 : MAKE_LABEL	"K6"
                                      5: [ core:let ((foo:x 1)) [K4:44] (core:let*) (((foo:y 2))) ]
[ 5]  41 : LOCAL_GET	0	1	; core:body
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) (((foo:y 2))) ((core:+ foo:x foo:y)) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ core:let ((foo:x 1)) [K4:44] (core:let*) (((foo:y 2))) ((core:+ foo:x foo:y)) [Closure] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) (((foo:y 2))) ((core:+ foo:x foo:y)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ core:let ((foo:x 1)) [K4:44] (core:let* ((foo:y 2)) (core:+ foo:x foo:y)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:let ((foo:x 1)) (core:let* ((foo:y 2)) (core:+ foo:x foo:y)) ]
[ 3]  44 : MAKE_LABEL	"K4"
                                      3: [ core:let ((foo:x 1)) (core:let* ((foo:y 2)) (core:+ foo:x foo:y)) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ core:let ((foo:x 1)) (core:let* ((foo:y 2)) (core:+ foo:x foo:y)) [Closure] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ core:let ((foo:x 1)) (core:let* ((foo:y 2)) (core:+ foo:x foo:y)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:let ((foo:x 1)) (core:let* ((foo:y 2)) (core:+ foo:x foo:y))) ]
[ 1]   1 : RETURN_VAL
                                      1: [ (core:let ((foo:x 1)) (core:let* ((foo:y 2)) (core:+ foo:x foo:y))) ]
[ 1]   1 : RETURN_VAL
test: got "(core:let ((foo:x 1)) (core:let* ((foo:y 2)) (core:+ foo:x foo:y)))"  - expected "(core:let ((foo:x 1)) (core:let* ((foo:y 2)) (core:+ foo:x foo:y)))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(define x 5))
==>  (core:mx1 (quote (core:define foo:x 5)))
Parsed:  (core:mx1 (quote (core:define foo:x 5)))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(core:define foo:x 5)
	2	GLOBAL_GET	core:mx1
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:mx1 (quote (core:define foo:x 5))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(core:define foo:x 5)
	2	GLOBAL_GET	core:mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(core:define foo:x 5)
                                      1: [ (core:define foo:x 5) ]
[ 1]   2 : GLOBAL_GET	core:mx1
                                      2: [ (core:define foo:x 5) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (core:define foo:x 5) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ foo:x 5 ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] foo:x ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] foo:x [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] foo:x ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] foo:x ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] foo:x [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] foo:x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (foo:x) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (foo:x) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (foo:x) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (foo:x) (5) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (foo:x) (5) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (foo:x) (5) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! foo:x 5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! foo:x 5) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! foo:x 5) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! foo:x 5) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! foo:x 5) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! foo:x 5) [K4:28] quote foo:x ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! foo:x 5) [K4:28] quote foo:x [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! foo:x 5) [K4:28] quote foo:x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! foo:x 5) [K4:28] (quote foo:x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! foo:x 5) (quote foo:x) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! foo:x 5) (quote foo:x) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! foo:x 5) (quote foo:x) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! foo:x 5) (quote foo:x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! foo:x 5) (quote foo:x)) ]
[ 1]   1 : RETURN_VAL
                                      1: [ (begin (set! foo:x 5) (quote foo:x)) ]
[ 1]   1 : RETURN_VAL
test: got "(begin (set! foo:x 5) (quote foo:x))"  - expected "(begin (set! foo:x 5) (quote foo:x))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (mx1 '(define (x y) 5))
==>  (core:mx1 (quote (core:define (foo:x foo:y) 5)))
Parsed:  (core:mx1 (quote (core:define (foo:x foo:y) 5)))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(core:define (foo:x foo:y) 5)
	2	GLOBAL_GET	core:mx1
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:mx1 (quote (core:define (foo:x foo:y) 5))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(core:define (foo:x foo:y) 5)
	2	GLOBAL_GET	core:mx1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(core:define (foo:x foo:y) 5)
                                      1: [ (core:define (foo:x foo:y) 5) ]
[ 1]   2 : GLOBAL_GET	core:mx1
                                      2: [ (core:define (foo:x foo:y) 5) [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ (core:define (foo:x foo:y) 5) ]
[ 1]   0 : CALL_PRIMOP	"mx1"
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (foo:x foo:y) 5 ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] (foo:x foo:y) ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] (foo:x foo:y) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (foo:x foo:y) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	core:define
                                      1: [ core:define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ core:define [K5:37] ]
[ 2]  34 : LOCAL_GET	0	0	; core:name
                                      3: [ core:define [K5:37] (foo:x foo:y) ]
[ 3]  35 : GLOBAL_GET	core:car
                                      4: [ core:define [K5:37] (foo:x foo:y) [Closure] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ core:define [K5:37] (foo:x foo:y) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ core:define [K5:37] foo:x ]
[ 3]   1 : RETURN_VAL
                                      2: [ core:define foo:x ]
[ 2]  37 : MAKE_LABEL	"K5"
                                      2: [ core:define foo:x ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ core:define foo:x [K6:56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ core:define foo:x [K6:56] [K7:43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ core:define foo:x [K6:56] [K7:43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ core:define foo:x [K6:56] [K7:43] lambda [Closure] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ core:define foo:x [K6:56] [K7:43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ core:define foo:x [K6:56] [K7:43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ core:define foo:x [K6:56] (lambda) ]
[ 4]  43 : MAKE_LABEL	"K7"
                                      4: [ core:define foo:x [K6:56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ core:define foo:x [K6:56] (lambda) [K8:52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ core:define foo:x [K6:56] (lambda) [K8:52] [K9:49] ]
[ 6]  46 : LOCAL_GET	0	0	; core:name
                                      7: [ core:define foo:x [K6:56] (lambda) [K8:52] [K9:49] (foo:x foo:y) ]
[ 7]  47 : GLOBAL_GET	core:cdr
                                      8: [ core:define foo:x [K6:56] (lambda) [K8:52] [K9:49] (foo:x foo:y) [Closure] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ core:define foo:x [K6:56] (lambda) [K8:52] [K9:49] (foo:x foo:y) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ core:define foo:x [K6:56] (lambda) [K8:52] [K9:49] (foo:y) ]
[ 7]   1 : RETURN_VAL
                                      6: [ core:define foo:x [K6:56] (lambda) [K8:52] (foo:y) ]
[ 6]  49 : MAKE_LABEL	"K9"
                                      6: [ core:define foo:x [K6:56] (lambda) [K8:52] (foo:y) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ core:define foo:x [K6:56] (lambda) [K8:52] (foo:y) [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ core:define foo:x [K6:56] (lambda) [K8:52] (foo:y) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ core:define foo:x [K6:56] (lambda) [K8:52] ((foo:y)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ core:define foo:x [K6:56] (lambda) ((foo:y)) ]
[ 5]  52 : MAKE_LABEL	"K8"
                                      5: [ core:define foo:x [K6:56] (lambda) ((foo:y)) ]
[ 5]  53 : LOCAL_GET	0	1	; core:body
                                      6: [ core:define foo:x [K6:56] (lambda) ((foo:y)) (5) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ core:define foo:x [K6:56] (lambda) ((foo:y)) (5) [Closure] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ core:define foo:x [K6:56] (lambda) ((foo:y)) (5) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ core:define foo:x [K6:56] (lambda (foo:y) 5) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:define foo:x (lambda (foo:y) 5) ]
[ 3]  56 : MAKE_LABEL	"K6"
                                      3: [ core:define foo:x (lambda (foo:y) 5) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ core:define foo:x (lambda (foo:y) 5) [Closure] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ core:define foo:x (lambda (foo:y) 5) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:define foo:x (lambda (foo:y) 5)) ]
[ 1]   1 : RETURN_VAL
                                      1: [ (core:define foo:x (lambda (foo:y) 5)) ]
[ 1]   1 : RETURN_VAL
test: got "(core:define foo:x (lambda (foo:y) 5))"  - expected "(core:define foo:x (lambda (foo:y) 5))"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (gensym) (gensym) (gensym "bar_"))
==>  (core:list (core:gensym) (core:gensym) (core:gensym "bar_"))
Parsed:  (core:list (core:gensym) (core:gensym) (core:gensym "bar_"))
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	4
	2	GLOBAL_GET	core:gensym
	3	JMP_CLOSURE	0
4	MAKE_LABEL	"K0"
	5	SAVE_RETURN	"K1"	8
	6	GLOBAL_GET	core:gensym
	7	JMP_CLOSURE	0
8	MAKE_LABEL	"K1"
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	"bar_"
	11	GLOBAL_GET	core:gensym
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	GLOBAL_GET	core:list
	15	JMP_CLOSURE	3

Running...
Executing:  lambda: ((core:list (core:gensym) (core:gensym) (core:gensym "bar_")))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	4
	2	GLOBAL_GET	core:gensym
	3	JMP_CLOSURE	0
4	MAKE_LABEL	"K0"
	5	SAVE_RETURN	"K1"	8
	6	GLOBAL_GET	core:gensym
	7	JMP_CLOSURE	0
8	MAKE_LABEL	"K1"
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	"bar_"
	11	GLOBAL_GET	core:gensym
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	GLOBAL_GET	core:list
	15	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	4
                                      1: [ [K0:4] ]
[ 1]   2 : GLOBAL_GET	core:gensym
                                      2: [ [K0:4] [Closure] ]
[ 2]   3 : JMP_CLOSURE	0
                                      1: [ [K0:4] ]
[ 1]   0 : CALL_PRIMOP	"gensym"
                                      2: [ [K0:4] foo:GENSYM-1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ foo:GENSYM-1 ]
[ 1]   4 : MAKE_LABEL	"K0"
                                      1: [ foo:GENSYM-1 ]
[ 1]   5 : SAVE_RETURN	"K1"	8
                                      2: [ foo:GENSYM-1 [K1:8] ]
[ 2]   6 : GLOBAL_GET	core:gensym
                                      3: [ foo:GENSYM-1 [K1:8] [Closure] ]
[ 3]   7 : JMP_CLOSURE	0
                                      2: [ foo:GENSYM-1 [K1:8] ]
[ 2]   0 : CALL_PRIMOP	"gensym"
                                      3: [ foo:GENSYM-1 [K1:8] foo:GENSYM-2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ foo:GENSYM-1 foo:GENSYM-2 ]
[ 2]   8 : MAKE_LABEL	"K1"
                                      2: [ foo:GENSYM-1 foo:GENSYM-2 ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ foo:GENSYM-1 foo:GENSYM-2 [K2:13] ]
[ 3]  10 : PUSH_CONST	"bar_"
                                      4: [ foo:GENSYM-1 foo:GENSYM-2 [K2:13] "bar_" ]
[ 4]  11 : GLOBAL_GET	core:gensym
                                      5: [ foo:GENSYM-1 foo:GENSYM-2 [K2:13] "bar_" [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ foo:GENSYM-1 foo:GENSYM-2 [K2:13] "bar_" ]
[ 4]   0 : CALL_PRIMOP	"gensym"
                                      4: [ foo:GENSYM-1 foo:GENSYM-2 [K2:13] foo:bar_3 ]
[ 4]   1 : RETURN_VAL
                                      3: [ foo:GENSYM-1 foo:GENSYM-2 foo:bar_3 ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ foo:GENSYM-1 foo:GENSYM-2 foo:bar_3 ]
[ 3]  14 : GLOBAL_GET	core:list
                                      4: [ foo:GENSYM-1 foo:GENSYM-2 foo:bar_3 [Closure] ]
[ 4]  15 : JMP_CLOSURE	3
                                      3: [ foo:GENSYM-1 foo:GENSYM-2 foo:bar_3 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (foo:GENSYM-1 foo:GENSYM-2 foo:bar_3) ]
[ 1]   1 : RETURN_VAL
test: got "(foo:GENSYM-1 foo:GENSYM-2 foo:bar_3)"  - expected "(foo:GENSYM-1 foo:GENSYM-2 foo:bar_3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let ((x 1)) (+ x 1))
==>  (core:let ((foo:x 1)) (core:+ foo:x 1))
Parsed:  (core:let ((foo:x 1)) (core:+ foo:x 1))
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; core:bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; core:body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; core:bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((foo:x 1)) (core:+ foo:x 1) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; core:bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1)) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1)) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (foo:x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((foo:x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x)) ]
[ 4]  18 : LOCAL_GET	0	1	; core:body
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x)) ((core:+ foo:x 1)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((foo:x)) ((core:+ foo:x 1)) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x)) ((core:+ foo:x 1)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (foo:x) (core:+ foo:x 1)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (foo:x) (core:+ foo:x 1)) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (foo:x) (core:+ foo:x 1)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (foo:x) (core:+ foo:x 1)) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (foo:x) (core:+ foo:x 1)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (foo:x) (core:+ foo:x 1))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:x) (core:+ foo:x 1))) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (foo:x) (core:+ foo:x 1))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (foo:x) (core:+ foo:x 1))) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (foo:x) (core:+ foo:x 1))) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; core:bindings
                                      4: [ ((lambda (foo:x) (core:+ foo:x 1))) [K5:30] [Closure] ((foo:x 1)) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (foo:x) (core:+ foo:x 1))) [K5:30] [Closure] ((foo:x 1)) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (foo:x) (core:+ foo:x 1))) [K5:30] [Closure] ((foo:x 1)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (foo:x) (core:+ foo:x 1))) [K5:30] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (foo:x) (core:+ foo:x 1))) (1) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (foo:x) (core:+ foo:x 1))) (1) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (foo:x) (core:+ foo:x 1))) (1) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (foo:x) (core:+ foo:x 1))) (1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (foo:x) (core:+ foo:x 1)) 1) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((core:+ foo:x 1))
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; foo:x
		2	PUSH_CONST	1
		3	GLOBAL_GET	core:+
		4	JMP_CLOSURE	2
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:let ((foo:x 1)) (core:+ foo:x 1)))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((core:+ foo:x 1))
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; foo:x
		2	PUSH_CONST	1
		3	GLOBAL_GET	core:+
		4	JMP_CLOSURE	2
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((core:+ foo:x 1))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; foo:x
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	core:+
                                      3: [ 1 1 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let ((x 1) (y 2)) (set! y 42) (+ x y))
==>  (core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y))
Parsed:  (core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y))
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; core:bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; core:body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; core:bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y) ]
[ 3]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; core:bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1) (foo:y 2)) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1) (foo:y 2)) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1) (foo:y 2)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:x ]
[ 1]   1 : RETURN_VAL
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:y 2) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (foo:x foo:y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x foo:y) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x foo:y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x foo:y) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x foo:y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((foo:x foo:y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ]
[ 4]  18 : LOCAL_GET	0	1	; core:body
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ((set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ((set! foo:y 42) (core:+ foo:x foo:y)) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ((set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; core:bindings
                                      4: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) [K5:30] [Closure] ((foo:x 1) (foo:y 2)) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) [K5:30] [Closure] ((foo:x 1) (foo:y 2)) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) [K5:30] [Closure] ((foo:x 1) (foo:y 2)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:y 2) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) [K5:30] (1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) (1 2) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) (1 2) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) (1 2) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y))) (1 2) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (foo:x foo:y) (set! foo:y 42) (core:+ foo:x foo:y)) 1 2) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	MAKE_CLOSURE	[Closure]	; ((set! foo:y 42) (core:+ foo:x foo:y))
		0	MAKE_ENV	2
		1	PUSH_CONST	42
		2	LOCAL_SET	0	1	; foo:y
		3	STACK_POP
		4	LOCAL_GET	0	0	; foo:x
		5	LOCAL_GET	0	1	; foo:y
		6	GLOBAL_GET	core:+
		7	JMP_CLOSURE	2
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((core:let ((foo:x 1) (foo:y 2)) (set! foo:y 42) (core:+ foo:x foo:y)))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	MAKE_CLOSURE	[Closure]	; ((set! foo:y 42) (core:+ foo:x foo:y))
		0	MAKE_ENV	2
		1	PUSH_CONST	42
		2	LOCAL_SET	0	1	; foo:y
		3	STACK_POP
		4	LOCAL_GET	0	0	; foo:x
		5	LOCAL_GET	0	1	; foo:y
		6	GLOBAL_GET	core:+
		7	JMP_CLOSURE	2
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; ((set! foo:y 42) (core:+ foo:x foo:y))
                                      3: [ 1 2 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 2 ]
[ 2]   0 : MAKE_ENV	2
                                      0: [  ]
[ 0]   1 : PUSH_CONST	42
                                      1: [ 42 ]
[ 1]   2 : LOCAL_SET	0	1	; foo:y
                                      1: [ 42 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : LOCAL_GET	0	0	; foo:x
                                      1: [ 1 ]
[ 1]   5 : LOCAL_GET	0	1	; foo:y
                                      2: [ 1 42 ]
[ 2]   6 : GLOBAL_GET	core:+
                                      3: [ 1 42 [Closure] ]
[ 3]   7 : JMP_CLOSURE	2
                                      2: [ 1 42 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 43 ]
[ 1]   1 : RETURN_VAL
test: got "43"  - expected "43"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let* ((x 1) (y x)) (+ x y))
==>  (core:let* ((foo:x 1) (foo:y foo:x)) (core:+ foo:x foo:y))
Parsed:  (core:let* ((foo:x 1) (foo:y foo:x)) (core:+ foo:x foo:y))
Executing:  lambda: ((if (core:null? core:bindings) (append (list (quote begin)) core:body) (list (quote core:let) (list (core:car core:bindings)) (append (list (quote core:let*)) (list (core:cdr core:bindings)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:bindings
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	LOCAL_GET	0	1	; core:body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	MAKE_LABEL	"L8"
	16	PUSH_CONST	core:let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; core:bindings
	20	GLOBAL_GET	core:car
	21	JMP_CLOSURE	1
22	MAKE_LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	core:let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	MAKE_LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; core:bindings
	35	GLOBAL_GET	core:cdr
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	MAKE_LABEL	"K6"
	41	LOCAL_GET	0	1	; core:body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	MAKE_LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((foo:x 1) (foo:y foo:x)) (core:+ foo:x foo:y) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:bindings
                                      2: [ [K0:5] ((foo:x 1) (foo:y foo:x)) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] ((foo:x 1) (foo:y foo:x)) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] ((foo:x 1) (foo:y foo:x)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : MAKE_LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	core:let
                                      1: [ core:let ]
[ 1]  17 : SAVE_RETURN	"K2"	25
                                      2: [ core:let [K2:25] ]
[ 2]  18 : SAVE_RETURN	"K3"	22
                                      3: [ core:let [K2:25] [K3:22] ]
[ 3]  19 : LOCAL_GET	0	0	; core:bindings
                                      4: [ core:let [K2:25] [K3:22] ((foo:x 1) (foo:y foo:x)) ]
[ 4]  20 : GLOBAL_GET	core:car
                                      5: [ core:let [K2:25] [K3:22] ((foo:x 1) (foo:y foo:x)) [Closure] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ core:let [K2:25] [K3:22] ((foo:x 1) (foo:y foo:x)) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ core:let [K2:25] [K3:22] (foo:x 1) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:let [K2:25] (foo:x 1) ]
[ 3]  22 : MAKE_LABEL	"K3"
                                      3: [ core:let [K2:25] (foo:x 1) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ core:let [K2:25] (foo:x 1) [Closure] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ core:let [K2:25] (foo:x 1) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ core:let [K2:25] ((foo:x 1)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ core:let ((foo:x 1)) ]
[ 2]  25 : MAKE_LABEL	"K2"
                                      2: [ core:let ((foo:x 1)) ]
[ 2]  26 : SAVE_RETURN	"K4"	44
                                      3: [ core:let ((foo:x 1)) [K4:44] ]
[ 3]  27 : SAVE_RETURN	"K5"	31
                                      4: [ core:let ((foo:x 1)) [K4:44] [K5:31] ]
[ 4]  28 : PUSH_CONST	core:let*
                                      5: [ core:let ((foo:x 1)) [K4:44] [K5:31] core:let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ core:let ((foo:x 1)) [K4:44] [K5:31] core:let* [Closure] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ core:let ((foo:x 1)) [K4:44] [K5:31] core:let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ core:let ((foo:x 1)) [K4:44] [K5:31] (core:let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ core:let ((foo:x 1)) [K4:44] (core:let*) ]
[ 4]  31 : MAKE_LABEL	"K5"
                                      4: [ core:let ((foo:x 1)) [K4:44] (core:let*) ]
[ 4]  32 : SAVE_RETURN	"K6"	40
                                      5: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] ]
[ 5]  33 : SAVE_RETURN	"K7"	37
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] [K7:37] ]
[ 6]  34 : LOCAL_GET	0	0	; core:bindings
                                      7: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] [K7:37] ((foo:x 1) (foo:y foo:x)) ]
[ 7]  35 : GLOBAL_GET	core:cdr
                                      8: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] [K7:37] ((foo:x 1) (foo:y foo:x)) [Closure] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] [K7:37] ((foo:x 1) (foo:y foo:x)) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] [K7:37] ((foo:y foo:x)) ]
[ 7]   1 : RETURN_VAL
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] ((foo:y foo:x)) ]
[ 6]  37 : MAKE_LABEL	"K7"
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] ((foo:y foo:x)) ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] ((foo:y foo:x)) [Closure] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] ((foo:y foo:x)) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) [K6:40] (((foo:y foo:x))) ]
[ 6]   1 : RETURN_VAL
                                      5: [ core:let ((foo:x 1)) [K4:44] (core:let*) (((foo:y foo:x))) ]
[ 5]  40 : MAKE_LABEL	"K6"
                                      5: [ core:let ((foo:x 1)) [K4:44] (core:let*) (((foo:y foo:x))) ]
[ 5]  41 : LOCAL_GET	0	1	; core:body
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) (((foo:y foo:x))) ((core:+ foo:x foo:y)) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ core:let ((foo:x 1)) [K4:44] (core:let*) (((foo:y foo:x))) ((core:+ foo:x foo:y)) [Closure] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ core:let ((foo:x 1)) [K4:44] (core:let*) (((foo:y foo:x))) ((core:+ foo:x foo:y)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ core:let ((foo:x 1)) [K4:44] (core:let* ((foo:y foo:x)) (core:+ foo:x foo:y)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:let ((foo:x 1)) (core:let* ((foo:y foo:x)) (core:+ foo:x foo:y)) ]
[ 3]  44 : MAKE_LABEL	"K4"
                                      3: [ core:let ((foo:x 1)) (core:let* ((foo:y foo:x)) (core:+ foo:x foo:y)) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ core:let ((foo:x 1)) (core:let* ((foo:y foo:x)) (core:+ foo:x foo:y)) [Closure] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ core:let ((foo:x 1)) (core:let* ((foo:y foo:x)) (core:+ foo:x foo:y)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:let ((foo:x 1)) (core:let* ((foo:y foo:x)) (core:+ foo:x foo:y))) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:bindings) (append (list (quote begin)) core:body) (list (quote core:let) (list (core:car core:bindings)) (append (list (quote core:let*)) (list (core:cdr core:bindings)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:bindings
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	LOCAL_GET	0	1	; core:body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	MAKE_LABEL	"L8"
	16	PUSH_CONST	core:let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; core:bindings
	20	GLOBAL_GET	core:car
	21	JMP_CLOSURE	1
22	MAKE_LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	core:let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	MAKE_LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; core:bindings
	35	GLOBAL_GET	core:cdr
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	MAKE_LABEL	"K6"
	41	LOCAL_GET	0	1	; core:body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	MAKE_LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ ((foo:y foo:x)) (core:+ foo:x foo:y) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:bindings
                                      2: [ [K0:5] ((foo:y foo:x)) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] ((foo:y foo:x)) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] ((foo:y foo:x)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]  15 : MAKE_LABEL	"L8"
                                      0: [  ]
[ 0]  16 : PUSH_CONST	core:let
                                      1: [ core:let ]
[ 1]  17 : SAVE_RETURN	"K2"	25
                                      2: [ core:let [K2:25] ]
[ 2]  18 : SAVE_RETURN	"K3"	22
                                      3: [ core:let [K2:25] [K3:22] ]
[ 3]  19 : LOCAL_GET	0	0	; core:bindings
                                      4: [ core:let [K2:25] [K3:22] ((foo:y foo:x)) ]
[ 4]  20 : GLOBAL_GET	core:car
                                      5: [ core:let [K2:25] [K3:22] ((foo:y foo:x)) [Closure] ]
[ 5]  21 : JMP_CLOSURE	1
                                      4: [ core:let [K2:25] [K3:22] ((foo:y foo:x)) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ core:let [K2:25] [K3:22] (foo:y foo:x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:let [K2:25] (foo:y foo:x) ]
[ 3]  22 : MAKE_LABEL	"K3"
                                      3: [ core:let [K2:25] (foo:y foo:x) ]
[ 3]  23 : GLOBAL_GET	list
                                      4: [ core:let [K2:25] (foo:y foo:x) [Closure] ]
[ 4]  24 : JMP_CLOSURE	1
                                      3: [ core:let [K2:25] (foo:y foo:x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ core:let [K2:25] ((foo:y foo:x)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ core:let ((foo:y foo:x)) ]
[ 2]  25 : MAKE_LABEL	"K2"
                                      2: [ core:let ((foo:y foo:x)) ]
[ 2]  26 : SAVE_RETURN	"K4"	44
                                      3: [ core:let ((foo:y foo:x)) [K4:44] ]
[ 3]  27 : SAVE_RETURN	"K5"	31
                                      4: [ core:let ((foo:y foo:x)) [K4:44] [K5:31] ]
[ 4]  28 : PUSH_CONST	core:let*
                                      5: [ core:let ((foo:y foo:x)) [K4:44] [K5:31] core:let* ]
[ 5]  29 : GLOBAL_GET	list
                                      6: [ core:let ((foo:y foo:x)) [K4:44] [K5:31] core:let* [Closure] ]
[ 6]  30 : JMP_CLOSURE	1
                                      5: [ core:let ((foo:y foo:x)) [K4:44] [K5:31] core:let* ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ core:let ((foo:y foo:x)) [K4:44] [K5:31] (core:let*) ]
[ 5]   1 : RETURN_VAL
                                      4: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) ]
[ 4]  31 : MAKE_LABEL	"K5"
                                      4: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) ]
[ 4]  32 : SAVE_RETURN	"K6"	40
                                      5: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) [K6:40] ]
[ 5]  33 : SAVE_RETURN	"K7"	37
                                      6: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) [K6:40] [K7:37] ]
[ 6]  34 : LOCAL_GET	0	0	; core:bindings
                                      7: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) [K6:40] [K7:37] ((foo:y foo:x)) ]
[ 7]  35 : GLOBAL_GET	core:cdr
                                      8: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) [K6:40] [K7:37] ((foo:y foo:x)) [Closure] ]
[ 8]  36 : JMP_CLOSURE	1
                                      7: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) [K6:40] [K7:37] ((foo:y foo:x)) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) [K6:40] [K7:37] () ]
[ 7]   1 : RETURN_VAL
                                      6: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) [K6:40] () ]
[ 6]  37 : MAKE_LABEL	"K7"
                                      6: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) [K6:40] () ]
[ 6]  38 : GLOBAL_GET	list
                                      7: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) [K6:40] () [Closure] ]
[ 7]  39 : JMP_CLOSURE	1
                                      6: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) [K6:40] () ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) [K6:40] (()) ]
[ 6]   1 : RETURN_VAL
                                      5: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) (()) ]
[ 5]  40 : MAKE_LABEL	"K6"
                                      5: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) (()) ]
[ 5]  41 : LOCAL_GET	0	1	; core:body
                                      6: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) (()) ((core:+ foo:x foo:y)) ]
[ 6]  42 : GLOBAL_GET	append
                                      7: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) (()) ((core:+ foo:x foo:y)) [Closure] ]
[ 7]  43 : JMP_CLOSURE	3
                                      6: [ core:let ((foo:y foo:x)) [K4:44] (core:let*) (()) ((core:+ foo:x foo:y)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ core:let ((foo:y foo:x)) [K4:44] (core:let* () (core:+ foo:x foo:y)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:let ((foo:y foo:x)) (core:let* () (core:+ foo:x foo:y)) ]
[ 3]  44 : MAKE_LABEL	"K4"
                                      3: [ core:let ((foo:y foo:x)) (core:let* () (core:+ foo:x foo:y)) ]
[ 3]  45 : GLOBAL_GET	list
                                      4: [ core:let ((foo:y foo:x)) (core:let* () (core:+ foo:x foo:y)) [Closure] ]
[ 4]  46 : JMP_CLOSURE	3
                                      3: [ core:let ((foo:y foo:x)) (core:let* () (core:+ foo:x foo:y)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:let ((foo:y foo:x)) (core:let* () (core:+ foo:x foo:y))) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:bindings) (append (list (quote begin)) core:body) (list (quote core:let) (list (core:car core:bindings)) (append (list (quote core:let*)) (list (core:cdr core:bindings)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:bindings
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L8"	15
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	begin
	9	GLOBAL_GET	list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	LOCAL_GET	0	1	; core:body
	13	GLOBAL_GET	append
	14	JMP_CLOSURE	2
15	MAKE_LABEL	"L8"
	16	PUSH_CONST	core:let
	17	SAVE_RETURN	"K2"	25
	18	SAVE_RETURN	"K3"	22
	19	LOCAL_GET	0	0	; core:bindings
	20	GLOBAL_GET	core:car
	21	JMP_CLOSURE	1
22	MAKE_LABEL	"K3"
	23	GLOBAL_GET	list
	24	JMP_CLOSURE	1
25	MAKE_LABEL	"K2"
	26	SAVE_RETURN	"K4"	44
	27	SAVE_RETURN	"K5"	31
	28	PUSH_CONST	core:let*
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	1
31	MAKE_LABEL	"K5"
	32	SAVE_RETURN	"K6"	40
	33	SAVE_RETURN	"K7"	37
	34	LOCAL_GET	0	0	; core:bindings
	35	GLOBAL_GET	core:cdr
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K7"
	38	GLOBAL_GET	list
	39	JMP_CLOSURE	1
40	MAKE_LABEL	"K6"
	41	LOCAL_GET	0	1	; core:body
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	3
44	MAKE_LABEL	"K4"
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	3

                                      2: [ () (core:+ foo:x foo:y) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:bindings
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L8"	15
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1:11] ]
[ 1]   8 : PUSH_CONST	begin
                                      2: [ [K1:11] begin ]
[ 2]   9 : GLOBAL_GET	list
                                      3: [ [K1:11] begin [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1:11] begin ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K1:11] (begin) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (begin) ]
[ 1]  11 : MAKE_LABEL	"K1"
                                      1: [ (begin) ]
[ 1]  12 : LOCAL_GET	0	1	; core:body
                                      2: [ (begin) ((core:+ foo:x foo:y)) ]
[ 2]  13 : GLOBAL_GET	append
                                      3: [ (begin) ((core:+ foo:x foo:y)) [Closure] ]
[ 3]  14 : JMP_CLOSURE	2
                                      2: [ (begin) ((core:+ foo:x foo:y)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (begin (core:+ foo:x foo:y)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; core:bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; core:body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; core:bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((foo:x 1)) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; core:bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1)) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1)) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (foo:x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((foo:x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x)) ]
[ 4]  18 : LOCAL_GET	0	1	; core:body
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x)) ((core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y)))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((foo:x)) ((core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y)))) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x)) ((core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y)))) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y)))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y)))) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y)))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; core:bindings
                                      4: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) [K5:30] [Closure] ((foo:x 1)) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) [K5:30] [Closure] ((foo:x 1)) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) [K5:30] [Closure] ((foo:x 1)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) [K5:30] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) (1) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) (1) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) (1) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))) (1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y)))) 1) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; core:bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; core:body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; core:bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((foo:y foo:x)) (begin (core:+ foo:x foo:y)) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; core:bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:y foo:x)) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:y foo:x)) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:y foo:x)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:y foo:x) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (foo:y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:y) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:y) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((foo:y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:y)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:y)) ]
[ 4]  18 : LOCAL_GET	0	1	; core:body
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:y)) ((begin (core:+ foo:x foo:y))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((foo:y)) ((begin (core:+ foo:x foo:y))) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:y)) ((begin (core:+ foo:x foo:y))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (foo:y) (begin (core:+ foo:x foo:y))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (foo:y) (begin (core:+ foo:x foo:y))) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (foo:y) (begin (core:+ foo:x foo:y))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (foo:y) (begin (core:+ foo:x foo:y))) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (foo:y) (begin (core:+ foo:x foo:y))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; core:bindings
                                      4: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) [K5:30] [Closure] ((foo:y foo:x)) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) [K5:30] [Closure] ((foo:y foo:x)) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) [K5:30] [Closure] ((foo:y foo:x)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:y foo:x) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ foo:x ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) [K5:30] (foo:x) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) (foo:x) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) (foo:x) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) (foo:x) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y)))) (foo:x) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (foo:y) (begin (core:+ foo:x foo:y))) foo:x) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; foo:x
		2	MAKE_CLOSURE	[Closure]	; ((begin (core:+ foo:x foo:y)))
			0	MAKE_ENV	1
			1	LOCAL_GET	1	0	; foo:x
			2	LOCAL_GET	0	0	; foo:y
			3	GLOBAL_GET	core:+
			4	JMP_CLOSURE	2
		3	JMP_CLOSURE	1
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:let* ((foo:x 1) (foo:y foo:x)) (core:+ foo:x foo:y)))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; foo:x
		2	MAKE_CLOSURE	[Closure]	; ((begin (core:+ foo:x foo:y)))
			0	MAKE_ENV	1
			1	LOCAL_GET	1	0	; foo:x
			2	LOCAL_GET	0	0	; foo:y
			3	GLOBAL_GET	core:+
			4	JMP_CLOSURE	2
		3	JMP_CLOSURE	1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((core:let ((foo:y foo:x)) (begin (core:+ foo:x foo:y))))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; foo:x
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((begin (core:+ foo:x foo:y)))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : LOCAL_GET	1	0	; foo:x
                                      1: [ 1 ]
[ 1]   2 : LOCAL_GET	0	0	; foo:y
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	core:+
                                      3: [ 1 1 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (let ((x 1)) (let ((y x)) (+ x y)))
==>  (core:let ((foo:x 1)) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))
Parsed:  (core:let ((foo:x 1)) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; core:bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; core:body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; core:bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((foo:x 1)) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; core:bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1)) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1)) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 1)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:x 1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (foo:x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((foo:x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x)) ]
[ 4]  18 : LOCAL_GET	0	1	; core:body
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x)) ((core:let ((foo:y foo:x)) (core:+ foo:x foo:y))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((foo:x)) ((core:let ((foo:y foo:x)) (core:+ foo:x foo:y))) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x)) ((core:let ((foo:y foo:x)) (core:+ foo:x foo:y))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y))) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y))) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; core:bindings
                                      4: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) [K5:30] [Closure] ((foo:x 1)) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) [K5:30] [Closure] ((foo:x 1)) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) [K5:30] [Closure] ((foo:x 1)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:x 1) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) [K5:30] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) (1) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) (1) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) (1) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))) (1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (foo:x) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y))) 1) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; core:bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; core:body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; core:bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((foo:y foo:x)) (core:+ foo:x foo:y) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; core:bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:y foo:x)) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:y foo:x)) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:y foo:x)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:y foo:x) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (foo:y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:y) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:y) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((foo:y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:y)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:y)) ]
[ 4]  18 : LOCAL_GET	0	1	; core:body
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:y)) ((core:+ foo:x foo:y)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((foo:y)) ((core:+ foo:x foo:y)) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:y)) ((core:+ foo:x foo:y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (foo:y) (core:+ foo:x foo:y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (foo:y) (core:+ foo:x foo:y)) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (foo:y) (core:+ foo:x foo:y)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (foo:y) (core:+ foo:x foo:y)) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (foo:y) (core:+ foo:x foo:y)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (foo:y) (core:+ foo:x foo:y))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:y) (core:+ foo:x foo:y))) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (foo:y) (core:+ foo:x foo:y))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (foo:y) (core:+ foo:x foo:y))) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (foo:y) (core:+ foo:x foo:y))) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; core:bindings
                                      4: [ ((lambda (foo:y) (core:+ foo:x foo:y))) [K5:30] [Closure] ((foo:y foo:x)) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (foo:y) (core:+ foo:x foo:y))) [K5:30] [Closure] ((foo:y foo:x)) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (foo:y) (core:+ foo:x foo:y))) [K5:30] [Closure] ((foo:y foo:x)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:y foo:x) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ foo:x ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (foo:y) (core:+ foo:x foo:y))) [K5:30] (foo:x) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (foo:y) (core:+ foo:x foo:y))) (foo:x) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (foo:y) (core:+ foo:x foo:y))) (foo:x) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (foo:y) (core:+ foo:x foo:y))) (foo:x) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (foo:y) (core:+ foo:x foo:y))) (foo:x) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (foo:y) (core:+ foo:x foo:y)) foo:x) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; foo:x
		2	MAKE_CLOSURE	[Closure]	; ((core:+ foo:x foo:y))
			0	MAKE_ENV	1
			1	LOCAL_GET	1	0	; foo:x
			2	LOCAL_GET	0	0	; foo:y
			3	GLOBAL_GET	core:+
			4	JMP_CLOSURE	2
		3	JMP_CLOSURE	1
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:let ((foo:x 1)) (core:let ((foo:y foo:x)) (core:+ foo:x foo:y))))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	MAKE_CLOSURE	[Closure]	; ((core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; foo:x
		2	MAKE_CLOSURE	[Closure]	; ((core:+ foo:x foo:y))
			0	MAKE_ENV	1
			1	LOCAL_GET	1	0	; foo:x
			2	LOCAL_GET	0	0	; foo:y
			3	GLOBAL_GET	core:+
			4	JMP_CLOSURE	2
		3	JMP_CLOSURE	1
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((core:let ((foo:y foo:x)) (core:+ foo:x foo:y)))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; foo:x
                                      1: [ 1 ]
[ 1]   2 : MAKE_CLOSURE	[Closure]	; ((core:+ foo:x foo:y))
                                      2: [ 1 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 1 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : LOCAL_GET	1	0	; foo:x
                                      1: [ 1 ]
[ 1]   2 : LOCAL_GET	0	0	; foo:y
                                      2: [ 1 1 ]
[ 2]   3 : GLOBAL_GET	core:+
                                      3: [ 1 1 [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ 1 1 ]
[ 2]   0 : CALL_PRIMOP	"+"
                                      1: [ 2 ]
[ 1]   1 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (letrec ((x (lambda () y)) (y 1)) (x))
==>  (core:letrec ((foo:x (lambda () foo:y)) (foo:y 1)) (foo:x))
Parsed:  (core:letrec ((foo:x (lambda () foo:y)) (foo:y 1)) (foo:x))
Executing:  lambda: ((append (list (quote core:let)) (list (core:map (lambda (core:v) (core:list (core:car core:v) core:nil)) core:bindings)) (core:map (lambda (core:v) (append (list (quote set!)) core:v)) core:bindings) core:body))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	core:let
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	15
	7	SAVE_RETURN	"K2"	12
	8	MAKE_CLOSURE	[Closure]	; ((core:list (core:car core:v) core:nil))
		0	MAKE_ENV	1
		1	SAVE_RETURN	"K3"	5
		2	LOCAL_GET	0	0	; core:v
		3	GLOBAL_GET	core:car
		4	JMP_CLOSURE	1
	5	MAKE_LABEL	"K3"
		6	GLOBAL_GET	core:nil
		7	GLOBAL_GET	core:list
		8	JMP_CLOSURE	2
	9	LOCAL_GET	0	0	; core:bindings
	10	GLOBAL_GET	core:map
	11	JMP_CLOSURE	2
12	MAKE_LABEL	"K2"
	13	GLOBAL_GET	list
	14	JMP_CLOSURE	1
15	MAKE_LABEL	"K1"
	16	SAVE_RETURN	"K4"	21
	17	MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) core:v))
		0	MAKE_ENV	1
		1	SAVE_RETURN	"K5"	5
		2	PUSH_CONST	set!
		3	GLOBAL_GET	list
		4	JMP_CLOSURE	1
	5	MAKE_LABEL	"K5"
		6	LOCAL_GET	0	0	; core:v
		7	GLOBAL_GET	append
		8	JMP_CLOSURE	2
	18	LOCAL_GET	0	0	; core:bindings
	19	GLOBAL_GET	core:map
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"K4"
	22	LOCAL_GET	0	1	; core:body
	23	GLOBAL_GET	append
	24	JMP_CLOSURE	4

                                      2: [ ((foo:x (lambda () foo:y)) (foo:y 1)) (foo:x) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : PUSH_CONST	core:let
                                      2: [ [K0:5] core:let ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [K0:5] core:let [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] core:let ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:5] (core:let) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (core:let) ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ (core:let) ]
[ 1]   6 : SAVE_RETURN	"K1"	15
                                      2: [ (core:let) [K1:15] ]
[ 2]   7 : SAVE_RETURN	"K2"	12
                                      3: [ (core:let) [K1:15] [K2:12] ]
[ 3]   8 : MAKE_CLOSURE	[Closure]	; ((core:list (core:car core:v) core:nil))
                                      4: [ (core:let) [K1:15] [K2:12] [Closure] ]
[ 4]   9 : LOCAL_GET	0	0	; core:bindings
                                      5: [ (core:let) [K1:15] [K2:12] [Closure] ((foo:x (lambda () foo:y)) (foo:y 1)) ]
[ 5]  10 : GLOBAL_GET	core:map
                                      6: [ (core:let) [K1:15] [K2:12] [Closure] ((foo:x (lambda () foo:y)) (foo:y 1)) [Closure] ]
[ 6]  11 : JMP_CLOSURE	2
                                      5: [ (core:let) [K1:15] [K2:12] [Closure] ((foo:x (lambda () foo:y)) (foo:y 1)) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  lambda: ((core:list (core:car core:v) core:nil))
	0	MAKE_ENV	1
	1	SAVE_RETURN	"K3"	5
	2	LOCAL_GET	0	0	; core:v
	3	GLOBAL_GET	core:car
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K3"
	6	GLOBAL_GET	core:nil
	7	GLOBAL_GET	core:list
	8	JMP_CLOSURE	2

                                      1: [ (foo:x (lambda () foo:y)) ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K3"	5
                                      1: [ [K3:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:v
                                      2: [ [K3:5] (foo:x (lambda () foo:y)) ]
[ 2]   3 : GLOBAL_GET	core:car
                                      3: [ [K3:5] (foo:x (lambda () foo:y)) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K3:5] (foo:x (lambda () foo:y)) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [K3:5] foo:x ]
[ 2]   1 : RETURN_VAL
                                      1: [ foo:x ]
[ 1]   5 : MAKE_LABEL	"K3"
                                      1: [ foo:x ]
[ 1]   6 : GLOBAL_GET	core:nil
                                      2: [ foo:x () ]
[ 2]   7 : GLOBAL_GET	core:list
                                      3: [ foo:x () [Closure] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ foo:x () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (foo:x ()) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((core:list (core:car core:v) core:nil))
	0	MAKE_ENV	1
	1	SAVE_RETURN	"K3"	5
	2	LOCAL_GET	0	0	; core:v
	3	GLOBAL_GET	core:car
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K3"
	6	GLOBAL_GET	core:nil
	7	GLOBAL_GET	core:list
	8	JMP_CLOSURE	2

                                      1: [ (foo:y 1) ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K3"	5
                                      1: [ [K3:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:v
                                      2: [ [K3:5] (foo:y 1) ]
[ 2]   3 : GLOBAL_GET	core:car
                                      3: [ [K3:5] (foo:y 1) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K3:5] (foo:y 1) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [K3:5] foo:y ]
[ 2]   1 : RETURN_VAL
                                      1: [ foo:y ]
[ 1]   5 : MAKE_LABEL	"K3"
                                      1: [ foo:y ]
[ 1]   6 : GLOBAL_GET	core:nil
                                      2: [ foo:y () ]
[ 2]   7 : GLOBAL_GET	core:list
                                      3: [ foo:y () [Closure] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ foo:y () ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (foo:y ()) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (core:let) [K1:15] [K2:12] ((foo:x ()) (foo:y ())) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (core:let) [K1:15] ((foo:x ()) (foo:y ())) ]
[ 3]  12 : MAKE_LABEL	"K2"
                                      3: [ (core:let) [K1:15] ((foo:x ()) (foo:y ())) ]
[ 3]  13 : GLOBAL_GET	list
                                      4: [ (core:let) [K1:15] ((foo:x ()) (foo:y ())) [Closure] ]
[ 4]  14 : JMP_CLOSURE	1
                                      3: [ (core:let) [K1:15] ((foo:x ()) (foo:y ())) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (core:let) [K1:15] (((foo:x ()) (foo:y ()))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (core:let) (((foo:x ()) (foo:y ()))) ]
[ 2]  15 : MAKE_LABEL	"K1"
                                      2: [ (core:let) (((foo:x ()) (foo:y ()))) ]
[ 2]  16 : SAVE_RETURN	"K4"	21
                                      3: [ (core:let) (((foo:x ()) (foo:y ()))) [K4:21] ]
[ 3]  17 : MAKE_CLOSURE	[Closure]	; ((append (list (quote set!)) core:v))
                                      4: [ (core:let) (((foo:x ()) (foo:y ()))) [K4:21] [Closure] ]
[ 4]  18 : LOCAL_GET	0	0	; core:bindings
                                      5: [ (core:let) (((foo:x ()) (foo:y ()))) [K4:21] [Closure] ((foo:x (lambda () foo:y)) (foo:y 1)) ]
[ 5]  19 : GLOBAL_GET	core:map
                                      6: [ (core:let) (((foo:x ()) (foo:y ()))) [K4:21] [Closure] ((foo:x (lambda () foo:y)) (foo:y 1)) [Closure] ]
[ 6]  20 : JMP_CLOSURE	2
                                      5: [ (core:let) (((foo:x ()) (foo:y ()))) [K4:21] [Closure] ((foo:x (lambda () foo:y)) (foo:y 1)) ]
[ 5]   0 : CALL_PRIMOP	"map"
Executing:  lambda: ((append (list (quote set!)) core:v))
	0	MAKE_ENV	1
	1	SAVE_RETURN	"K5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K5"
	6	LOCAL_GET	0	0	; core:v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (foo:x (lambda () foo:y)) ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K5"	5
                                      1: [ [K5:5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [K5:5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [K5:5] set! [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K5:5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K5:5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : MAKE_LABEL	"K5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; core:v
                                      2: [ (set!) (foo:x (lambda () foo:y)) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (foo:x (lambda () foo:y)) [Closure] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (foo:x (lambda () foo:y)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! foo:x (lambda () foo:y)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((append (list (quote set!)) core:v))
	0	MAKE_ENV	1
	1	SAVE_RETURN	"K5"	5
	2	PUSH_CONST	set!
	3	GLOBAL_GET	list
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K5"
	6	LOCAL_GET	0	0	; core:v
	7	GLOBAL_GET	append
	8	JMP_CLOSURE	2

                                      1: [ (foo:y 1) ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K5"	5
                                      1: [ [K5:5] ]
[ 1]   2 : PUSH_CONST	set!
                                      2: [ [K5:5] set! ]
[ 2]   3 : GLOBAL_GET	list
                                      3: [ [K5:5] set! [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K5:5] set! ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K5:5] (set!) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (set!) ]
[ 1]   5 : MAKE_LABEL	"K5"
                                      1: [ (set!) ]
[ 1]   6 : LOCAL_GET	0	0	; core:v
                                      2: [ (set!) (foo:y 1) ]
[ 2]   7 : GLOBAL_GET	append
                                      3: [ (set!) (foo:y 1) [Closure] ]
[ 3]   8 : JMP_CLOSURE	2
                                      2: [ (set!) (foo:y 1) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (set! foo:y 1) ]
[ 1]   1 : RETURN_VAL
                                      4: [ (core:let) (((foo:x ()) (foo:y ()))) [K4:21] ((set! foo:x (lambda () foo:y)) (set! foo:y 1)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (core:let) (((foo:x ()) (foo:y ()))) ((set! foo:x (lambda () foo:y)) (set! foo:y 1)) ]
[ 3]  21 : MAKE_LABEL	"K4"
                                      3: [ (core:let) (((foo:x ()) (foo:y ()))) ((set! foo:x (lambda () foo:y)) (set! foo:y 1)) ]
[ 3]  22 : LOCAL_GET	0	1	; core:body
                                      4: [ (core:let) (((foo:x ()) (foo:y ()))) ((set! foo:x (lambda () foo:y)) (set! foo:y 1)) ((foo:x)) ]
[ 4]  23 : GLOBAL_GET	append
                                      5: [ (core:let) (((foo:x ()) (foo:y ()))) ((set! foo:x (lambda () foo:y)) (set! foo:y 1)) ((foo:x)) [Closure] ]
[ 5]  24 : JMP_CLOSURE	4
                                      4: [ (core:let) (((foo:x ()) (foo:y ()))) ((set! foo:x (lambda () foo:y)) (set! foo:y 1)) ((foo:x)) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (core:let ((foo:x ()) (foo:y ())) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; core:bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; core:body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; core:bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      4: [ ((foo:x ()) (foo:y ())) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x) ]
[ 4]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; core:bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x ()) (foo:y ())) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x ()) (foo:y ())) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x ()) (foo:y ())) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:x ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:x ]
[ 1]   1 : RETURN_VAL
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:y ()) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:y ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (foo:x foo:y) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x foo:y) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x foo:y) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x foo:y) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x foo:y) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((foo:x foo:y)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ]
[ 4]  18 : LOCAL_GET	0	1	; core:body
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ((set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ((set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x)) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x foo:y)) ((set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x)) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x)) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; core:bindings
                                      4: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) [K5:30] [Closure] ((foo:x ()) (foo:y ())) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) [K5:30] [Closure] ((foo:x ()) (foo:y ())) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) [K5:30] [Closure] ((foo:x ()) (foo:y ())) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:x ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:y ()) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ () ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) [K5:30] (() ()) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) (() ()) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) (() ()) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) (() ()) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))) (() ()) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (foo:x foo:y) (set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x)) () ()) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	()
	2	PUSH_CONST	()
	3	MAKE_CLOSURE	[Closure]	; ((set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))
		0	MAKE_ENV	2
		1	MAKE_CLOSURE	[Closure]	; (foo:y)
			0	MAKE_ENV	0
			1	LOCAL_GET	1	1	; foo:y
			2	RETURN_VAL
		2	LOCAL_SET	0	0	; foo:x
		3	STACK_POP
		4	PUSH_CONST	1
		5	LOCAL_SET	0	1	; foo:y
		6	STACK_POP
		7	LOCAL_GET	0	0	; foo:x
		8	JMP_CLOSURE	0
	4	JMP_CLOSURE	2

Running...
Executing:  lambda: ((core:letrec ((foo:x (lambda () foo:y)) (foo:y 1)) (foo:x)))
	0	MAKE_ENV	0
	1	PUSH_CONST	()
	2	PUSH_CONST	()
	3	MAKE_CLOSURE	[Closure]	; ((set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))
		0	MAKE_ENV	2
		1	MAKE_CLOSURE	[Closure]	; (foo:y)
			0	MAKE_ENV	0
			1	LOCAL_GET	1	1	; foo:y
			2	RETURN_VAL
		2	LOCAL_SET	0	0	; foo:x
		3	STACK_POP
		4	PUSH_CONST	1
		5	LOCAL_SET	0	1	; foo:y
		6	STACK_POP
		7	LOCAL_GET	0	0	; foo:x
		8	JMP_CLOSURE	0
	4	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	()
                                      1: [ () ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ () () ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; ((set! foo:x (lambda () foo:y)) (set! foo:y 1) (foo:x))
                                      3: [ () () [Closure] ]
[ 3]   4 : JMP_CLOSURE	2
                                      2: [ () () ]
[ 2]   0 : MAKE_ENV	2
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; (foo:y)
                                      1: [ [Closure] ]
[ 1]   2 : LOCAL_SET	0	0	; foo:x
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   5 : LOCAL_SET	0	1	; foo:y
                                      1: [ 1 ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : LOCAL_GET	0	0	; foo:x
                                      1: [ [Closure] ]
[ 1]   8 : JMP_CLOSURE	0
                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : LOCAL_GET	1	1	; foo:y
                                      1: [ 1 ]
[ 1]   2 : RETURN_VAL
test: got "1"  - expected "1"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (let ((x 0)) (define (set v) (set! x v)) (define (get) x)) (set 5) (get))
==>  (begin (core:let ((foo:x 0)) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) (foo:set 5) (foo:get))
Parsed:  (begin (core:let ((foo:x 0)) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) (foo:set 5) (foo:get))
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; core:bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; core:body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; core:bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      3: [ ((foo:x 0)) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x) ]
[ 3]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; core:bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 0)) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 0)) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:x 0)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:x 0) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:x ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (foo:x) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:x) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((foo:x)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:x)) ]
[ 4]  18 : LOCAL_GET	0	1	; core:body
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x)) ((core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((foo:x)) ((core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:x)) ((core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; core:bindings
                                      4: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) [K5:30] [Closure] ((foo:x 0)) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) [K5:30] [Closure] ((foo:x 0)) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) [K5:30] [Closure] ((foo:x 0)) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:x 0) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ 0 ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) [K5:30] (0) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) (0) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) (0) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) (0) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))) (0) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (foo:x) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) 0) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (foo:set core:v) (set! foo:x core:v) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] (foo:set core:v) ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] (foo:set core:v) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (foo:set core:v) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	core:define
                                      1: [ core:define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ core:define [K5:37] ]
[ 2]  34 : LOCAL_GET	0	0	; core:name
                                      3: [ core:define [K5:37] (foo:set core:v) ]
[ 3]  35 : GLOBAL_GET	core:car
                                      4: [ core:define [K5:37] (foo:set core:v) [Closure] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ core:define [K5:37] (foo:set core:v) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ core:define [K5:37] foo:set ]
[ 3]   1 : RETURN_VAL
                                      2: [ core:define foo:set ]
[ 2]  37 : MAKE_LABEL	"K5"
                                      2: [ core:define foo:set ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ core:define foo:set [K6:56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ core:define foo:set [K6:56] [K7:43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ core:define foo:set [K6:56] [K7:43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ core:define foo:set [K6:56] [K7:43] lambda [Closure] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ core:define foo:set [K6:56] [K7:43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ core:define foo:set [K6:56] [K7:43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ core:define foo:set [K6:56] (lambda) ]
[ 4]  43 : MAKE_LABEL	"K7"
                                      4: [ core:define foo:set [K6:56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ core:define foo:set [K6:56] (lambda) [K8:52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ core:define foo:set [K6:56] (lambda) [K8:52] [K9:49] ]
[ 6]  46 : LOCAL_GET	0	0	; core:name
                                      7: [ core:define foo:set [K6:56] (lambda) [K8:52] [K9:49] (foo:set core:v) ]
[ 7]  47 : GLOBAL_GET	core:cdr
                                      8: [ core:define foo:set [K6:56] (lambda) [K8:52] [K9:49] (foo:set core:v) [Closure] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ core:define foo:set [K6:56] (lambda) [K8:52] [K9:49] (foo:set core:v) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ core:define foo:set [K6:56] (lambda) [K8:52] [K9:49] (core:v) ]
[ 7]   1 : RETURN_VAL
                                      6: [ core:define foo:set [K6:56] (lambda) [K8:52] (core:v) ]
[ 6]  49 : MAKE_LABEL	"K9"
                                      6: [ core:define foo:set [K6:56] (lambda) [K8:52] (core:v) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ core:define foo:set [K6:56] (lambda) [K8:52] (core:v) [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ core:define foo:set [K6:56] (lambda) [K8:52] (core:v) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ core:define foo:set [K6:56] (lambda) [K8:52] ((core:v)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ core:define foo:set [K6:56] (lambda) ((core:v)) ]
[ 5]  52 : MAKE_LABEL	"K8"
                                      5: [ core:define foo:set [K6:56] (lambda) ((core:v)) ]
[ 5]  53 : LOCAL_GET	0	1	; core:body
                                      6: [ core:define foo:set [K6:56] (lambda) ((core:v)) ((set! foo:x core:v)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ core:define foo:set [K6:56] (lambda) ((core:v)) ((set! foo:x core:v)) [Closure] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ core:define foo:set [K6:56] (lambda) ((core:v)) ((set! foo:x core:v)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ core:define foo:set [K6:56] (lambda (core:v) (set! foo:x core:v)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:define foo:set (lambda (core:v) (set! foo:x core:v)) ]
[ 3]  56 : MAKE_LABEL	"K6"
                                      3: [ core:define foo:set (lambda (core:v) (set! foo:x core:v)) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ core:define foo:set (lambda (core:v) (set! foo:x core:v)) [Closure] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ core:define foo:set (lambda (core:v) (set! foo:x core:v)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:define foo:set (lambda (core:v) (set! foo:x core:v))) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ foo:set (lambda (core:v) (set! foo:x core:v)) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] foo:set ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] foo:set [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] foo:set ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] foo:set ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] foo:set [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] foo:set ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (foo:set) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (foo:set) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (foo:set) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (foo:set) ((lambda (core:v) (set! foo:x core:v))) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (foo:set) ((lambda (core:v) (set! foo:x core:v))) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (foo:set) ((lambda (core:v) (set! foo:x core:v))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! foo:set (lambda (core:v) (set! foo:x core:v))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) [K4:28] quote foo:set ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) [K4:28] quote foo:set [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) [K4:28] quote foo:set ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) [K4:28] (quote foo:set) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) (quote foo:set) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) (quote foo:set) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) (quote foo:set) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) (quote foo:set) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! foo:set (lambda (core:v) (set! foo:x core:v))) (quote foo:set)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (foo:get) foo:x ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] (foo:get) ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] (foo:get) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (foo:get) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	core:define
                                      1: [ core:define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ core:define [K5:37] ]
[ 2]  34 : LOCAL_GET	0	0	; core:name
                                      3: [ core:define [K5:37] (foo:get) ]
[ 3]  35 : GLOBAL_GET	core:car
                                      4: [ core:define [K5:37] (foo:get) [Closure] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ core:define [K5:37] (foo:get) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ core:define [K5:37] foo:get ]
[ 3]   1 : RETURN_VAL
                                      2: [ core:define foo:get ]
[ 2]  37 : MAKE_LABEL	"K5"
                                      2: [ core:define foo:get ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ core:define foo:get [K6:56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ core:define foo:get [K6:56] [K7:43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ core:define foo:get [K6:56] [K7:43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ core:define foo:get [K6:56] [K7:43] lambda [Closure] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ core:define foo:get [K6:56] [K7:43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ core:define foo:get [K6:56] [K7:43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ core:define foo:get [K6:56] (lambda) ]
[ 4]  43 : MAKE_LABEL	"K7"
                                      4: [ core:define foo:get [K6:56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ core:define foo:get [K6:56] (lambda) [K8:52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ core:define foo:get [K6:56] (lambda) [K8:52] [K9:49] ]
[ 6]  46 : LOCAL_GET	0	0	; core:name
                                      7: [ core:define foo:get [K6:56] (lambda) [K8:52] [K9:49] (foo:get) ]
[ 7]  47 : GLOBAL_GET	core:cdr
                                      8: [ core:define foo:get [K6:56] (lambda) [K8:52] [K9:49] (foo:get) [Closure] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ core:define foo:get [K6:56] (lambda) [K8:52] [K9:49] (foo:get) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ core:define foo:get [K6:56] (lambda) [K8:52] [K9:49] () ]
[ 7]   1 : RETURN_VAL
                                      6: [ core:define foo:get [K6:56] (lambda) [K8:52] () ]
[ 6]  49 : MAKE_LABEL	"K9"
                                      6: [ core:define foo:get [K6:56] (lambda) [K8:52] () ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ core:define foo:get [K6:56] (lambda) [K8:52] () [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ core:define foo:get [K6:56] (lambda) [K8:52] () ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ core:define foo:get [K6:56] (lambda) [K8:52] (()) ]
[ 6]   1 : RETURN_VAL
                                      5: [ core:define foo:get [K6:56] (lambda) (()) ]
[ 5]  52 : MAKE_LABEL	"K8"
                                      5: [ core:define foo:get [K6:56] (lambda) (()) ]
[ 5]  53 : LOCAL_GET	0	1	; core:body
                                      6: [ core:define foo:get [K6:56] (lambda) (()) (foo:x) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ core:define foo:get [K6:56] (lambda) (()) (foo:x) [Closure] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ core:define foo:get [K6:56] (lambda) (()) (foo:x) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ core:define foo:get [K6:56] (lambda () foo:x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:define foo:get (lambda () foo:x) ]
[ 3]  56 : MAKE_LABEL	"K6"
                                      3: [ core:define foo:get (lambda () foo:x) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ core:define foo:get (lambda () foo:x) [Closure] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ core:define foo:get (lambda () foo:x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:define foo:get (lambda () foo:x)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ foo:get (lambda () foo:x) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] foo:get ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] foo:get [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] foo:get ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] foo:get ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] foo:get [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] foo:get ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (foo:get) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (foo:get) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (foo:get) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (foo:get) ((lambda () foo:x)) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (foo:get) ((lambda () foo:x)) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (foo:get) ((lambda () foo:x)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! foo:get (lambda () foo:x)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! foo:get (lambda () foo:x)) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! foo:get (lambda () foo:x)) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! foo:get (lambda () foo:x)) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! foo:get (lambda () foo:x)) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! foo:get (lambda () foo:x)) [K4:28] quote foo:get ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! foo:get (lambda () foo:x)) [K4:28] quote foo:get [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! foo:get (lambda () foo:x)) [K4:28] quote foo:get ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! foo:get (lambda () foo:x)) [K4:28] (quote foo:get) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! foo:get (lambda () foo:x)) (quote foo:get) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! foo:get (lambda () foo:x)) (quote foo:get) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! foo:get (lambda () foo:x)) (quote foo:get) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! foo:get (lambda () foo:x)) (quote foo:get) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! foo:get (lambda () foo:x)) (quote foo:get)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	0
	3	MAKE_CLOSURE	[Closure]	; ((core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))
		0	MAKE_ENV	1
		1	MAKE_CLOSURE	[Closure]	; ((set! foo:x core:v))
			0	MAKE_ENV	1
			1	LOCAL_GET	0	0	; core:v
			2	LOCAL_SET	1	0	; foo:x
			3	RETURN_VAL
		2	GLOBAL_SET	foo:set
		3	STACK_POP
		4	MAKE_CLOSURE	[Closure]	; (foo:x)
			0	MAKE_ENV	0
			1	LOCAL_GET	1	0	; foo:x
			2	RETURN_VAL
		5	GLOBAL_SET	foo:get
		6	STACK_POP
		7	PUSH_CONST	foo:get
		8	RETURN_VAL
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	STACK_POP
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	5
	9	GLOBAL_GET	foo:set
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	STACK_POP
	13	GLOBAL_GET	foo:get
	14	JMP_CLOSURE	0

Running...
Executing:  lambda: ((begin (core:let ((foo:x 0)) (core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x)) (foo:set 5) (foo:get)))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	0
	3	MAKE_CLOSURE	[Closure]	; ((core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))
		0	MAKE_ENV	1
		1	MAKE_CLOSURE	[Closure]	; ((set! foo:x core:v))
			0	MAKE_ENV	1
			1	LOCAL_GET	0	0	; core:v
			2	LOCAL_SET	1	0	; foo:x
			3	RETURN_VAL
		2	GLOBAL_SET	foo:set
		3	STACK_POP
		4	MAKE_CLOSURE	[Closure]	; (foo:x)
			0	MAKE_ENV	0
			1	LOCAL_GET	1	0	; foo:x
			2	RETURN_VAL
		5	GLOBAL_SET	foo:get
		6	STACK_POP
		7	PUSH_CONST	foo:get
		8	RETURN_VAL
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	STACK_POP
	7	SAVE_RETURN	"K1"	11
	8	PUSH_CONST	5
	9	GLOBAL_GET	foo:set
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	STACK_POP
	13	GLOBAL_GET	foo:get
	14	JMP_CLOSURE	0

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : PUSH_CONST	0
                                      2: [ [K0:5] 0 ]
[ 2]   3 : MAKE_CLOSURE	[Closure]	; ((core:define (foo:set core:v) (set! foo:x core:v)) (core:define (foo:get) foo:x))
                                      3: [ [K0:5] 0 [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] 0 ]
[ 2]   0 : MAKE_ENV	1
                                      1: [ [K0:5] ]
[ 1]   1 : MAKE_CLOSURE	[Closure]	; ((set! foo:x core:v))
                                      2: [ [K0:5] [Closure] ]
[ 2]   2 : GLOBAL_SET	foo:set
                                      2: [ [K0:5] [Closure] ]
[ 2]   3 : STACK_POP
                                      1: [ [K0:5] ]
[ 1]   4 : MAKE_CLOSURE	[Closure]	; (foo:x)
                                      2: [ [K0:5] [Closure] ]
[ 2]   5 : GLOBAL_SET	foo:get
                                      2: [ [K0:5] [Closure] ]
[ 2]   6 : STACK_POP
                                      1: [ [K0:5] ]
[ 1]   7 : PUSH_CONST	foo:get
                                      2: [ [K0:5] foo:get ]
[ 2]   8 : RETURN_VAL
                                      1: [ foo:get ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ foo:get ]
[ 1]   6 : STACK_POP
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1:11] ]
[ 1]   8 : PUSH_CONST	5
                                      2: [ [K1:11] 5 ]
[ 2]   9 : GLOBAL_GET	foo:set
                                      3: [ [K1:11] 5 [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1:11] 5 ]
[ 2]   0 : MAKE_ENV	1
                                      1: [ [K1:11] ]
[ 1]   1 : LOCAL_GET	0	0	; core:v
                                      2: [ [K1:11] 5 ]
[ 2]   2 : LOCAL_SET	1	0	; foo:x
                                      2: [ [K1:11] 5 ]
[ 2]   3 : RETURN_VAL
                                      1: [ 5 ]
[ 1]  11 : MAKE_LABEL	"K1"
                                      1: [ 5 ]
[ 1]  12 : STACK_POP
                                      0: [  ]
[ 0]  13 : GLOBAL_GET	foo:get
                                      1: [ [Closure] ]
[ 1]  14 : JMP_CLOSURE	0
                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : LOCAL_GET	1	0	; foo:x
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (define x 5) x
==>  (core:define foo:x 5)
Parsed:  (core:define foo:x 5)
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ foo:x 5 ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] foo:x ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] foo:x [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] foo:x ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] foo:x ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] foo:x [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] foo:x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (foo:x) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (foo:x) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (foo:x) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (foo:x) (5) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (foo:x) (5) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (foo:x) (5) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! foo:x 5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! foo:x 5) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! foo:x 5) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! foo:x 5) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! foo:x 5) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! foo:x 5) [K4:28] quote foo:x ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! foo:x 5) [K4:28] quote foo:x [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! foo:x 5) [K4:28] quote foo:x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! foo:x 5) [K4:28] (quote foo:x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! foo:x 5) (quote foo:x) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! foo:x 5) (quote foo:x) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! foo:x 5) (quote foo:x) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! foo:x 5) (quote foo:x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! foo:x 5) (quote foo:x)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	GLOBAL_SET	foo:x
	3	STACK_POP
	4	PUSH_CONST	foo:x
	5	RETURN_VAL

Running...
Executing:  lambda: ((core:define foo:x 5))
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	GLOBAL_SET	foo:x
	3	STACK_POP
	4	PUSH_CONST	foo:x
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_SET	foo:x
                                      1: [ 5 ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	foo:x
                                      1: [ foo:x ]
[ 1]   5 : RETURN_VAL
test: got "foo:x"  - expected "foo:x"
==>  foo:x
Parsed:  foo:x
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	foo:x
	2	RETURN_VAL

Running...
Executing:  lambda: (foo:x)
	0	MAKE_ENV	0
	1	GLOBAL_GET	foo:x
	2	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	foo:x
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (define (x y) y) (x 5)
==>  (core:define (foo:x foo:y) foo:y)
Parsed:  (core:define (foo:x foo:y) foo:y)
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ (foo:x foo:y) foo:y ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] (foo:x foo:y) ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] (foo:x foo:y) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (foo:x foo:y) ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]  31 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  32 : PUSH_CONST	core:define
                                      1: [ core:define ]
[ 1]  33 : SAVE_RETURN	"K5"	37
                                      2: [ core:define [K5:37] ]
[ 2]  34 : LOCAL_GET	0	0	; core:name
                                      3: [ core:define [K5:37] (foo:x foo:y) ]
[ 3]  35 : GLOBAL_GET	core:car
                                      4: [ core:define [K5:37] (foo:x foo:y) [Closure] ]
[ 4]  36 : JMP_CLOSURE	1
                                      3: [ core:define [K5:37] (foo:x foo:y) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ core:define [K5:37] foo:x ]
[ 3]   1 : RETURN_VAL
                                      2: [ core:define foo:x ]
[ 2]  37 : MAKE_LABEL	"K5"
                                      2: [ core:define foo:x ]
[ 2]  38 : SAVE_RETURN	"K6"	56
                                      3: [ core:define foo:x [K6:56] ]
[ 3]  39 : SAVE_RETURN	"K7"	43
                                      4: [ core:define foo:x [K6:56] [K7:43] ]
[ 4]  40 : PUSH_CONST	lambda
                                      5: [ core:define foo:x [K6:56] [K7:43] lambda ]
[ 5]  41 : GLOBAL_GET	list
                                      6: [ core:define foo:x [K6:56] [K7:43] lambda [Closure] ]
[ 6]  42 : JMP_CLOSURE	1
                                      5: [ core:define foo:x [K6:56] [K7:43] lambda ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ core:define foo:x [K6:56] [K7:43] (lambda) ]
[ 5]   1 : RETURN_VAL
                                      4: [ core:define foo:x [K6:56] (lambda) ]
[ 4]  43 : MAKE_LABEL	"K7"
                                      4: [ core:define foo:x [K6:56] (lambda) ]
[ 4]  44 : SAVE_RETURN	"K8"	52
                                      5: [ core:define foo:x [K6:56] (lambda) [K8:52] ]
[ 5]  45 : SAVE_RETURN	"K9"	49
                                      6: [ core:define foo:x [K6:56] (lambda) [K8:52] [K9:49] ]
[ 6]  46 : LOCAL_GET	0	0	; core:name
                                      7: [ core:define foo:x [K6:56] (lambda) [K8:52] [K9:49] (foo:x foo:y) ]
[ 7]  47 : GLOBAL_GET	core:cdr
                                      8: [ core:define foo:x [K6:56] (lambda) [K8:52] [K9:49] (foo:x foo:y) [Closure] ]
[ 8]  48 : JMP_CLOSURE	1
                                      7: [ core:define foo:x [K6:56] (lambda) [K8:52] [K9:49] (foo:x foo:y) ]
[ 7]   0 : CALL_PRIMOP	"cdr"
                                      7: [ core:define foo:x [K6:56] (lambda) [K8:52] [K9:49] (foo:y) ]
[ 7]   1 : RETURN_VAL
                                      6: [ core:define foo:x [K6:56] (lambda) [K8:52] (foo:y) ]
[ 6]  49 : MAKE_LABEL	"K9"
                                      6: [ core:define foo:x [K6:56] (lambda) [K8:52] (foo:y) ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ core:define foo:x [K6:56] (lambda) [K8:52] (foo:y) [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ core:define foo:x [K6:56] (lambda) [K8:52] (foo:y) ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ core:define foo:x [K6:56] (lambda) [K8:52] ((foo:y)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ core:define foo:x [K6:56] (lambda) ((foo:y)) ]
[ 5]  52 : MAKE_LABEL	"K8"
                                      5: [ core:define foo:x [K6:56] (lambda) ((foo:y)) ]
[ 5]  53 : LOCAL_GET	0	1	; core:body
                                      6: [ core:define foo:x [K6:56] (lambda) ((foo:y)) (foo:y) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ core:define foo:x [K6:56] (lambda) ((foo:y)) (foo:y) [Closure] ]
[ 7]  55 : JMP_CLOSURE	3
                                      6: [ core:define foo:x [K6:56] (lambda) ((foo:y)) (foo:y) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      4: [ core:define foo:x [K6:56] (lambda (foo:y) foo:y) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:define foo:x (lambda (foo:y) foo:y) ]
[ 3]  56 : MAKE_LABEL	"K6"
                                      3: [ core:define foo:x (lambda (foo:y) foo:y) ]
[ 3]  57 : GLOBAL_GET	list
                                      4: [ core:define foo:x (lambda (foo:y) foo:y) [Closure] ]
[ 4]  58 : JMP_CLOSURE	3
                                      3: [ core:define foo:x (lambda (foo:y) foo:y) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:define foo:x (lambda (foo:y) foo:y)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:atom? core:name) (list (quote begin) (append (list (quote set!)) (list core:name) core:body) (list (quote quote) core:name)) (list (quote core:define) (core:car core:name) (append (list (quote lambda)) (list (core:cdr core:name)) core:body))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	0	; core:name
	3	GLOBAL_GET	core:atom?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	31
	7	PUSH_CONST	begin
	8	SAVE_RETURN	"K1"	22
	9	SAVE_RETURN	"K2"	13
	10	PUSH_CONST	set!
	11	GLOBAL_GET	list
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K2"
	14	SAVE_RETURN	"K3"	18
	15	LOCAL_GET	0	0	; core:name
	16	GLOBAL_GET	list
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K3"
	19	LOCAL_GET	0	1	; core:body
	20	GLOBAL_GET	append
	21	JMP_CLOSURE	3
22	MAKE_LABEL	"K1"
	23	SAVE_RETURN	"K4"	28
	24	PUSH_CONST	quote
	25	LOCAL_GET	0	0	; core:name
	26	GLOBAL_GET	list
	27	JMP_CLOSURE	2
28	MAKE_LABEL	"K4"
	29	GLOBAL_GET	list
	30	JMP_CLOSURE	3
31	MAKE_LABEL	"L10"
	32	PUSH_CONST	core:define
	33	SAVE_RETURN	"K5"	37
	34	LOCAL_GET	0	0	; core:name
	35	GLOBAL_GET	core:car
	36	JMP_CLOSURE	1
37	MAKE_LABEL	"K5"
	38	SAVE_RETURN	"K6"	56
	39	SAVE_RETURN	"K7"	43
	40	PUSH_CONST	lambda
	41	GLOBAL_GET	list
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	SAVE_RETURN	"K8"	52
	45	SAVE_RETURN	"K9"	49
	46	LOCAL_GET	0	0	; core:name
	47	GLOBAL_GET	core:cdr
	48	JMP_CLOSURE	1
49	MAKE_LABEL	"K9"
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:body
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	3
56	MAKE_LABEL	"K6"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	3

                                      2: [ foo:x (lambda (foo:y) foo:y) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:name
                                      2: [ [K0:5] foo:x ]
[ 2]   3 : GLOBAL_GET	core:atom?
                                      3: [ [K0:5] foo:x [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] foo:x ]
[ 2]   0 : CALL_PRIMOP	"atom?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	31
                                      0: [  ]
[ 0]   7 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]   8 : SAVE_RETURN	"K1"	22
                                      2: [ begin [K1:22] ]
[ 2]   9 : SAVE_RETURN	"K2"	13
                                      3: [ begin [K1:22] [K2:13] ]
[ 3]  10 : PUSH_CONST	set!
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]  11 : GLOBAL_GET	list
                                      5: [ begin [K1:22] [K2:13] set! [Closure] ]
[ 5]  12 : JMP_CLOSURE	1
                                      4: [ begin [K1:22] [K2:13] set! ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ begin [K1:22] [K2:13] (set!) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin [K1:22] (set!) ]
[ 3]  13 : MAKE_LABEL	"K2"
                                      3: [ begin [K1:22] (set!) ]
[ 3]  14 : SAVE_RETURN	"K3"	18
                                      4: [ begin [K1:22] (set!) [K3:18] ]
[ 4]  15 : LOCAL_GET	0	0	; core:name
                                      5: [ begin [K1:22] (set!) [K3:18] foo:x ]
[ 5]  16 : GLOBAL_GET	list
                                      6: [ begin [K1:22] (set!) [K3:18] foo:x [Closure] ]
[ 6]  17 : JMP_CLOSURE	1
                                      5: [ begin [K1:22] (set!) [K3:18] foo:x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ begin [K1:22] (set!) [K3:18] (foo:x) ]
[ 5]   1 : RETURN_VAL
                                      4: [ begin [K1:22] (set!) (foo:x) ]
[ 4]  18 : MAKE_LABEL	"K3"
                                      4: [ begin [K1:22] (set!) (foo:x) ]
[ 4]  19 : LOCAL_GET	0	1	; core:body
                                      5: [ begin [K1:22] (set!) (foo:x) ((lambda (foo:y) foo:y)) ]
[ 5]  20 : GLOBAL_GET	append
                                      6: [ begin [K1:22] (set!) (foo:x) ((lambda (foo:y) foo:y)) [Closure] ]
[ 6]  21 : JMP_CLOSURE	3
                                      5: [ begin [K1:22] (set!) (foo:x) ((lambda (foo:y) foo:y)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ begin [K1:22] (set! foo:x (lambda (foo:y) foo:y)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ begin (set! foo:x (lambda (foo:y) foo:y)) ]
[ 2]  22 : MAKE_LABEL	"K1"
                                      2: [ begin (set! foo:x (lambda (foo:y) foo:y)) ]
[ 2]  23 : SAVE_RETURN	"K4"	28
                                      3: [ begin (set! foo:x (lambda (foo:y) foo:y)) [K4:28] ]
[ 3]  24 : PUSH_CONST	quote
                                      4: [ begin (set! foo:x (lambda (foo:y) foo:y)) [K4:28] quote ]
[ 4]  25 : LOCAL_GET	0	0	; core:name
                                      5: [ begin (set! foo:x (lambda (foo:y) foo:y)) [K4:28] quote foo:x ]
[ 5]  26 : GLOBAL_GET	list
                                      6: [ begin (set! foo:x (lambda (foo:y) foo:y)) [K4:28] quote foo:x [Closure] ]
[ 6]  27 : JMP_CLOSURE	2
                                      5: [ begin (set! foo:x (lambda (foo:y) foo:y)) [K4:28] quote foo:x ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ begin (set! foo:x (lambda (foo:y) foo:y)) [K4:28] (quote foo:x) ]
[ 4]   1 : RETURN_VAL
                                      3: [ begin (set! foo:x (lambda (foo:y) foo:y)) (quote foo:x) ]
[ 3]  28 : MAKE_LABEL	"K4"
                                      3: [ begin (set! foo:x (lambda (foo:y) foo:y)) (quote foo:x) ]
[ 3]  29 : GLOBAL_GET	list
                                      4: [ begin (set! foo:x (lambda (foo:y) foo:y)) (quote foo:x) [Closure] ]
[ 4]  30 : JMP_CLOSURE	3
                                      3: [ begin (set! foo:x (lambda (foo:y) foo:y)) (quote foo:x) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin (set! foo:x (lambda (foo:y) foo:y)) (quote foo:x)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; (foo:y)
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; foo:y
		2	RETURN_VAL
	2	GLOBAL_SET	foo:x
	3	STACK_POP
	4	PUSH_CONST	foo:x
	5	RETURN_VAL

Running...
Executing:  lambda: ((core:define (foo:x foo:y) foo:y))
	0	MAKE_ENV	0
	1	MAKE_CLOSURE	[Closure]	; (foo:y)
		0	MAKE_ENV	1
		1	LOCAL_GET	0	0	; foo:y
		2	RETURN_VAL
	2	GLOBAL_SET	foo:x
	3	STACK_POP
	4	PUSH_CONST	foo:x
	5	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : MAKE_CLOSURE	[Closure]	; (foo:y)
                                      1: [ [Closure] ]
[ 1]   2 : GLOBAL_SET	foo:x
                                      1: [ [Closure] ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : PUSH_CONST	foo:x
                                      1: [ foo:x ]
[ 1]   5 : RETURN_VAL
test: got "foo:x"  - expected "foo:x"
==>  (foo:x 5)
Parsed:  (foo:x 5)
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	GLOBAL_GET	foo:x
	3	JMP_CLOSURE	1

Running...
Executing:  lambda: ((foo:x 5))
	0	MAKE_ENV	0
	1	PUSH_CONST	5
	2	GLOBAL_GET	foo:x
	3	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	5
                                      1: [ 5 ]
[ 1]   2 : GLOBAL_GET	foo:x
                                      2: [ 5 [Closure] ]
[ 2]   3 : JMP_CLOSURE	1
                                      1: [ 5 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : LOCAL_GET	0	0	; foo:y
                                      1: [ 5 ]
[ 1]   2 : RETURN_VAL
test: got "5"  - expected "5"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cons (first '(1 2 3)) (rest '(1 2 3)))
==>  (core:cons (core:first (quote (1 2 3))) (core:rest (quote (1 2 3))))
Parsed:  (core:cons (core:first (quote (1 2 3))) (core:rest (quote (1 2 3))))
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	(1 2 3)
	3	GLOBAL_GET	core:first
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(1 2 3)
	8	GLOBAL_GET	core:rest
	9	JMP_CLOSURE	1
10	MAKE_LABEL	"K1"
	11	GLOBAL_GET	core:cons
	12	JMP_CLOSURE	2

Running...
Executing:  lambda: ((core:cons (core:first (quote (1 2 3))) (core:rest (quote (1 2 3)))))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	(1 2 3)
	3	GLOBAL_GET	core:first
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	SAVE_RETURN	"K1"	10
	7	PUSH_CONST	(1 2 3)
	8	GLOBAL_GET	core:rest
	9	JMP_CLOSURE	1
10	MAKE_LABEL	"K1"
	11	GLOBAL_GET	core:cons
	12	JMP_CLOSURE	2

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : PUSH_CONST	(1 2 3)
                                      2: [ [K0:5] (1 2 3) ]
[ 2]   3 : GLOBAL_GET	core:first
                                      3: [ [K0:5] (1 2 3) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (1 2 3) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [K0:5] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ 1 ]
[ 1]   6 : SAVE_RETURN	"K1"	10
                                      2: [ 1 [K1:10] ]
[ 2]   7 : PUSH_CONST	(1 2 3)
                                      3: [ 1 [K1:10] (1 2 3) ]
[ 3]   8 : GLOBAL_GET	core:rest
                                      4: [ 1 [K1:10] (1 2 3) [Closure] ]
[ 4]   9 : JMP_CLOSURE	1
                                      3: [ 1 [K1:10] (1 2 3) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ 1 [K1:10] (2 3) ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 (2 3) ]
[ 2]  10 : MAKE_LABEL	"K1"
                                      2: [ 1 (2 3) ]
[ 2]  11 : GLOBAL_GET	core:cons
                                      3: [ 1 (2 3) [Closure] ]
[ 3]  12 : JMP_CLOSURE	2
                                      2: [ 1 (2 3) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ (1 2 3) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3)"  - expected "(1 2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (and 1) (and 1 2) (and 1 2 3) (and 1 #f 2 3))
==>  (core:list (core:and 1) (core:and 1 2) (core:and 1 2 3) (core:and 1 #f 2 3))
Parsed:  (core:list (core:and 1) (core:and 1 2) (core:and 1 2 3) (core:and 1 #f 2 3))
Executing:  lambda: ((if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if)) (list core:first) core:rest (list (quote #f))) (list (quote if) core:first (append (list (quote core:and)) core:rest) (quote #f)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; core:rest
	18	GLOBAL_GET	core:length
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	core:=
	23	JMP_CLOSURE	2
24	MAKE_LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; core:first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	MAKE_LABEL	"K5"
	36	LOCAL_GET	0	1	; core:rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	MAKE_LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	MAKE_LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; core:first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	core:and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      1: [ 1 ]
[ 1]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1:11] ]
[ 1]   8 : LOCAL_GET	0	0	; core:first
                                      2: [ [K1:11] 1 ]
[ 2]   9 : GLOBAL_GET	core:list
                                      3: [ [K1:11] 1 [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1:11] 1 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K1:11] (1) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (1) ]
[ 1]  11 : MAKE_LABEL	"K1"
                                      1: [ (1) ]
[ 1]  12 : GLOBAL_GET	core:car
                                      2: [ (1) [Closure] ]
[ 2]  13 : JMP_CLOSURE	1
                                      1: [ (1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if)) (list core:first) core:rest (list (quote #f))) (list (quote if) core:first (append (list (quote core:and)) core:rest) (quote #f)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; core:rest
	18	GLOBAL_GET	core:length
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	core:=
	23	JMP_CLOSURE	2
24	MAKE_LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; core:first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	MAKE_LABEL	"K5"
	36	LOCAL_GET	0	1	; core:rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	MAKE_LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	MAKE_LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; core:first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	core:and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      2: [ 1 2 ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (2) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (2) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (2) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2:24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2:24] [K3:20] ]
[ 2]  17 : LOCAL_GET	0	1	; core:rest
                                      3: [ [K2:24] [K3:20] (2) ]
[ 3]  18 : GLOBAL_GET	core:length
                                      4: [ [K2:24] [K3:20] (2) [Closure] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2:24] [K3:20] (2) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2:24] [K3:20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2:24] 1 ]
[ 2]  20 : MAKE_LABEL	"K3"
                                      2: [ [K2:24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2:24] 1 1 ]
[ 3]  22 : GLOBAL_GET	core:=
                                      4: [ [K2:24] 1 1 [Closure] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2:24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2:24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : MAKE_LABEL	"K2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"K4"	30
                                      1: [ [K4:30] ]
[ 1]  27 : PUSH_CONST	if
                                      2: [ [K4:30] if ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [K4:30] if [Closure] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [K4:30] if ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K4:30] (if) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if) ]
[ 1]  30 : MAKE_LABEL	"K4"
                                      1: [ (if) ]
[ 1]  31 : SAVE_RETURN	"K5"	35
                                      2: [ (if) [K5:35] ]
[ 2]  32 : LOCAL_GET	0	0	; core:first
                                      3: [ (if) [K5:35] 1 ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if) [K5:35] 1 [Closure] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if) [K5:35] 1 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if) [K5:35] (1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if) (1) ]
[ 2]  35 : MAKE_LABEL	"K5"
                                      2: [ (if) (1) ]
[ 2]  36 : LOCAL_GET	0	1	; core:rest
                                      3: [ (if) (1) (2) ]
[ 3]  37 : SAVE_RETURN	"K6"	41
                                      4: [ (if) (1) (2) [K6:41] ]
[ 4]  38 : PUSH_CONST	#f
                                      5: [ (if) (1) (2) [K6:41] #f ]
[ 5]  39 : GLOBAL_GET	list
                                      6: [ (if) (1) (2) [K6:41] #f [Closure] ]
[ 6]  40 : JMP_CLOSURE	1
                                      5: [ (if) (1) (2) [K6:41] #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ (if) (1) (2) [K6:41] (#f) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (if) (1) (2) (#f) ]
[ 4]  41 : MAKE_LABEL	"K6"
                                      4: [ (if) (1) (2) (#f) ]
[ 4]  42 : GLOBAL_GET	append
                                      5: [ (if) (1) (2) (#f) [Closure] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ (if) (1) (2) (#f) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (if 1 2 #f) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if)) (list core:first) core:rest (list (quote #f))) (list (quote if) core:first (append (list (quote core:and)) core:rest) (quote #f)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; core:rest
	18	GLOBAL_GET	core:length
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	core:=
	23	JMP_CLOSURE	2
24	MAKE_LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; core:first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	MAKE_LABEL	"K5"
	36	LOCAL_GET	0	1	; core:rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	MAKE_LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	MAKE_LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; core:first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	core:and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      3: [ 1 2 3 ]
[ 3]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (2 3) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (2 3) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (2 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2:24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2:24] [K3:20] ]
[ 2]  17 : LOCAL_GET	0	1	; core:rest
                                      3: [ [K2:24] [K3:20] (2 3) ]
[ 3]  18 : GLOBAL_GET	core:length
                                      4: [ [K2:24] [K3:20] (2 3) [Closure] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2:24] [K3:20] (2 3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2:24] [K3:20] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2:24] 2 ]
[ 2]  20 : MAKE_LABEL	"K3"
                                      2: [ [K2:24] 2 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2:24] 2 1 ]
[ 3]  22 : GLOBAL_GET	core:=
                                      4: [ [K2:24] 2 1 [Closure] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2:24] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2:24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : MAKE_LABEL	"K2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  44 : MAKE_LABEL	"L9"
                                      0: [  ]
[ 0]  45 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  46 : LOCAL_GET	0	0	; core:first
                                      2: [ if 1 ]
[ 2]  47 : SAVE_RETURN	"K7"	56
                                      3: [ if 1 [K7:56] ]
[ 3]  48 : SAVE_RETURN	"K8"	52
                                      4: [ if 1 [K7:56] [K8:52] ]
[ 4]  49 : PUSH_CONST	core:and
                                      5: [ if 1 [K7:56] [K8:52] core:and ]
[ 5]  50 : GLOBAL_GET	list
                                      6: [ if 1 [K7:56] [K8:52] core:and [Closure] ]
[ 6]  51 : JMP_CLOSURE	1
                                      5: [ if 1 [K7:56] [K8:52] core:and ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if 1 [K7:56] [K8:52] (core:and) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if 1 [K7:56] (core:and) ]
[ 4]  52 : MAKE_LABEL	"K8"
                                      4: [ if 1 [K7:56] (core:and) ]
[ 4]  53 : LOCAL_GET	0	1	; core:rest
                                      5: [ if 1 [K7:56] (core:and) (2 3) ]
[ 5]  54 : GLOBAL_GET	append
                                      6: [ if 1 [K7:56] (core:and) (2 3) [Closure] ]
[ 6]  55 : JMP_CLOSURE	2
                                      5: [ if 1 [K7:56] (core:and) (2 3) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if 1 [K7:56] (core:and 2 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if 1 (core:and 2 3) ]
[ 3]  56 : MAKE_LABEL	"K7"
                                      3: [ if 1 (core:and 2 3) ]
[ 3]  57 : PUSH_CONST	#f
                                      4: [ if 1 (core:and 2 3) #f ]
[ 4]  58 : GLOBAL_GET	list
                                      5: [ if 1 (core:and 2 3) #f [Closure] ]
[ 5]  59 : JMP_CLOSURE	4
                                      4: [ if 1 (core:and 2 3) #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if 1 (core:and 2 3) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if)) (list core:first) core:rest (list (quote #f))) (list (quote if) core:first (append (list (quote core:and)) core:rest) (quote #f)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; core:rest
	18	GLOBAL_GET	core:length
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	core:=
	23	JMP_CLOSURE	2
24	MAKE_LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; core:first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	MAKE_LABEL	"K5"
	36	LOCAL_GET	0	1	; core:rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	MAKE_LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	MAKE_LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; core:first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	core:and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      2: [ 2 3 ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (3) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (3) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2:24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2:24] [K3:20] ]
[ 2]  17 : LOCAL_GET	0	1	; core:rest
                                      3: [ [K2:24] [K3:20] (3) ]
[ 3]  18 : GLOBAL_GET	core:length
                                      4: [ [K2:24] [K3:20] (3) [Closure] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2:24] [K3:20] (3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2:24] [K3:20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2:24] 1 ]
[ 2]  20 : MAKE_LABEL	"K3"
                                      2: [ [K2:24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2:24] 1 1 ]
[ 3]  22 : GLOBAL_GET	core:=
                                      4: [ [K2:24] 1 1 [Closure] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2:24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2:24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : MAKE_LABEL	"K2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"K4"	30
                                      1: [ [K4:30] ]
[ 1]  27 : PUSH_CONST	if
                                      2: [ [K4:30] if ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [K4:30] if [Closure] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [K4:30] if ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K4:30] (if) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if) ]
[ 1]  30 : MAKE_LABEL	"K4"
                                      1: [ (if) ]
[ 1]  31 : SAVE_RETURN	"K5"	35
                                      2: [ (if) [K5:35] ]
[ 2]  32 : LOCAL_GET	0	0	; core:first
                                      3: [ (if) [K5:35] 2 ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if) [K5:35] 2 [Closure] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if) [K5:35] 2 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if) [K5:35] (2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if) (2) ]
[ 2]  35 : MAKE_LABEL	"K5"
                                      2: [ (if) (2) ]
[ 2]  36 : LOCAL_GET	0	1	; core:rest
                                      3: [ (if) (2) (3) ]
[ 3]  37 : SAVE_RETURN	"K6"	41
                                      4: [ (if) (2) (3) [K6:41] ]
[ 4]  38 : PUSH_CONST	#f
                                      5: [ (if) (2) (3) [K6:41] #f ]
[ 5]  39 : GLOBAL_GET	list
                                      6: [ (if) (2) (3) [K6:41] #f [Closure] ]
[ 6]  40 : JMP_CLOSURE	1
                                      5: [ (if) (2) (3) [K6:41] #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ (if) (2) (3) [K6:41] (#f) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (if) (2) (3) (#f) ]
[ 4]  41 : MAKE_LABEL	"K6"
                                      4: [ (if) (2) (3) (#f) ]
[ 4]  42 : GLOBAL_GET	append
                                      5: [ (if) (2) (3) (#f) [Closure] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ (if) (2) (3) (#f) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (if 2 3 #f) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if)) (list core:first) core:rest (list (quote #f))) (list (quote if) core:first (append (list (quote core:and)) core:rest) (quote #f)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; core:rest
	18	GLOBAL_GET	core:length
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	core:=
	23	JMP_CLOSURE	2
24	MAKE_LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; core:first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	MAKE_LABEL	"K5"
	36	LOCAL_GET	0	1	; core:rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	MAKE_LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	MAKE_LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; core:first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	core:and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      4: [ 1 #f 2 3 ]
[ 4]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (#f 2 3) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (#f 2 3) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (#f 2 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2:24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2:24] [K3:20] ]
[ 2]  17 : LOCAL_GET	0	1	; core:rest
                                      3: [ [K2:24] [K3:20] (#f 2 3) ]
[ 3]  18 : GLOBAL_GET	core:length
                                      4: [ [K2:24] [K3:20] (#f 2 3) [Closure] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2:24] [K3:20] (#f 2 3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2:24] [K3:20] 3 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2:24] 3 ]
[ 2]  20 : MAKE_LABEL	"K3"
                                      2: [ [K2:24] 3 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2:24] 3 1 ]
[ 3]  22 : GLOBAL_GET	core:=
                                      4: [ [K2:24] 3 1 [Closure] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2:24] 3 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2:24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : MAKE_LABEL	"K2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  44 : MAKE_LABEL	"L9"
                                      0: [  ]
[ 0]  45 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  46 : LOCAL_GET	0	0	; core:first
                                      2: [ if 1 ]
[ 2]  47 : SAVE_RETURN	"K7"	56
                                      3: [ if 1 [K7:56] ]
[ 3]  48 : SAVE_RETURN	"K8"	52
                                      4: [ if 1 [K7:56] [K8:52] ]
[ 4]  49 : PUSH_CONST	core:and
                                      5: [ if 1 [K7:56] [K8:52] core:and ]
[ 5]  50 : GLOBAL_GET	list
                                      6: [ if 1 [K7:56] [K8:52] core:and [Closure] ]
[ 6]  51 : JMP_CLOSURE	1
                                      5: [ if 1 [K7:56] [K8:52] core:and ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if 1 [K7:56] [K8:52] (core:and) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if 1 [K7:56] (core:and) ]
[ 4]  52 : MAKE_LABEL	"K8"
                                      4: [ if 1 [K7:56] (core:and) ]
[ 4]  53 : LOCAL_GET	0	1	; core:rest
                                      5: [ if 1 [K7:56] (core:and) (#f 2 3) ]
[ 5]  54 : GLOBAL_GET	append
                                      6: [ if 1 [K7:56] (core:and) (#f 2 3) [Closure] ]
[ 6]  55 : JMP_CLOSURE	2
                                      5: [ if 1 [K7:56] (core:and) (#f 2 3) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if 1 [K7:56] (core:and #f 2 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if 1 (core:and #f 2 3) ]
[ 3]  56 : MAKE_LABEL	"K7"
                                      3: [ if 1 (core:and #f 2 3) ]
[ 3]  57 : PUSH_CONST	#f
                                      4: [ if 1 (core:and #f 2 3) #f ]
[ 4]  58 : GLOBAL_GET	list
                                      5: [ if 1 (core:and #f 2 3) #f [Closure] ]
[ 5]  59 : JMP_CLOSURE	4
                                      4: [ if 1 (core:and #f 2 3) #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if 1 (core:and #f 2 3) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if)) (list core:first) core:rest (list (quote #f))) (list (quote if) core:first (append (list (quote core:and)) core:rest) (quote #f)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; core:rest
	18	GLOBAL_GET	core:length
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	core:=
	23	JMP_CLOSURE	2
24	MAKE_LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; core:first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	MAKE_LABEL	"K5"
	36	LOCAL_GET	0	1	; core:rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	MAKE_LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	MAKE_LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; core:first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	core:and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      3: [ #f 2 3 ]
[ 3]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (2 3) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (2 3) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (2 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2:24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2:24] [K3:20] ]
[ 2]  17 : LOCAL_GET	0	1	; core:rest
                                      3: [ [K2:24] [K3:20] (2 3) ]
[ 3]  18 : GLOBAL_GET	core:length
                                      4: [ [K2:24] [K3:20] (2 3) [Closure] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2:24] [K3:20] (2 3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2:24] [K3:20] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2:24] 2 ]
[ 2]  20 : MAKE_LABEL	"K3"
                                      2: [ [K2:24] 2 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2:24] 2 1 ]
[ 3]  22 : GLOBAL_GET	core:=
                                      4: [ [K2:24] 2 1 [Closure] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2:24] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2:24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : MAKE_LABEL	"K2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  44 : MAKE_LABEL	"L9"
                                      0: [  ]
[ 0]  45 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  46 : LOCAL_GET	0	0	; core:first
                                      2: [ if #f ]
[ 2]  47 : SAVE_RETURN	"K7"	56
                                      3: [ if #f [K7:56] ]
[ 3]  48 : SAVE_RETURN	"K8"	52
                                      4: [ if #f [K7:56] [K8:52] ]
[ 4]  49 : PUSH_CONST	core:and
                                      5: [ if #f [K7:56] [K8:52] core:and ]
[ 5]  50 : GLOBAL_GET	list
                                      6: [ if #f [K7:56] [K8:52] core:and [Closure] ]
[ 6]  51 : JMP_CLOSURE	1
                                      5: [ if #f [K7:56] [K8:52] core:and ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if #f [K7:56] [K8:52] (core:and) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if #f [K7:56] (core:and) ]
[ 4]  52 : MAKE_LABEL	"K8"
                                      4: [ if #f [K7:56] (core:and) ]
[ 4]  53 : LOCAL_GET	0	1	; core:rest
                                      5: [ if #f [K7:56] (core:and) (2 3) ]
[ 5]  54 : GLOBAL_GET	append
                                      6: [ if #f [K7:56] (core:and) (2 3) [Closure] ]
[ 6]  55 : JMP_CLOSURE	2
                                      5: [ if #f [K7:56] (core:and) (2 3) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if #f [K7:56] (core:and 2 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if #f (core:and 2 3) ]
[ 3]  56 : MAKE_LABEL	"K7"
                                      3: [ if #f (core:and 2 3) ]
[ 3]  57 : PUSH_CONST	#f
                                      4: [ if #f (core:and 2 3) #f ]
[ 4]  58 : GLOBAL_GET	list
                                      5: [ if #f (core:and 2 3) #f [Closure] ]
[ 5]  59 : JMP_CLOSURE	4
                                      4: [ if #f (core:and 2 3) #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if #f (core:and 2 3) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if)) (list core:first) core:rest (list (quote #f))) (list (quote if) core:first (append (list (quote core:and)) core:rest) (quote #f)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"L10"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; core:rest
	18	GLOBAL_GET	core:length
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	core:=
	23	JMP_CLOSURE	2
24	MAKE_LABEL	"K2"
	25	JMP_IF_FALSE	"L9"	44
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; core:first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	MAKE_LABEL	"K5"
	36	LOCAL_GET	0	1	; core:rest
	37	SAVE_RETURN	"K6"	41
	38	PUSH_CONST	#f
	39	GLOBAL_GET	list
	40	JMP_CLOSURE	1
41	MAKE_LABEL	"K6"
	42	GLOBAL_GET	append
	43	JMP_CLOSURE	4
44	MAKE_LABEL	"L9"
	45	PUSH_CONST	if
	46	LOCAL_GET	0	0	; core:first
	47	SAVE_RETURN	"K7"	56
	48	SAVE_RETURN	"K8"	52
	49	PUSH_CONST	core:and
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K8"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K7"
	57	PUSH_CONST	#f
	58	GLOBAL_GET	list
	59	JMP_CLOSURE	4

                                      2: [ 2 3 ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (3) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (3) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2:24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2:24] [K3:20] ]
[ 2]  17 : LOCAL_GET	0	1	; core:rest
                                      3: [ [K2:24] [K3:20] (3) ]
[ 3]  18 : GLOBAL_GET	core:length
                                      4: [ [K2:24] [K3:20] (3) [Closure] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2:24] [K3:20] (3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2:24] [K3:20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2:24] 1 ]
[ 2]  20 : MAKE_LABEL	"K3"
                                      2: [ [K2:24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2:24] 1 1 ]
[ 3]  22 : GLOBAL_GET	core:=
                                      4: [ [K2:24] 1 1 [Closure] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2:24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2:24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : MAKE_LABEL	"K2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L9"	44
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"K4"	30
                                      1: [ [K4:30] ]
[ 1]  27 : PUSH_CONST	if
                                      2: [ [K4:30] if ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [K4:30] if [Closure] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [K4:30] if ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K4:30] (if) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if) ]
[ 1]  30 : MAKE_LABEL	"K4"
                                      1: [ (if) ]
[ 1]  31 : SAVE_RETURN	"K5"	35
                                      2: [ (if) [K5:35] ]
[ 2]  32 : LOCAL_GET	0	0	; core:first
                                      3: [ (if) [K5:35] 2 ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if) [K5:35] 2 [Closure] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if) [K5:35] 2 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if) [K5:35] (2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if) (2) ]
[ 2]  35 : MAKE_LABEL	"K5"
                                      2: [ (if) (2) ]
[ 2]  36 : LOCAL_GET	0	1	; core:rest
                                      3: [ (if) (2) (3) ]
[ 3]  37 : SAVE_RETURN	"K6"	41
                                      4: [ (if) (2) (3) [K6:41] ]
[ 4]  38 : PUSH_CONST	#f
                                      5: [ (if) (2) (3) [K6:41] #f ]
[ 5]  39 : GLOBAL_GET	list
                                      6: [ (if) (2) (3) [K6:41] #f [Closure] ]
[ 6]  40 : JMP_CLOSURE	1
                                      5: [ (if) (2) (3) [K6:41] #f ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ (if) (2) (3) [K6:41] (#f) ]
[ 5]   1 : RETURN_VAL
                                      4: [ (if) (2) (3) (#f) ]
[ 4]  41 : MAKE_LABEL	"K6"
                                      4: [ (if) (2) (3) (#f) ]
[ 4]  42 : GLOBAL_GET	append
                                      5: [ (if) (2) (3) (#f) [Closure] ]
[ 5]  43 : JMP_CLOSURE	4
                                      4: [ (if) (2) (3) (#f) ]
[ 4]   0 : CALL_PRIMOP	"append"
                                      1: [ (if 2 3 #f) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	#f
	5	GLOBAL_GET	core:list
	6	JMP_CLOSURE	4

Running...
Executing:  lambda: ((core:list (core:and 1) (core:and 1 2) (core:and 1 2 3) (core:and 1 #f 2 3)))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	PUSH_CONST	3
	4	PUSH_CONST	#f
	5	GLOBAL_GET	core:list
	6	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : PUSH_CONST	3
                                      3: [ 1 2 3 ]
[ 3]   4 : PUSH_CONST	#f
                                      4: [ 1 2 3 #f ]
[ 4]   5 : GLOBAL_GET	core:list
                                      5: [ 1 2 3 #f [Closure] ]
[ 5]   6 : JMP_CLOSURE	4
                                      4: [ 1 2 3 #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3 #f) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3 #f)"  - expected "(1 2 3 #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (list (or 1) (or 2 1) (or (< 1 0) (< 2 0) 3) (or (< 1 0) (< 2 0)))
==>  (core:list (core:or 1) (core:or 2 1) (core:or (core:< 1 0) (core:< 2 0) 3) (core:or (core:< 1 0) (core:< 2 0)))
Parsed:  (core:list (core:or 1) (core:or 2 1) (core:or (core:< 1 0) (core:< 2 0) 3) (core:or (core:< 1 0) (core:< 2 0)))
Executing:  lambda: ((if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if*)) (list core:first) core:rest) (list (quote if*) core:first (append (list (quote core:or)) core:rest)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"L9"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; core:rest
	18	GLOBAL_GET	core:length
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	core:=
	23	JMP_CLOSURE	2
24	MAKE_LABEL	"K2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; core:first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	MAKE_LABEL	"K5"
	36	LOCAL_GET	0	1	; core:rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	MAKE_LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; core:first
	42	SAVE_RETURN	"K6"	51
	43	SAVE_RETURN	"K7"	47
	44	PUSH_CONST	core:or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	MAKE_LABEL	"K7"
	48	LOCAL_GET	0	1	; core:rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	MAKE_LABEL	"K6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      1: [ 1 ]
[ 1]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1:11] ]
[ 1]   8 : LOCAL_GET	0	0	; core:first
                                      2: [ [K1:11] 1 ]
[ 2]   9 : GLOBAL_GET	core:list
                                      3: [ [K1:11] 1 [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1:11] 1 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K1:11] (1) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (1) ]
[ 1]  11 : MAKE_LABEL	"K1"
                                      1: [ (1) ]
[ 1]  12 : GLOBAL_GET	core:car
                                      2: [ (1) [Closure] ]
[ 2]  13 : JMP_CLOSURE	1
                                      1: [ (1) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ 1 ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if*)) (list core:first) core:rest) (list (quote if*) core:first (append (list (quote core:or)) core:rest)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"L9"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; core:rest
	18	GLOBAL_GET	core:length
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	core:=
	23	JMP_CLOSURE	2
24	MAKE_LABEL	"K2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; core:first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	MAKE_LABEL	"K5"
	36	LOCAL_GET	0	1	; core:rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	MAKE_LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; core:first
	42	SAVE_RETURN	"K6"	51
	43	SAVE_RETURN	"K7"	47
	44	PUSH_CONST	core:or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	MAKE_LABEL	"K7"
	48	LOCAL_GET	0	1	; core:rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	MAKE_LABEL	"K6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      2: [ 2 1 ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (1) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (1) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (1) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2:24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2:24] [K3:20] ]
[ 2]  17 : LOCAL_GET	0	1	; core:rest
                                      3: [ [K2:24] [K3:20] (1) ]
[ 3]  18 : GLOBAL_GET	core:length
                                      4: [ [K2:24] [K3:20] (1) [Closure] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2:24] [K3:20] (1) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2:24] [K3:20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2:24] 1 ]
[ 2]  20 : MAKE_LABEL	"K3"
                                      2: [ [K2:24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2:24] 1 1 ]
[ 3]  22 : GLOBAL_GET	core:=
                                      4: [ [K2:24] 1 1 [Closure] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2:24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2:24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : MAKE_LABEL	"K2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"K4"	30
                                      1: [ [K4:30] ]
[ 1]  27 : PUSH_CONST	if*
                                      2: [ [K4:30] if* ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [K4:30] if* [Closure] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [K4:30] if* ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K4:30] (if*) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if*) ]
[ 1]  30 : MAKE_LABEL	"K4"
                                      1: [ (if*) ]
[ 1]  31 : SAVE_RETURN	"K5"	35
                                      2: [ (if*) [K5:35] ]
[ 2]  32 : LOCAL_GET	0	0	; core:first
                                      3: [ (if*) [K5:35] 2 ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if*) [K5:35] 2 [Closure] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if*) [K5:35] 2 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if*) [K5:35] (2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if*) (2) ]
[ 2]  35 : MAKE_LABEL	"K5"
                                      2: [ (if*) (2) ]
[ 2]  36 : LOCAL_GET	0	1	; core:rest
                                      3: [ (if*) (2) (1) ]
[ 3]  37 : GLOBAL_GET	append
                                      4: [ (if*) (2) (1) [Closure] ]
[ 4]  38 : JMP_CLOSURE	3
                                      3: [ (if*) (2) (1) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (if* 2 1) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if*)) (list core:first) core:rest) (list (quote if*) core:first (append (list (quote core:or)) core:rest)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"L9"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; core:rest
	18	GLOBAL_GET	core:length
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	core:=
	23	JMP_CLOSURE	2
24	MAKE_LABEL	"K2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; core:first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	MAKE_LABEL	"K5"
	36	LOCAL_GET	0	1	; core:rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	MAKE_LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; core:first
	42	SAVE_RETURN	"K6"	51
	43	SAVE_RETURN	"K7"	47
	44	PUSH_CONST	core:or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	MAKE_LABEL	"K7"
	48	LOCAL_GET	0	1	; core:rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	MAKE_LABEL	"K6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      3: [ (core:< 1 0) (core:< 2 0) 3 ]
[ 3]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] ((core:< 2 0) 3) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] ((core:< 2 0) 3) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] ((core:< 2 0) 3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2:24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2:24] [K3:20] ]
[ 2]  17 : LOCAL_GET	0	1	; core:rest
                                      3: [ [K2:24] [K3:20] ((core:< 2 0) 3) ]
[ 3]  18 : GLOBAL_GET	core:length
                                      4: [ [K2:24] [K3:20] ((core:< 2 0) 3) [Closure] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2:24] [K3:20] ((core:< 2 0) 3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2:24] [K3:20] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2:24] 2 ]
[ 2]  20 : MAKE_LABEL	"K3"
                                      2: [ [K2:24] 2 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2:24] 2 1 ]
[ 3]  22 : GLOBAL_GET	core:=
                                      4: [ [K2:24] 2 1 [Closure] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2:24] 2 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2:24] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  24 : MAKE_LABEL	"K2"
                                      1: [ #f ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  39 : MAKE_LABEL	"L8"
                                      0: [  ]
[ 0]  40 : PUSH_CONST	if*
                                      1: [ if* ]
[ 1]  41 : LOCAL_GET	0	0	; core:first
                                      2: [ if* (core:< 1 0) ]
[ 2]  42 : SAVE_RETURN	"K6"	51
                                      3: [ if* (core:< 1 0) [K6:51] ]
[ 3]  43 : SAVE_RETURN	"K7"	47
                                      4: [ if* (core:< 1 0) [K6:51] [K7:47] ]
[ 4]  44 : PUSH_CONST	core:or
                                      5: [ if* (core:< 1 0) [K6:51] [K7:47] core:or ]
[ 5]  45 : GLOBAL_GET	list
                                      6: [ if* (core:< 1 0) [K6:51] [K7:47] core:or [Closure] ]
[ 6]  46 : JMP_CLOSURE	1
                                      5: [ if* (core:< 1 0) [K6:51] [K7:47] core:or ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if* (core:< 1 0) [K6:51] [K7:47] (core:or) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if* (core:< 1 0) [K6:51] (core:or) ]
[ 4]  47 : MAKE_LABEL	"K7"
                                      4: [ if* (core:< 1 0) [K6:51] (core:or) ]
[ 4]  48 : LOCAL_GET	0	1	; core:rest
                                      5: [ if* (core:< 1 0) [K6:51] (core:or) ((core:< 2 0) 3) ]
[ 5]  49 : GLOBAL_GET	append
                                      6: [ if* (core:< 1 0) [K6:51] (core:or) ((core:< 2 0) 3) [Closure] ]
[ 6]  50 : JMP_CLOSURE	2
                                      5: [ if* (core:< 1 0) [K6:51] (core:or) ((core:< 2 0) 3) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if* (core:< 1 0) [K6:51] (core:or (core:< 2 0) 3) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if* (core:< 1 0) (core:or (core:< 2 0) 3) ]
[ 3]  51 : MAKE_LABEL	"K6"
                                      3: [ if* (core:< 1 0) (core:or (core:< 2 0) 3) ]
[ 3]  52 : GLOBAL_GET	list
                                      4: [ if* (core:< 1 0) (core:or (core:< 2 0) 3) [Closure] ]
[ 4]  53 : JMP_CLOSURE	3
                                      3: [ if* (core:< 1 0) (core:or (core:< 2 0) 3) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (if* (core:< 1 0) (core:or (core:< 2 0) 3)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if*)) (list core:first) core:rest) (list (quote if*) core:first (append (list (quote core:or)) core:rest)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"L9"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; core:rest
	18	GLOBAL_GET	core:length
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	core:=
	23	JMP_CLOSURE	2
24	MAKE_LABEL	"K2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; core:first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	MAKE_LABEL	"K5"
	36	LOCAL_GET	0	1	; core:rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	MAKE_LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; core:first
	42	SAVE_RETURN	"K6"	51
	43	SAVE_RETURN	"K7"	47
	44	PUSH_CONST	core:or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	MAKE_LABEL	"K7"
	48	LOCAL_GET	0	1	; core:rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	MAKE_LABEL	"K6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      2: [ (core:< 2 0) 3 ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (3) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (3) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (3) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2:24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2:24] [K3:20] ]
[ 2]  17 : LOCAL_GET	0	1	; core:rest
                                      3: [ [K2:24] [K3:20] (3) ]
[ 3]  18 : GLOBAL_GET	core:length
                                      4: [ [K2:24] [K3:20] (3) [Closure] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2:24] [K3:20] (3) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2:24] [K3:20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2:24] 1 ]
[ 2]  20 : MAKE_LABEL	"K3"
                                      2: [ [K2:24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2:24] 1 1 ]
[ 3]  22 : GLOBAL_GET	core:=
                                      4: [ [K2:24] 1 1 [Closure] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2:24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2:24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : MAKE_LABEL	"K2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"K4"	30
                                      1: [ [K4:30] ]
[ 1]  27 : PUSH_CONST	if*
                                      2: [ [K4:30] if* ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [K4:30] if* [Closure] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [K4:30] if* ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K4:30] (if*) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if*) ]
[ 1]  30 : MAKE_LABEL	"K4"
                                      1: [ (if*) ]
[ 1]  31 : SAVE_RETURN	"K5"	35
                                      2: [ (if*) [K5:35] ]
[ 2]  32 : LOCAL_GET	0	0	; core:first
                                      3: [ (if*) [K5:35] (core:< 2 0) ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if*) [K5:35] (core:< 2 0) [Closure] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if*) [K5:35] (core:< 2 0) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if*) [K5:35] ((core:< 2 0)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if*) ((core:< 2 0)) ]
[ 2]  35 : MAKE_LABEL	"K5"
                                      2: [ (if*) ((core:< 2 0)) ]
[ 2]  36 : LOCAL_GET	0	1	; core:rest
                                      3: [ (if*) ((core:< 2 0)) (3) ]
[ 3]  37 : GLOBAL_GET	append
                                      4: [ (if*) ((core:< 2 0)) (3) [Closure] ]
[ 4]  38 : JMP_CLOSURE	3
                                      3: [ (if*) ((core:< 2 0)) (3) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (if* (core:< 2 0) 3) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (core:car (core:list core:first)) (if (core:= (core:length core:rest) 1) (append (list (quote if*)) (list core:first) core:rest) (list (quote if*) core:first (append (list (quote core:or)) core:rest)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L9"	14
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:list
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"L9"
	15	SAVE_RETURN	"K2"	24
	16	SAVE_RETURN	"K3"	20
	17	LOCAL_GET	0	1	; core:rest
	18	GLOBAL_GET	core:length
	19	JMP_CLOSURE	1
20	MAKE_LABEL	"K3"
	21	PUSH_CONST	1
	22	GLOBAL_GET	core:=
	23	JMP_CLOSURE	2
24	MAKE_LABEL	"K2"
	25	JMP_IF_FALSE	"L8"	39
	26	SAVE_RETURN	"K4"	30
	27	PUSH_CONST	if*
	28	GLOBAL_GET	list
	29	JMP_CLOSURE	1
30	MAKE_LABEL	"K4"
	31	SAVE_RETURN	"K5"	35
	32	LOCAL_GET	0	0	; core:first
	33	GLOBAL_GET	list
	34	JMP_CLOSURE	1
35	MAKE_LABEL	"K5"
	36	LOCAL_GET	0	1	; core:rest
	37	GLOBAL_GET	append
	38	JMP_CLOSURE	3
39	MAKE_LABEL	"L8"
	40	PUSH_CONST	if*
	41	LOCAL_GET	0	0	; core:first
	42	SAVE_RETURN	"K6"	51
	43	SAVE_RETURN	"K7"	47
	44	PUSH_CONST	core:or
	45	GLOBAL_GET	list
	46	JMP_CLOSURE	1
47	MAKE_LABEL	"K7"
	48	LOCAL_GET	0	1	; core:rest
	49	GLOBAL_GET	append
	50	JMP_CLOSURE	2
51	MAKE_LABEL	"K6"
	52	GLOBAL_GET	list
	53	JMP_CLOSURE	3

                                      2: [ (core:< 1 0) (core:< 2 0) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] ((core:< 2 0)) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] ((core:< 2 0)) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] ((core:< 2 0)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L9"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L9"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	24
                                      1: [ [K2:24] ]
[ 1]  16 : SAVE_RETURN	"K3"	20
                                      2: [ [K2:24] [K3:20] ]
[ 2]  17 : LOCAL_GET	0	1	; core:rest
                                      3: [ [K2:24] [K3:20] ((core:< 2 0)) ]
[ 3]  18 : GLOBAL_GET	core:length
                                      4: [ [K2:24] [K3:20] ((core:< 2 0)) [Closure] ]
[ 4]  19 : JMP_CLOSURE	1
                                      3: [ [K2:24] [K3:20] ((core:< 2 0)) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K2:24] [K3:20] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K2:24] 1 ]
[ 2]  20 : MAKE_LABEL	"K3"
                                      2: [ [K2:24] 1 ]
[ 2]  21 : PUSH_CONST	1
                                      3: [ [K2:24] 1 1 ]
[ 3]  22 : GLOBAL_GET	core:=
                                      4: [ [K2:24] 1 1 [Closure] ]
[ 4]  23 : JMP_CLOSURE	2
                                      3: [ [K2:24] 1 1 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2:24] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  24 : MAKE_LABEL	"K2"
                                      1: [ #t ]
[ 1]  25 : JMP_IF_FALSE	"L8"	39
                                      0: [  ]
[ 0]  26 : SAVE_RETURN	"K4"	30
                                      1: [ [K4:30] ]
[ 1]  27 : PUSH_CONST	if*
                                      2: [ [K4:30] if* ]
[ 2]  28 : GLOBAL_GET	list
                                      3: [ [K4:30] if* [Closure] ]
[ 3]  29 : JMP_CLOSURE	1
                                      2: [ [K4:30] if* ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K4:30] (if*) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (if*) ]
[ 1]  30 : MAKE_LABEL	"K4"
                                      1: [ (if*) ]
[ 1]  31 : SAVE_RETURN	"K5"	35
                                      2: [ (if*) [K5:35] ]
[ 2]  32 : LOCAL_GET	0	0	; core:first
                                      3: [ (if*) [K5:35] (core:< 1 0) ]
[ 3]  33 : GLOBAL_GET	list
                                      4: [ (if*) [K5:35] (core:< 1 0) [Closure] ]
[ 4]  34 : JMP_CLOSURE	1
                                      3: [ (if*) [K5:35] (core:< 1 0) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ (if*) [K5:35] ((core:< 1 0)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (if*) ((core:< 1 0)) ]
[ 2]  35 : MAKE_LABEL	"K5"
                                      2: [ (if*) ((core:< 1 0)) ]
[ 2]  36 : LOCAL_GET	0	1	; core:rest
                                      3: [ (if*) ((core:< 1 0)) ((core:< 2 0)) ]
[ 3]  37 : GLOBAL_GET	append
                                      4: [ (if*) ((core:< 1 0)) ((core:< 2 0)) [Closure] ]
[ 4]  38 : JMP_CLOSURE	3
                                      3: [ (if*) ((core:< 1 0)) ((core:< 2 0)) ]
[ 3]   0 : CALL_PRIMOP	"append"
                                      1: [ (if* (core:< 1 0) (core:< 2 0)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	DUPLICATE
	4	JMP_IF_TRUE	"L0"	7
	5	STACK_POP
	6	PUSH_CONST	1
7	MAKE_LABEL	"L0"
	8	SAVE_RETURN	"K1"	13
	9	PUSH_CONST	1
	10	PUSH_CONST	0
	11	GLOBAL_GET	core:<
	12	JMP_CLOSURE	2
13	MAKE_LABEL	"K1"
	14	DUPLICATE
	15	JMP_IF_TRUE	"L4"	28
	16	STACK_POP
	17	SAVE_RETURN	"K2"	22
	18	PUSH_CONST	2
	19	PUSH_CONST	0
	20	GLOBAL_GET	core:<
	21	JMP_CLOSURE	2
22	MAKE_LABEL	"K2"
	23	DUPLICATE
	24	JMP_IF_TRUE	"L3"	27
	25	STACK_POP
	26	PUSH_CONST	3
27	MAKE_LABEL	"L3"
28	MAKE_LABEL	"L4"
	29	SAVE_RETURN	"K5"	34
	30	PUSH_CONST	1
	31	PUSH_CONST	0
	32	GLOBAL_GET	core:<
	33	JMP_CLOSURE	2
34	MAKE_LABEL	"K5"
	35	DUPLICATE
	36	JMP_IF_TRUE	"L7"	44
	37	STACK_POP
	38	SAVE_RETURN	"K6"	43
	39	PUSH_CONST	2
	40	PUSH_CONST	0
	41	GLOBAL_GET	core:<
	42	JMP_CLOSURE	2
43	MAKE_LABEL	"K6"
44	MAKE_LABEL	"L7"
	45	GLOBAL_GET	core:list
	46	JMP_CLOSURE	4

Running...
Executing:  lambda: ((core:list (core:or 1) (core:or 2 1) (core:or (core:< 1 0) (core:< 2 0) 3) (core:or (core:< 1 0) (core:< 2 0))))
	0	MAKE_ENV	0
	1	PUSH_CONST	1
	2	PUSH_CONST	2
	3	DUPLICATE
	4	JMP_IF_TRUE	"L0"	7
	5	STACK_POP
	6	PUSH_CONST	1
7	MAKE_LABEL	"L0"
	8	SAVE_RETURN	"K1"	13
	9	PUSH_CONST	1
	10	PUSH_CONST	0
	11	GLOBAL_GET	core:<
	12	JMP_CLOSURE	2
13	MAKE_LABEL	"K1"
	14	DUPLICATE
	15	JMP_IF_TRUE	"L4"	28
	16	STACK_POP
	17	SAVE_RETURN	"K2"	22
	18	PUSH_CONST	2
	19	PUSH_CONST	0
	20	GLOBAL_GET	core:<
	21	JMP_CLOSURE	2
22	MAKE_LABEL	"K2"
	23	DUPLICATE
	24	JMP_IF_TRUE	"L3"	27
	25	STACK_POP
	26	PUSH_CONST	3
27	MAKE_LABEL	"L3"
28	MAKE_LABEL	"L4"
	29	SAVE_RETURN	"K5"	34
	30	PUSH_CONST	1
	31	PUSH_CONST	0
	32	GLOBAL_GET	core:<
	33	JMP_CLOSURE	2
34	MAKE_LABEL	"K5"
	35	DUPLICATE
	36	JMP_IF_TRUE	"L7"	44
	37	STACK_POP
	38	SAVE_RETURN	"K6"	43
	39	PUSH_CONST	2
	40	PUSH_CONST	0
	41	GLOBAL_GET	core:<
	42	JMP_CLOSURE	2
43	MAKE_LABEL	"K6"
44	MAKE_LABEL	"L7"
	45	GLOBAL_GET	core:list
	46	JMP_CLOSURE	4

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	1
                                      1: [ 1 ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ 1 2 ]
[ 2]   3 : DUPLICATE
                                      3: [ 1 2 2 ]
[ 3]   4 : JMP_IF_TRUE	"L0"	7
                                      2: [ 1 2 ]
[ 2]   7 : MAKE_LABEL	"L0"
                                      2: [ 1 2 ]
[ 2]   8 : SAVE_RETURN	"K1"	13
                                      3: [ 1 2 [K1:13] ]
[ 3]   9 : PUSH_CONST	1
                                      4: [ 1 2 [K1:13] 1 ]
[ 4]  10 : PUSH_CONST	0
                                      5: [ 1 2 [K1:13] 1 0 ]
[ 5]  11 : GLOBAL_GET	core:<
                                      6: [ 1 2 [K1:13] 1 0 [Closure] ]
[ 6]  12 : JMP_CLOSURE	2
                                      5: [ 1 2 [K1:13] 1 0 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ 1 2 [K1:13] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 2 #f ]
[ 3]  13 : MAKE_LABEL	"K1"
                                      3: [ 1 2 #f ]
[ 3]  14 : DUPLICATE
                                      4: [ 1 2 #f #f ]
[ 4]  15 : JMP_IF_TRUE	"L4"	28
                                      3: [ 1 2 #f ]
[ 3]  16 : STACK_POP
                                      2: [ 1 2 ]
[ 2]  17 : SAVE_RETURN	"K2"	22
                                      3: [ 1 2 [K2:22] ]
[ 3]  18 : PUSH_CONST	2
                                      4: [ 1 2 [K2:22] 2 ]
[ 4]  19 : PUSH_CONST	0
                                      5: [ 1 2 [K2:22] 2 0 ]
[ 5]  20 : GLOBAL_GET	core:<
                                      6: [ 1 2 [K2:22] 2 0 [Closure] ]
[ 6]  21 : JMP_CLOSURE	2
                                      5: [ 1 2 [K2:22] 2 0 ]
[ 5]   0 : CALL_PRIMOP	"<"
                                      4: [ 1 2 [K2:22] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 2 #f ]
[ 3]  22 : MAKE_LABEL	"K2"
                                      3: [ 1 2 #f ]
[ 3]  23 : DUPLICATE
                                      4: [ 1 2 #f #f ]
[ 4]  24 : JMP_IF_TRUE	"L3"	27
                                      3: [ 1 2 #f ]
[ 3]  25 : STACK_POP
                                      2: [ 1 2 ]
[ 2]  26 : PUSH_CONST	3
                                      3: [ 1 2 3 ]
[ 3]  27 : MAKE_LABEL	"L3"
                                      3: [ 1 2 3 ]
[ 3]  28 : MAKE_LABEL	"L4"
                                      3: [ 1 2 3 ]
[ 3]  29 : SAVE_RETURN	"K5"	34
                                      4: [ 1 2 3 [K5:34] ]
[ 4]  30 : PUSH_CONST	1
                                      5: [ 1 2 3 [K5:34] 1 ]
[ 5]  31 : PUSH_CONST	0
                                      6: [ 1 2 3 [K5:34] 1 0 ]
[ 6]  32 : GLOBAL_GET	core:<
                                      7: [ 1 2 3 [K5:34] 1 0 [Closure] ]
[ 7]  33 : JMP_CLOSURE	2
                                      6: [ 1 2 3 [K5:34] 1 0 ]
[ 6]   0 : CALL_PRIMOP	"<"
                                      5: [ 1 2 3 [K5:34] #f ]
[ 5]   1 : RETURN_VAL
                                      4: [ 1 2 3 #f ]
[ 4]  34 : MAKE_LABEL	"K5"
                                      4: [ 1 2 3 #f ]
[ 4]  35 : DUPLICATE
                                      5: [ 1 2 3 #f #f ]
[ 5]  36 : JMP_IF_TRUE	"L7"	44
                                      4: [ 1 2 3 #f ]
[ 4]  37 : STACK_POP
                                      3: [ 1 2 3 ]
[ 3]  38 : SAVE_RETURN	"K6"	43
                                      4: [ 1 2 3 [K6:43] ]
[ 4]  39 : PUSH_CONST	2
                                      5: [ 1 2 3 [K6:43] 2 ]
[ 5]  40 : PUSH_CONST	0
                                      6: [ 1 2 3 [K6:43] 2 0 ]
[ 6]  41 : GLOBAL_GET	core:<
                                      7: [ 1 2 3 [K6:43] 2 0 [Closure] ]
[ 7]  42 : JMP_CLOSURE	2
                                      6: [ 1 2 3 [K6:43] 2 0 ]
[ 6]   0 : CALL_PRIMOP	"<"
                                      5: [ 1 2 3 [K6:43] #f ]
[ 5]   1 : RETURN_VAL
                                      4: [ 1 2 3 #f ]
[ 4]  43 : MAKE_LABEL	"K6"
                                      4: [ 1 2 3 #f ]
[ 4]  44 : MAKE_LABEL	"L7"
                                      4: [ 1 2 3 #f ]
[ 4]  45 : GLOBAL_GET	core:list
                                      5: [ 1 2 3 #f [Closure] ]
[ 5]  46 : JMP_CLOSURE	4
                                      4: [ 1 2 3 #f ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3 #f) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3 #f)"  - expected "(1 2 3 #f)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cond ((= 1 2) 2) ((= 1 4) 4) 0)
==>  (core:cond ((core:= 1 2) 2) ((core:= 1 4) 4) 0)
Parsed:  (core:cond ((core:= 1 2) 2) ((core:= 1 4) 4) 0)
Executing:  lambda: ((if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:cons?
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K2"
	18	LOCAL_GET	0	0	; core:first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; core:first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	MAKE_LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; core:first
	30	GLOBAL_GET	core:car
	31	JMP_CLOSURE	1
32	MAKE_LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	MAKE_LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; core:first
	41	GLOBAL_GET	core:cdr
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	MAKE_LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	core:cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K9"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      3: [ ((core:= 1 2) 2) ((core:= 1 4) 4) 0 ]
[ 3]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (((core:= 1 4) 4) 0) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (((core:= 1 4) 4) 0) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (((core:= 1 4) 4) 0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4:32] ]
[ 2]  29 : LOCAL_GET	0	0	; core:first
                                      3: [ if [K4:32] ((core:= 1 2) 2) ]
[ 3]  30 : GLOBAL_GET	core:car
                                      4: [ if [K4:32] ((core:= 1 2) 2) [Closure] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4:32] ((core:= 1 2) 2) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4:32] (core:= 1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (core:= 1 2) ]
[ 2]  32 : MAKE_LABEL	"K4"
                                      2: [ if (core:= 1 2) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (core:= 1 2) [K5:46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (core:= 1 2) [K5:46] [K6:38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (core:= 1 2) [K5:46] [K6:38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (core:= 1 2) [K5:46] [K6:38] begin [Closure] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (core:= 1 2) [K5:46] [K6:38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (core:= 1 2) [K5:46] [K6:38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= 1 2) [K5:46] (begin) ]
[ 4]  38 : MAKE_LABEL	"K6"
                                      4: [ if (core:= 1 2) [K5:46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (core:= 1 2) [K5:46] (begin) [K7:43] ]
[ 5]  40 : LOCAL_GET	0	0	; core:first
                                      6: [ if (core:= 1 2) [K5:46] (begin) [K7:43] ((core:= 1 2) 2) ]
[ 6]  41 : GLOBAL_GET	core:cdr
                                      7: [ if (core:= 1 2) [K5:46] (begin) [K7:43] ((core:= 1 2) 2) [Closure] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (core:= 1 2) [K5:46] (begin) [K7:43] ((core:= 1 2) 2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (core:= 1 2) [K5:46] (begin) [K7:43] (2) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= 1 2) [K5:46] (begin) (2) ]
[ 5]  43 : MAKE_LABEL	"K7"
                                      5: [ if (core:= 1 2) [K5:46] (begin) (2) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (core:= 1 2) [K5:46] (begin) (2) [Closure] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (core:= 1 2) [K5:46] (begin) (2) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (core:= 1 2) [K5:46] (begin 2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (core:= 1 2) (begin 2) ]
[ 3]  46 : MAKE_LABEL	"K5"
                                      3: [ if (core:= 1 2) (begin 2) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (core:= 1 2) (begin 2) [K8:56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (core:= 1 2) (begin 2) [K8:56] [K9:52] ]
[ 5]  49 : PUSH_CONST	core:cond
                                      6: [ if (core:= 1 2) (begin 2) [K8:56] [K9:52] core:cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (core:= 1 2) (begin 2) [K8:56] [K9:52] core:cond [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (core:= 1 2) (begin 2) [K8:56] [K9:52] core:cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (core:= 1 2) (begin 2) [K8:56] [K9:52] (core:cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= 1 2) (begin 2) [K8:56] (core:cond) ]
[ 5]  52 : MAKE_LABEL	"K9"
                                      5: [ if (core:= 1 2) (begin 2) [K8:56] (core:cond) ]
[ 5]  53 : LOCAL_GET	0	1	; core:rest
                                      6: [ if (core:= 1 2) (begin 2) [K8:56] (core:cond) (((core:= 1 4) 4) 0) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (core:= 1 2) (begin 2) [K8:56] (core:cond) (((core:= 1 4) 4) 0) [Closure] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (core:= 1 2) (begin 2) [K8:56] (core:cond) (((core:= 1 4) 4) 0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (core:= 1 2) (begin 2) [K8:56] (core:cond ((core:= 1 4) 4) 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= 1 2) (begin 2) (core:cond ((core:= 1 4) 4) 0) ]
[ 4]  56 : MAKE_LABEL	"K8"
                                      4: [ if (core:= 1 2) (begin 2) (core:cond ((core:= 1 4) 4) 0) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (core:= 1 2) (begin 2) (core:cond ((core:= 1 4) 4) 0) [Closure] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (core:= 1 2) (begin 2) (core:cond ((core:= 1 4) 4) 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (core:= 1 2) (begin 2) (core:cond ((core:= 1 4) 4) 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:cons?
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K2"
	18	LOCAL_GET	0	0	; core:first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; core:first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	MAKE_LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; core:first
	30	GLOBAL_GET	core:car
	31	JMP_CLOSURE	1
32	MAKE_LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	MAKE_LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; core:first
	41	GLOBAL_GET	core:cdr
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	MAKE_LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	core:cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K9"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      2: [ ((core:= 1 4) 4) 0 ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (0) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (0) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4:32] ]
[ 2]  29 : LOCAL_GET	0	0	; core:first
                                      3: [ if [K4:32] ((core:= 1 4) 4) ]
[ 3]  30 : GLOBAL_GET	core:car
                                      4: [ if [K4:32] ((core:= 1 4) 4) [Closure] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4:32] ((core:= 1 4) 4) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4:32] (core:= 1 4) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (core:= 1 4) ]
[ 2]  32 : MAKE_LABEL	"K4"
                                      2: [ if (core:= 1 4) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (core:= 1 4) [K5:46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (core:= 1 4) [K5:46] [K6:38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (core:= 1 4) [K5:46] [K6:38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (core:= 1 4) [K5:46] [K6:38] begin [Closure] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (core:= 1 4) [K5:46] [K6:38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (core:= 1 4) [K5:46] [K6:38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= 1 4) [K5:46] (begin) ]
[ 4]  38 : MAKE_LABEL	"K6"
                                      4: [ if (core:= 1 4) [K5:46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (core:= 1 4) [K5:46] (begin) [K7:43] ]
[ 5]  40 : LOCAL_GET	0	0	; core:first
                                      6: [ if (core:= 1 4) [K5:46] (begin) [K7:43] ((core:= 1 4) 4) ]
[ 6]  41 : GLOBAL_GET	core:cdr
                                      7: [ if (core:= 1 4) [K5:46] (begin) [K7:43] ((core:= 1 4) 4) [Closure] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (core:= 1 4) [K5:46] (begin) [K7:43] ((core:= 1 4) 4) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (core:= 1 4) [K5:46] (begin) [K7:43] (4) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= 1 4) [K5:46] (begin) (4) ]
[ 5]  43 : MAKE_LABEL	"K7"
                                      5: [ if (core:= 1 4) [K5:46] (begin) (4) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (core:= 1 4) [K5:46] (begin) (4) [Closure] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (core:= 1 4) [K5:46] (begin) (4) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (core:= 1 4) [K5:46] (begin 4) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (core:= 1 4) (begin 4) ]
[ 3]  46 : MAKE_LABEL	"K5"
                                      3: [ if (core:= 1 4) (begin 4) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (core:= 1 4) (begin 4) [K8:56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (core:= 1 4) (begin 4) [K8:56] [K9:52] ]
[ 5]  49 : PUSH_CONST	core:cond
                                      6: [ if (core:= 1 4) (begin 4) [K8:56] [K9:52] core:cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (core:= 1 4) (begin 4) [K8:56] [K9:52] core:cond [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (core:= 1 4) (begin 4) [K8:56] [K9:52] core:cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (core:= 1 4) (begin 4) [K8:56] [K9:52] (core:cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= 1 4) (begin 4) [K8:56] (core:cond) ]
[ 5]  52 : MAKE_LABEL	"K9"
                                      5: [ if (core:= 1 4) (begin 4) [K8:56] (core:cond) ]
[ 5]  53 : LOCAL_GET	0	1	; core:rest
                                      6: [ if (core:= 1 4) (begin 4) [K8:56] (core:cond) (0) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (core:= 1 4) (begin 4) [K8:56] (core:cond) (0) [Closure] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (core:= 1 4) (begin 4) [K8:56] (core:cond) (0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (core:= 1 4) (begin 4) [K8:56] (core:cond 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= 1 4) (begin 4) (core:cond 0) ]
[ 4]  56 : MAKE_LABEL	"K8"
                                      4: [ if (core:= 1 4) (begin 4) (core:cond 0) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (core:= 1 4) (begin 4) (core:cond 0) [Closure] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (core:= 1 4) (begin 4) (core:cond 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (core:= 1 4) (begin 4) (core:cond 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:cons?
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K2"
	18	LOCAL_GET	0	0	; core:first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; core:first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	MAKE_LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; core:first
	30	GLOBAL_GET	core:car
	31	JMP_CLOSURE	1
32	MAKE_LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	MAKE_LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; core:first
	41	GLOBAL_GET	core:cdr
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	MAKE_LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	core:cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K9"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      1: [ 0 ]
[ 1]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1:11] ]
[ 1]   8 : LOCAL_GET	0	0	; core:first
                                      2: [ [K1:11] 0 ]
[ 2]   9 : GLOBAL_GET	core:cons?
                                      3: [ [K1:11] 0 [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1:11] 0 ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K1:11] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  11 : MAKE_LABEL	"K1"
                                      1: [ #f ]
[ 1]  12 : JMP_IF_FALSE	"L3"	21
                                      0: [  ]
[ 0]  21 : MAKE_LABEL	"L3"
                                      0: [  ]
[ 0]  22 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]  23 : LOCAL_GET	0	0	; core:first
                                      2: [ begin 0 ]
[ 2]  24 : GLOBAL_GET	list
                                      3: [ begin 0 [Closure] ]
[ 3]  25 : JMP_CLOSURE	2
                                      2: [ begin 0 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:=
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	MAKE_LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	PUSH_CONST	1
	13	PUSH_CONST	4
	14	GLOBAL_GET	core:=
	15	JMP_CLOSURE	2
16	MAKE_LABEL	"K1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	MAKE_LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

Running...
Executing:  lambda: ((core:cond ((core:= 1 2) 2) ((core:= 1 4) 4) 0))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:=
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	MAKE_LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	PUSH_CONST	1
	13	PUSH_CONST	4
	14	GLOBAL_GET	core:=
	15	JMP_CLOSURE	2
16	MAKE_LABEL	"K1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	MAKE_LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0:6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [K0:6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K0:6] 1 2 ]
[ 3]   4 : GLOBAL_GET	core:=
                                      4: [ [K0:6] 1 2 [Closure] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0:6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0:6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : MAKE_LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"K1"	16
                                      1: [ [K1:16] ]
[ 1]  12 : PUSH_CONST	1
                                      2: [ [K1:16] 1 ]
[ 2]  13 : PUSH_CONST	4
                                      3: [ [K1:16] 1 4 ]
[ 3]  14 : GLOBAL_GET	core:=
                                      4: [ [K1:16] 1 4 [Closure] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [K1:16] 1 4 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K1:16] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  16 : MAKE_LABEL	"K1"
                                      1: [ #f ]
[ 1]  17 : JMP_IF_FALSE	"L2"	20
                                      0: [  ]
[ 0]  20 : MAKE_LABEL	"L2"
                                      0: [  ]
[ 0]  21 : PUSH_CONST	0
                                      1: [ 0 ]
[ 1]  22 : RETURN_VAL
test: got "0"  - expected "0"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cond ((= 2 2) 2) ((= 1 4) 4) 0)
==>  (core:cond ((core:= 2 2) 2) ((core:= 1 4) 4) 0)
Parsed:  (core:cond ((core:= 2 2) 2) ((core:= 1 4) 4) 0)
Executing:  lambda: ((if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:cons?
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K2"
	18	LOCAL_GET	0	0	; core:first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; core:first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	MAKE_LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; core:first
	30	GLOBAL_GET	core:car
	31	JMP_CLOSURE	1
32	MAKE_LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	MAKE_LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; core:first
	41	GLOBAL_GET	core:cdr
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	MAKE_LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	core:cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K9"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      3: [ ((core:= 2 2) 2) ((core:= 1 4) 4) 0 ]
[ 3]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (((core:= 1 4) 4) 0) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (((core:= 1 4) 4) 0) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (((core:= 1 4) 4) 0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4:32] ]
[ 2]  29 : LOCAL_GET	0	0	; core:first
                                      3: [ if [K4:32] ((core:= 2 2) 2) ]
[ 3]  30 : GLOBAL_GET	core:car
                                      4: [ if [K4:32] ((core:= 2 2) 2) [Closure] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4:32] ((core:= 2 2) 2) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4:32] (core:= 2 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (core:= 2 2) ]
[ 2]  32 : MAKE_LABEL	"K4"
                                      2: [ if (core:= 2 2) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (core:= 2 2) [K5:46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (core:= 2 2) [K5:46] [K6:38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (core:= 2 2) [K5:46] [K6:38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (core:= 2 2) [K5:46] [K6:38] begin [Closure] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (core:= 2 2) [K5:46] [K6:38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (core:= 2 2) [K5:46] [K6:38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= 2 2) [K5:46] (begin) ]
[ 4]  38 : MAKE_LABEL	"K6"
                                      4: [ if (core:= 2 2) [K5:46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (core:= 2 2) [K5:46] (begin) [K7:43] ]
[ 5]  40 : LOCAL_GET	0	0	; core:first
                                      6: [ if (core:= 2 2) [K5:46] (begin) [K7:43] ((core:= 2 2) 2) ]
[ 6]  41 : GLOBAL_GET	core:cdr
                                      7: [ if (core:= 2 2) [K5:46] (begin) [K7:43] ((core:= 2 2) 2) [Closure] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (core:= 2 2) [K5:46] (begin) [K7:43] ((core:= 2 2) 2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (core:= 2 2) [K5:46] (begin) [K7:43] (2) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= 2 2) [K5:46] (begin) (2) ]
[ 5]  43 : MAKE_LABEL	"K7"
                                      5: [ if (core:= 2 2) [K5:46] (begin) (2) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (core:= 2 2) [K5:46] (begin) (2) [Closure] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (core:= 2 2) [K5:46] (begin) (2) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (core:= 2 2) [K5:46] (begin 2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (core:= 2 2) (begin 2) ]
[ 3]  46 : MAKE_LABEL	"K5"
                                      3: [ if (core:= 2 2) (begin 2) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (core:= 2 2) (begin 2) [K8:56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (core:= 2 2) (begin 2) [K8:56] [K9:52] ]
[ 5]  49 : PUSH_CONST	core:cond
                                      6: [ if (core:= 2 2) (begin 2) [K8:56] [K9:52] core:cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (core:= 2 2) (begin 2) [K8:56] [K9:52] core:cond [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (core:= 2 2) (begin 2) [K8:56] [K9:52] core:cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (core:= 2 2) (begin 2) [K8:56] [K9:52] (core:cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= 2 2) (begin 2) [K8:56] (core:cond) ]
[ 5]  52 : MAKE_LABEL	"K9"
                                      5: [ if (core:= 2 2) (begin 2) [K8:56] (core:cond) ]
[ 5]  53 : LOCAL_GET	0	1	; core:rest
                                      6: [ if (core:= 2 2) (begin 2) [K8:56] (core:cond) (((core:= 1 4) 4) 0) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (core:= 2 2) (begin 2) [K8:56] (core:cond) (((core:= 1 4) 4) 0) [Closure] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (core:= 2 2) (begin 2) [K8:56] (core:cond) (((core:= 1 4) 4) 0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (core:= 2 2) (begin 2) [K8:56] (core:cond ((core:= 1 4) 4) 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= 2 2) (begin 2) (core:cond ((core:= 1 4) 4) 0) ]
[ 4]  56 : MAKE_LABEL	"K8"
                                      4: [ if (core:= 2 2) (begin 2) (core:cond ((core:= 1 4) 4) 0) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (core:= 2 2) (begin 2) (core:cond ((core:= 1 4) 4) 0) [Closure] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (core:= 2 2) (begin 2) (core:cond ((core:= 1 4) 4) 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (core:= 2 2) (begin 2) (core:cond ((core:= 1 4) 4) 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:cons?
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K2"
	18	LOCAL_GET	0	0	; core:first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; core:first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	MAKE_LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; core:first
	30	GLOBAL_GET	core:car
	31	JMP_CLOSURE	1
32	MAKE_LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	MAKE_LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; core:first
	41	GLOBAL_GET	core:cdr
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	MAKE_LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	core:cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K9"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      2: [ ((core:= 1 4) 4) 0 ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (0) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (0) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4:32] ]
[ 2]  29 : LOCAL_GET	0	0	; core:first
                                      3: [ if [K4:32] ((core:= 1 4) 4) ]
[ 3]  30 : GLOBAL_GET	core:car
                                      4: [ if [K4:32] ((core:= 1 4) 4) [Closure] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4:32] ((core:= 1 4) 4) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4:32] (core:= 1 4) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (core:= 1 4) ]
[ 2]  32 : MAKE_LABEL	"K4"
                                      2: [ if (core:= 1 4) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (core:= 1 4) [K5:46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (core:= 1 4) [K5:46] [K6:38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (core:= 1 4) [K5:46] [K6:38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (core:= 1 4) [K5:46] [K6:38] begin [Closure] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (core:= 1 4) [K5:46] [K6:38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (core:= 1 4) [K5:46] [K6:38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= 1 4) [K5:46] (begin) ]
[ 4]  38 : MAKE_LABEL	"K6"
                                      4: [ if (core:= 1 4) [K5:46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (core:= 1 4) [K5:46] (begin) [K7:43] ]
[ 5]  40 : LOCAL_GET	0	0	; core:first
                                      6: [ if (core:= 1 4) [K5:46] (begin) [K7:43] ((core:= 1 4) 4) ]
[ 6]  41 : GLOBAL_GET	core:cdr
                                      7: [ if (core:= 1 4) [K5:46] (begin) [K7:43] ((core:= 1 4) 4) [Closure] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (core:= 1 4) [K5:46] (begin) [K7:43] ((core:= 1 4) 4) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (core:= 1 4) [K5:46] (begin) [K7:43] (4) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= 1 4) [K5:46] (begin) (4) ]
[ 5]  43 : MAKE_LABEL	"K7"
                                      5: [ if (core:= 1 4) [K5:46] (begin) (4) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (core:= 1 4) [K5:46] (begin) (4) [Closure] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (core:= 1 4) [K5:46] (begin) (4) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (core:= 1 4) [K5:46] (begin 4) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (core:= 1 4) (begin 4) ]
[ 3]  46 : MAKE_LABEL	"K5"
                                      3: [ if (core:= 1 4) (begin 4) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (core:= 1 4) (begin 4) [K8:56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (core:= 1 4) (begin 4) [K8:56] [K9:52] ]
[ 5]  49 : PUSH_CONST	core:cond
                                      6: [ if (core:= 1 4) (begin 4) [K8:56] [K9:52] core:cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (core:= 1 4) (begin 4) [K8:56] [K9:52] core:cond [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (core:= 1 4) (begin 4) [K8:56] [K9:52] core:cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (core:= 1 4) (begin 4) [K8:56] [K9:52] (core:cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= 1 4) (begin 4) [K8:56] (core:cond) ]
[ 5]  52 : MAKE_LABEL	"K9"
                                      5: [ if (core:= 1 4) (begin 4) [K8:56] (core:cond) ]
[ 5]  53 : LOCAL_GET	0	1	; core:rest
                                      6: [ if (core:= 1 4) (begin 4) [K8:56] (core:cond) (0) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (core:= 1 4) (begin 4) [K8:56] (core:cond) (0) [Closure] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (core:= 1 4) (begin 4) [K8:56] (core:cond) (0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (core:= 1 4) (begin 4) [K8:56] (core:cond 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= 1 4) (begin 4) (core:cond 0) ]
[ 4]  56 : MAKE_LABEL	"K8"
                                      4: [ if (core:= 1 4) (begin 4) (core:cond 0) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (core:= 1 4) (begin 4) (core:cond 0) [Closure] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (core:= 1 4) (begin 4) (core:cond 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (core:= 1 4) (begin 4) (core:cond 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:cons?
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K2"
	18	LOCAL_GET	0	0	; core:first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; core:first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	MAKE_LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; core:first
	30	GLOBAL_GET	core:car
	31	JMP_CLOSURE	1
32	MAKE_LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	MAKE_LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; core:first
	41	GLOBAL_GET	core:cdr
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	MAKE_LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	core:cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K9"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      1: [ 0 ]
[ 1]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1:11] ]
[ 1]   8 : LOCAL_GET	0	0	; core:first
                                      2: [ [K1:11] 0 ]
[ 2]   9 : GLOBAL_GET	core:cons?
                                      3: [ [K1:11] 0 [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1:11] 0 ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K1:11] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  11 : MAKE_LABEL	"K1"
                                      1: [ #f ]
[ 1]  12 : JMP_IF_FALSE	"L3"	21
                                      0: [  ]
[ 0]  21 : MAKE_LABEL	"L3"
                                      0: [  ]
[ 0]  22 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]  23 : LOCAL_GET	0	0	; core:first
                                      2: [ begin 0 ]
[ 2]  24 : GLOBAL_GET	list
                                      3: [ begin 0 [Closure] ]
[ 3]  25 : JMP_CLOSURE	2
                                      2: [ begin 0 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	2
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:=
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	MAKE_LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	PUSH_CONST	1
	13	PUSH_CONST	4
	14	GLOBAL_GET	core:=
	15	JMP_CLOSURE	2
16	MAKE_LABEL	"K1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	MAKE_LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

Running...
Executing:  lambda: ((core:cond ((core:= 2 2) 2) ((core:= 1 4) 4) 0))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	2
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:=
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	MAKE_LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	PUSH_CONST	1
	13	PUSH_CONST	4
	14	GLOBAL_GET	core:=
	15	JMP_CLOSURE	2
16	MAKE_LABEL	"K1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	MAKE_LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0:6] ]
[ 1]   2 : PUSH_CONST	2
                                      2: [ [K0:6] 2 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K0:6] 2 2 ]
[ 3]   4 : GLOBAL_GET	core:=
                                      4: [ [K0:6] 2 2 [Closure] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0:6] 2 2 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0:6] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   6 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]   8 : PUSH_CONST	2
                                      1: [ 2 ]
[ 1]   9 : RETURN_VAL
test: got "2"  - expected "2"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (cond ((= 1 2) 2) ((= 4 4) 4) 0)
==>  (core:cond ((core:= 1 2) 2) ((core:= 4 4) 4) 0)
Parsed:  (core:cond ((core:= 1 2) 2) ((core:= 4 4) 4) 0)
Executing:  lambda: ((if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:cons?
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K2"
	18	LOCAL_GET	0	0	; core:first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; core:first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	MAKE_LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; core:first
	30	GLOBAL_GET	core:car
	31	JMP_CLOSURE	1
32	MAKE_LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	MAKE_LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; core:first
	41	GLOBAL_GET	core:cdr
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	MAKE_LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	core:cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K9"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      3: [ ((core:= 1 2) 2) ((core:= 4 4) 4) 0 ]
[ 3]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (((core:= 4 4) 4) 0) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (((core:= 4 4) 4) 0) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (((core:= 4 4) 4) 0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4:32] ]
[ 2]  29 : LOCAL_GET	0	0	; core:first
                                      3: [ if [K4:32] ((core:= 1 2) 2) ]
[ 3]  30 : GLOBAL_GET	core:car
                                      4: [ if [K4:32] ((core:= 1 2) 2) [Closure] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4:32] ((core:= 1 2) 2) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4:32] (core:= 1 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (core:= 1 2) ]
[ 2]  32 : MAKE_LABEL	"K4"
                                      2: [ if (core:= 1 2) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (core:= 1 2) [K5:46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (core:= 1 2) [K5:46] [K6:38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (core:= 1 2) [K5:46] [K6:38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (core:= 1 2) [K5:46] [K6:38] begin [Closure] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (core:= 1 2) [K5:46] [K6:38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (core:= 1 2) [K5:46] [K6:38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= 1 2) [K5:46] (begin) ]
[ 4]  38 : MAKE_LABEL	"K6"
                                      4: [ if (core:= 1 2) [K5:46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (core:= 1 2) [K5:46] (begin) [K7:43] ]
[ 5]  40 : LOCAL_GET	0	0	; core:first
                                      6: [ if (core:= 1 2) [K5:46] (begin) [K7:43] ((core:= 1 2) 2) ]
[ 6]  41 : GLOBAL_GET	core:cdr
                                      7: [ if (core:= 1 2) [K5:46] (begin) [K7:43] ((core:= 1 2) 2) [Closure] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (core:= 1 2) [K5:46] (begin) [K7:43] ((core:= 1 2) 2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (core:= 1 2) [K5:46] (begin) [K7:43] (2) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= 1 2) [K5:46] (begin) (2) ]
[ 5]  43 : MAKE_LABEL	"K7"
                                      5: [ if (core:= 1 2) [K5:46] (begin) (2) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (core:= 1 2) [K5:46] (begin) (2) [Closure] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (core:= 1 2) [K5:46] (begin) (2) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (core:= 1 2) [K5:46] (begin 2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (core:= 1 2) (begin 2) ]
[ 3]  46 : MAKE_LABEL	"K5"
                                      3: [ if (core:= 1 2) (begin 2) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (core:= 1 2) (begin 2) [K8:56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (core:= 1 2) (begin 2) [K8:56] [K9:52] ]
[ 5]  49 : PUSH_CONST	core:cond
                                      6: [ if (core:= 1 2) (begin 2) [K8:56] [K9:52] core:cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (core:= 1 2) (begin 2) [K8:56] [K9:52] core:cond [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (core:= 1 2) (begin 2) [K8:56] [K9:52] core:cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (core:= 1 2) (begin 2) [K8:56] [K9:52] (core:cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= 1 2) (begin 2) [K8:56] (core:cond) ]
[ 5]  52 : MAKE_LABEL	"K9"
                                      5: [ if (core:= 1 2) (begin 2) [K8:56] (core:cond) ]
[ 5]  53 : LOCAL_GET	0	1	; core:rest
                                      6: [ if (core:= 1 2) (begin 2) [K8:56] (core:cond) (((core:= 4 4) 4) 0) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (core:= 1 2) (begin 2) [K8:56] (core:cond) (((core:= 4 4) 4) 0) [Closure] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (core:= 1 2) (begin 2) [K8:56] (core:cond) (((core:= 4 4) 4) 0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (core:= 1 2) (begin 2) [K8:56] (core:cond ((core:= 4 4) 4) 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= 1 2) (begin 2) (core:cond ((core:= 4 4) 4) 0) ]
[ 4]  56 : MAKE_LABEL	"K8"
                                      4: [ if (core:= 1 2) (begin 2) (core:cond ((core:= 4 4) 4) 0) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (core:= 1 2) (begin 2) (core:cond ((core:= 4 4) 4) 0) [Closure] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (core:= 1 2) (begin 2) (core:cond ((core:= 4 4) 4) 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (core:= 1 2) (begin 2) (core:cond ((core:= 4 4) 4) 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:cons?
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K2"
	18	LOCAL_GET	0	0	; core:first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; core:first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	MAKE_LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; core:first
	30	GLOBAL_GET	core:car
	31	JMP_CLOSURE	1
32	MAKE_LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	MAKE_LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; core:first
	41	GLOBAL_GET	core:cdr
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	MAKE_LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	core:cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K9"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      2: [ ((core:= 4 4) 4) 0 ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (0) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (0) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (0) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4:32] ]
[ 2]  29 : LOCAL_GET	0	0	; core:first
                                      3: [ if [K4:32] ((core:= 4 4) 4) ]
[ 3]  30 : GLOBAL_GET	core:car
                                      4: [ if [K4:32] ((core:= 4 4) 4) [Closure] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4:32] ((core:= 4 4) 4) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4:32] (core:= 4 4) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (core:= 4 4) ]
[ 2]  32 : MAKE_LABEL	"K4"
                                      2: [ if (core:= 4 4) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (core:= 4 4) [K5:46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (core:= 4 4) [K5:46] [K6:38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (core:= 4 4) [K5:46] [K6:38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (core:= 4 4) [K5:46] [K6:38] begin [Closure] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (core:= 4 4) [K5:46] [K6:38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (core:= 4 4) [K5:46] [K6:38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= 4 4) [K5:46] (begin) ]
[ 4]  38 : MAKE_LABEL	"K6"
                                      4: [ if (core:= 4 4) [K5:46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (core:= 4 4) [K5:46] (begin) [K7:43] ]
[ 5]  40 : LOCAL_GET	0	0	; core:first
                                      6: [ if (core:= 4 4) [K5:46] (begin) [K7:43] ((core:= 4 4) 4) ]
[ 6]  41 : GLOBAL_GET	core:cdr
                                      7: [ if (core:= 4 4) [K5:46] (begin) [K7:43] ((core:= 4 4) 4) [Closure] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (core:= 4 4) [K5:46] (begin) [K7:43] ((core:= 4 4) 4) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (core:= 4 4) [K5:46] (begin) [K7:43] (4) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= 4 4) [K5:46] (begin) (4) ]
[ 5]  43 : MAKE_LABEL	"K7"
                                      5: [ if (core:= 4 4) [K5:46] (begin) (4) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (core:= 4 4) [K5:46] (begin) (4) [Closure] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (core:= 4 4) [K5:46] (begin) (4) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (core:= 4 4) [K5:46] (begin 4) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (core:= 4 4) (begin 4) ]
[ 3]  46 : MAKE_LABEL	"K5"
                                      3: [ if (core:= 4 4) (begin 4) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (core:= 4 4) (begin 4) [K8:56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (core:= 4 4) (begin 4) [K8:56] [K9:52] ]
[ 5]  49 : PUSH_CONST	core:cond
                                      6: [ if (core:= 4 4) (begin 4) [K8:56] [K9:52] core:cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (core:= 4 4) (begin 4) [K8:56] [K9:52] core:cond [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (core:= 4 4) (begin 4) [K8:56] [K9:52] core:cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (core:= 4 4) (begin 4) [K8:56] [K9:52] (core:cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= 4 4) (begin 4) [K8:56] (core:cond) ]
[ 5]  52 : MAKE_LABEL	"K9"
                                      5: [ if (core:= 4 4) (begin 4) [K8:56] (core:cond) ]
[ 5]  53 : LOCAL_GET	0	1	; core:rest
                                      6: [ if (core:= 4 4) (begin 4) [K8:56] (core:cond) (0) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (core:= 4 4) (begin 4) [K8:56] (core:cond) (0) [Closure] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (core:= 4 4) (begin 4) [K8:56] (core:cond) (0) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (core:= 4 4) (begin 4) [K8:56] (core:cond 0) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= 4 4) (begin 4) (core:cond 0) ]
[ 4]  56 : MAKE_LABEL	"K8"
                                      4: [ if (core:= 4 4) (begin 4) (core:cond 0) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (core:= 4 4) (begin 4) (core:cond 0) [Closure] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (core:= 4 4) (begin 4) (core:cond 0) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (core:= 4 4) (begin 4) (core:cond 0)) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:cons?
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K2"
	18	LOCAL_GET	0	0	; core:first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; core:first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	MAKE_LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; core:first
	30	GLOBAL_GET	core:car
	31	JMP_CLOSURE	1
32	MAKE_LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	MAKE_LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; core:first
	41	GLOBAL_GET	core:cdr
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	MAKE_LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	core:cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K9"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      1: [ 0 ]
[ 1]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1:11] ]
[ 1]   8 : LOCAL_GET	0	0	; core:first
                                      2: [ [K1:11] 0 ]
[ 2]   9 : GLOBAL_GET	core:cons?
                                      3: [ [K1:11] 0 [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1:11] 0 ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K1:11] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  11 : MAKE_LABEL	"K1"
                                      1: [ #f ]
[ 1]  12 : JMP_IF_FALSE	"L3"	21
                                      0: [  ]
[ 0]  21 : MAKE_LABEL	"L3"
                                      0: [  ]
[ 0]  22 : PUSH_CONST	begin
                                      1: [ begin ]
[ 1]  23 : LOCAL_GET	0	0	; core:first
                                      2: [ begin 0 ]
[ 2]  24 : GLOBAL_GET	list
                                      3: [ begin 0 [Closure] ]
[ 3]  25 : JMP_CLOSURE	2
                                      2: [ begin 0 ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      1: [ (begin 0) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:=
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	MAKE_LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	PUSH_CONST	4
	13	PUSH_CONST	4
	14	GLOBAL_GET	core:=
	15	JMP_CLOSURE	2
16	MAKE_LABEL	"K1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	MAKE_LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

Running...
Executing:  lambda: ((core:cond ((core:= 1 2) 2) ((core:= 4 4) 4) 0))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:=
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	JMP_IF_FALSE	"L3"	10
	8	PUSH_CONST	2
	9	RETURN_VAL
10	MAKE_LABEL	"L3"
	11	SAVE_RETURN	"K1"	16
	12	PUSH_CONST	4
	13	PUSH_CONST	4
	14	GLOBAL_GET	core:=
	15	JMP_CLOSURE	2
16	MAKE_LABEL	"K1"
	17	JMP_IF_FALSE	"L2"	20
	18	PUSH_CONST	4
	19	RETURN_VAL
20	MAKE_LABEL	"L2"
	21	PUSH_CONST	0
	22	RETURN_VAL

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0:6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [K0:6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K0:6] 1 2 ]
[ 3]   4 : GLOBAL_GET	core:=
                                      4: [ [K0:6] 1 2 [Closure] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0:6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0:6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L3"	10
                                      0: [  ]
[ 0]  10 : MAKE_LABEL	"L3"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"K1"	16
                                      1: [ [K1:16] ]
[ 1]  12 : PUSH_CONST	4
                                      2: [ [K1:16] 4 ]
[ 2]  13 : PUSH_CONST	4
                                      3: [ [K1:16] 4 4 ]
[ 3]  14 : GLOBAL_GET	core:=
                                      4: [ [K1:16] 4 4 [Closure] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [K1:16] 4 4 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K1:16] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  16 : MAKE_LABEL	"K1"
                                      1: [ #t ]
[ 1]  17 : JMP_IF_FALSE	"L2"	20
                                      0: [  ]
[ 0]  18 : PUSH_CONST	4
                                      1: [ 4 ]
[ 1]  19 : RETURN_VAL
test: got "4"  - expected "4"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (case (+ 1 2) (2 #f) (3 #t) 'error)
==>  (core:case (core:+ 1 2) (2 #f) (3 #t) (quote foo:error))
Parsed:  (core:case (core:+ 1 2) (2 #f) (3 #t) (quote foo:error))
Executing:  lambda: ((core:let* ((core:keyval (core:gensym "KEY"))) (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	PUSH_CONST	"KEY"
	3	GLOBAL_GET	core:gensym
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	MAKE_CLOSURE	[Closure]	; ((begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))
		0	MAKE_ENV	1
		1	PUSH_CONST	core:let
		2	SAVE_RETURN	"K1"	11
		3	SAVE_RETURN	"K2"	8
		4	LOCAL_GET	0	0	; core:keyval
		5	LOCAL_GET	1	0	; core:key
		6	GLOBAL_GET	list
		7	JMP_CLOSURE	2
	8	MAKE_LABEL	"K2"
		9	GLOBAL_GET	list
		10	JMP_CLOSURE	1
	11	MAKE_LABEL	"K1"
		12	SAVE_RETURN	"K3"	26
		13	SAVE_RETURN	"K4"	17
		14	PUSH_CONST	core:cond
		15	GLOBAL_GET	list
		16	JMP_CLOSURE	1
	17	MAKE_LABEL	"K4"
		18	SAVE_RETURN	"K5"	23
		19	MAKE_CLOSURE	[Closure]	; ((if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt))
			0	MAKE_ENV	1
			1	SAVE_RETURN	"K6"	5
			2	LOCAL_GET	0	0	; core:elt
			3	GLOBAL_GET	core:cons?
			4	JMP_CLOSURE	1
		5	MAKE_LABEL	"K6"
			6	JMP_IF_FALSE	"L10"	25
			7	SAVE_RETURN	"K7"	17
			8	PUSH_CONST	core:=
			9	LOCAL_GET	1	0	; core:keyval
			10	SAVE_RETURN	"K8"	14
			11	LOCAL_GET	0	0	; core:elt
			12	GLOBAL_GET	core:car
			13	JMP_CLOSURE	1
		14	MAKE_LABEL	"K8"
			15	GLOBAL_GET	core:list
			16	JMP_CLOSURE	3
		17	MAKE_LABEL	"K7"
			18	SAVE_RETURN	"K9"	22
			19	LOCAL_GET	0	0	; core:elt
			20	GLOBAL_GET	core:cdr
			21	JMP_CLOSURE	1
		22	MAKE_LABEL	"K9"
			23	GLOBAL_GET	core:cons
			24	JMP_CLOSURE	2
		25	MAKE_LABEL	"L10"
			26	LOCAL_GET	0	0	; core:elt
			27	RETURN_VAL
		20	LOCAL_GET	1	1	; core:rest
		21	GLOBAL_GET	core:map
		22	JMP_CLOSURE	2
	23	MAKE_LABEL	"K5"
		24	GLOBAL_GET	append
		25	JMP_CLOSURE	2
	26	MAKE_LABEL	"K3"
		27	GLOBAL_GET	list
		28	JMP_CLOSURE	3
	7	JMP_CLOSURE	1

                                      4: [ (core:+ 1 2) (2 #f) (3 #t) (quote foo:error) ]
[ 4]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : PUSH_CONST	"KEY"
                                      2: [ [K0:5] "KEY" ]
[ 2]   3 : GLOBAL_GET	core:gensym
                                      3: [ [K0:5] "KEY" [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] "KEY" ]
[ 2]   0 : CALL_PRIMOP	"gensym"
                                      2: [ [K0:5] foo:KEY4 ]
[ 2]   1 : RETURN_VAL
                                      1: [ foo:KEY4 ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ foo:KEY4 ]
[ 1]   6 : MAKE_CLOSURE	[Closure]	; ((begin (list (quote core:let) (list (list core:keyval core:key)) (append (list (quote core:cond)) (core:map (lambda (core:elt) (if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt)) core:rest)))))
                                      2: [ foo:KEY4 [Closure] ]
[ 2]   7 : JMP_CLOSURE	1
                                      1: [ foo:KEY4 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : PUSH_CONST	core:let
                                      1: [ core:let ]
[ 1]   2 : SAVE_RETURN	"K1"	11
                                      2: [ core:let [K1:11] ]
[ 2]   3 : SAVE_RETURN	"K2"	8
                                      3: [ core:let [K1:11] [K2:8] ]
[ 3]   4 : LOCAL_GET	0	0	; core:keyval
                                      4: [ core:let [K1:11] [K2:8] foo:KEY4 ]
[ 4]   5 : LOCAL_GET	1	0	; core:key
                                      5: [ core:let [K1:11] [K2:8] foo:KEY4 (core:+ 1 2) ]
[ 5]   6 : GLOBAL_GET	list
                                      6: [ core:let [K1:11] [K2:8] foo:KEY4 (core:+ 1 2) [Closure] ]
[ 6]   7 : JMP_CLOSURE	2
                                      5: [ core:let [K1:11] [K2:8] foo:KEY4 (core:+ 1 2) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      4: [ core:let [K1:11] [K2:8] (foo:KEY4 (core:+ 1 2)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:let [K1:11] (foo:KEY4 (core:+ 1 2)) ]
[ 3]   8 : MAKE_LABEL	"K2"
                                      3: [ core:let [K1:11] (foo:KEY4 (core:+ 1 2)) ]
[ 3]   9 : GLOBAL_GET	list
                                      4: [ core:let [K1:11] (foo:KEY4 (core:+ 1 2)) [Closure] ]
[ 4]  10 : JMP_CLOSURE	1
                                      3: [ core:let [K1:11] (foo:KEY4 (core:+ 1 2)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      3: [ core:let [K1:11] ((foo:KEY4 (core:+ 1 2))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ core:let ((foo:KEY4 (core:+ 1 2))) ]
[ 2]  11 : MAKE_LABEL	"K1"
                                      2: [ core:let ((foo:KEY4 (core:+ 1 2))) ]
[ 2]  12 : SAVE_RETURN	"K3"	26
                                      3: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] ]
[ 3]  13 : SAVE_RETURN	"K4"	17
                                      4: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] [K4:17] ]
[ 4]  14 : PUSH_CONST	core:cond
                                      5: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] [K4:17] core:cond ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] [K4:17] core:cond [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] [K4:17] core:cond ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] [K4:17] (core:cond) ]
[ 5]   1 : RETURN_VAL
                                      4: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond) ]
[ 4]  17 : MAKE_LABEL	"K4"
                                      4: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond) ]
[ 4]  18 : SAVE_RETURN	"K5"	23
                                      5: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond) [K5:23] ]
[ 5]  19 : MAKE_CLOSURE	[Closure]	; ((if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt))
                                      6: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond) [K5:23] [Closure] ]
[ 6]  20 : LOCAL_GET	1	1	; core:rest
                                      7: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond) [K5:23] [Closure] ((2 #f) (3 #t) (quote foo:error)) ]
[ 7]  21 : GLOBAL_GET	core:map
                                      8: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond) [K5:23] [Closure] ((2 #f) (3 #t) (quote foo:error)) [Closure] ]
[ 8]  22 : JMP_CLOSURE	2
                                      7: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond) [K5:23] [Closure] ((2 #f) (3 #t) (quote foo:error)) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  lambda: ((if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt))
	0	MAKE_ENV	1
	1	SAVE_RETURN	"K6"	5
	2	LOCAL_GET	0	0	; core:elt
	3	GLOBAL_GET	core:cons?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K6"
	6	JMP_IF_FALSE	"L10"	25
	7	SAVE_RETURN	"K7"	17
	8	PUSH_CONST	core:=
	9	LOCAL_GET	1	0	; core:keyval
	10	SAVE_RETURN	"K8"	14
	11	LOCAL_GET	0	0	; core:elt
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"K8"
	15	GLOBAL_GET	core:list
	16	JMP_CLOSURE	3
17	MAKE_LABEL	"K7"
	18	SAVE_RETURN	"K9"	22
	19	LOCAL_GET	0	0	; core:elt
	20	GLOBAL_GET	core:cdr
	21	JMP_CLOSURE	1
22	MAKE_LABEL	"K9"
	23	GLOBAL_GET	core:cons
	24	JMP_CLOSURE	2
25	MAKE_LABEL	"L10"
	26	LOCAL_GET	0	0	; core:elt
	27	RETURN_VAL

                                      1: [ (2 #f) ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K6"	5
                                      1: [ [K6:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:elt
                                      2: [ [K6:5] (2 #f) ]
[ 2]   3 : GLOBAL_GET	core:cons?
                                      3: [ [K6:5] (2 #f) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K6:5] (2 #f) ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K6:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K6"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	25
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K7"	17
                                      1: [ [K7:17] ]
[ 1]   8 : PUSH_CONST	core:=
                                      2: [ [K7:17] core:= ]
[ 2]   9 : LOCAL_GET	1	0	; core:keyval
                                      3: [ [K7:17] core:= foo:KEY4 ]
[ 3]  10 : SAVE_RETURN	"K8"	14
                                      4: [ [K7:17] core:= foo:KEY4 [K8:14] ]
[ 4]  11 : LOCAL_GET	0	0	; core:elt
                                      5: [ [K7:17] core:= foo:KEY4 [K8:14] (2 #f) ]
[ 5]  12 : GLOBAL_GET	core:car
                                      6: [ [K7:17] core:= foo:KEY4 [K8:14] (2 #f) [Closure] ]
[ 6]  13 : JMP_CLOSURE	1
                                      5: [ [K7:17] core:= foo:KEY4 [K8:14] (2 #f) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [K7:17] core:= foo:KEY4 [K8:14] 2 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K7:17] core:= foo:KEY4 2 ]
[ 4]  14 : MAKE_LABEL	"K8"
                                      4: [ [K7:17] core:= foo:KEY4 2 ]
[ 4]  15 : GLOBAL_GET	core:list
                                      5: [ [K7:17] core:= foo:KEY4 2 [Closure] ]
[ 5]  16 : JMP_CLOSURE	3
                                      4: [ [K7:17] core:= foo:KEY4 2 ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      2: [ [K7:17] (core:= foo:KEY4 2) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (core:= foo:KEY4 2) ]
[ 1]  17 : MAKE_LABEL	"K7"
                                      1: [ (core:= foo:KEY4 2) ]
[ 1]  18 : SAVE_RETURN	"K9"	22
                                      2: [ (core:= foo:KEY4 2) [K9:22] ]
[ 2]  19 : LOCAL_GET	0	0	; core:elt
                                      3: [ (core:= foo:KEY4 2) [K9:22] (2 #f) ]
[ 3]  20 : GLOBAL_GET	core:cdr
                                      4: [ (core:= foo:KEY4 2) [K9:22] (2 #f) [Closure] ]
[ 4]  21 : JMP_CLOSURE	1
                                      3: [ (core:= foo:KEY4 2) [K9:22] (2 #f) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ (core:= foo:KEY4 2) [K9:22] (#f) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (core:= foo:KEY4 2) (#f) ]
[ 2]  22 : MAKE_LABEL	"K9"
                                      2: [ (core:= foo:KEY4 2) (#f) ]
[ 2]  23 : GLOBAL_GET	core:cons
                                      3: [ (core:= foo:KEY4 2) (#f) [Closure] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ (core:= foo:KEY4 2) (#f) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ ((core:= foo:KEY4 2) #f) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt))
	0	MAKE_ENV	1
	1	SAVE_RETURN	"K6"	5
	2	LOCAL_GET	0	0	; core:elt
	3	GLOBAL_GET	core:cons?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K6"
	6	JMP_IF_FALSE	"L10"	25
	7	SAVE_RETURN	"K7"	17
	8	PUSH_CONST	core:=
	9	LOCAL_GET	1	0	; core:keyval
	10	SAVE_RETURN	"K8"	14
	11	LOCAL_GET	0	0	; core:elt
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"K8"
	15	GLOBAL_GET	core:list
	16	JMP_CLOSURE	3
17	MAKE_LABEL	"K7"
	18	SAVE_RETURN	"K9"	22
	19	LOCAL_GET	0	0	; core:elt
	20	GLOBAL_GET	core:cdr
	21	JMP_CLOSURE	1
22	MAKE_LABEL	"K9"
	23	GLOBAL_GET	core:cons
	24	JMP_CLOSURE	2
25	MAKE_LABEL	"L10"
	26	LOCAL_GET	0	0	; core:elt
	27	RETURN_VAL

                                      1: [ (3 #t) ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K6"	5
                                      1: [ [K6:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:elt
                                      2: [ [K6:5] (3 #t) ]
[ 2]   3 : GLOBAL_GET	core:cons?
                                      3: [ [K6:5] (3 #t) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K6:5] (3 #t) ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K6:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K6"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	25
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K7"	17
                                      1: [ [K7:17] ]
[ 1]   8 : PUSH_CONST	core:=
                                      2: [ [K7:17] core:= ]
[ 2]   9 : LOCAL_GET	1	0	; core:keyval
                                      3: [ [K7:17] core:= foo:KEY4 ]
[ 3]  10 : SAVE_RETURN	"K8"	14
                                      4: [ [K7:17] core:= foo:KEY4 [K8:14] ]
[ 4]  11 : LOCAL_GET	0	0	; core:elt
                                      5: [ [K7:17] core:= foo:KEY4 [K8:14] (3 #t) ]
[ 5]  12 : GLOBAL_GET	core:car
                                      6: [ [K7:17] core:= foo:KEY4 [K8:14] (3 #t) [Closure] ]
[ 6]  13 : JMP_CLOSURE	1
                                      5: [ [K7:17] core:= foo:KEY4 [K8:14] (3 #t) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [K7:17] core:= foo:KEY4 [K8:14] 3 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K7:17] core:= foo:KEY4 3 ]
[ 4]  14 : MAKE_LABEL	"K8"
                                      4: [ [K7:17] core:= foo:KEY4 3 ]
[ 4]  15 : GLOBAL_GET	core:list
                                      5: [ [K7:17] core:= foo:KEY4 3 [Closure] ]
[ 5]  16 : JMP_CLOSURE	3
                                      4: [ [K7:17] core:= foo:KEY4 3 ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      2: [ [K7:17] (core:= foo:KEY4 3) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (core:= foo:KEY4 3) ]
[ 1]  17 : MAKE_LABEL	"K7"
                                      1: [ (core:= foo:KEY4 3) ]
[ 1]  18 : SAVE_RETURN	"K9"	22
                                      2: [ (core:= foo:KEY4 3) [K9:22] ]
[ 2]  19 : LOCAL_GET	0	0	; core:elt
                                      3: [ (core:= foo:KEY4 3) [K9:22] (3 #t) ]
[ 3]  20 : GLOBAL_GET	core:cdr
                                      4: [ (core:= foo:KEY4 3) [K9:22] (3 #t) [Closure] ]
[ 4]  21 : JMP_CLOSURE	1
                                      3: [ (core:= foo:KEY4 3) [K9:22] (3 #t) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ (core:= foo:KEY4 3) [K9:22] (#t) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (core:= foo:KEY4 3) (#t) ]
[ 2]  22 : MAKE_LABEL	"K9"
                                      2: [ (core:= foo:KEY4 3) (#t) ]
[ 2]  23 : GLOBAL_GET	core:cons
                                      3: [ (core:= foo:KEY4 3) (#t) [Closure] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ (core:= foo:KEY4 3) (#t) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ ((core:= foo:KEY4 3) #t) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:cons? core:elt) (core:cons (core:list (quote core:=) core:keyval (core:car core:elt)) (core:cdr core:elt)) core:elt))
	0	MAKE_ENV	1
	1	SAVE_RETURN	"K6"	5
	2	LOCAL_GET	0	0	; core:elt
	3	GLOBAL_GET	core:cons?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K6"
	6	JMP_IF_FALSE	"L10"	25
	7	SAVE_RETURN	"K7"	17
	8	PUSH_CONST	core:=
	9	LOCAL_GET	1	0	; core:keyval
	10	SAVE_RETURN	"K8"	14
	11	LOCAL_GET	0	0	; core:elt
	12	GLOBAL_GET	core:car
	13	JMP_CLOSURE	1
14	MAKE_LABEL	"K8"
	15	GLOBAL_GET	core:list
	16	JMP_CLOSURE	3
17	MAKE_LABEL	"K7"
	18	SAVE_RETURN	"K9"	22
	19	LOCAL_GET	0	0	; core:elt
	20	GLOBAL_GET	core:cdr
	21	JMP_CLOSURE	1
22	MAKE_LABEL	"K9"
	23	GLOBAL_GET	core:cons
	24	JMP_CLOSURE	2
25	MAKE_LABEL	"L10"
	26	LOCAL_GET	0	0	; core:elt
	27	RETURN_VAL

                                      1: [ (quote foo:error) ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K6"	5
                                      1: [ [K6:5] ]
[ 1]   2 : LOCAL_GET	0	0	; core:elt
                                      2: [ [K6:5] (quote foo:error) ]
[ 2]   3 : GLOBAL_GET	core:cons?
                                      3: [ [K6:5] (quote foo:error) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K6:5] (quote foo:error) ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K6:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K6"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	25
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K7"	17
                                      1: [ [K7:17] ]
[ 1]   8 : PUSH_CONST	core:=
                                      2: [ [K7:17] core:= ]
[ 2]   9 : LOCAL_GET	1	0	; core:keyval
                                      3: [ [K7:17] core:= foo:KEY4 ]
[ 3]  10 : SAVE_RETURN	"K8"	14
                                      4: [ [K7:17] core:= foo:KEY4 [K8:14] ]
[ 4]  11 : LOCAL_GET	0	0	; core:elt
                                      5: [ [K7:17] core:= foo:KEY4 [K8:14] (quote foo:error) ]
[ 5]  12 : GLOBAL_GET	core:car
                                      6: [ [K7:17] core:= foo:KEY4 [K8:14] (quote foo:error) [Closure] ]
[ 6]  13 : JMP_CLOSURE	1
                                      5: [ [K7:17] core:= foo:KEY4 [K8:14] (quote foo:error) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [K7:17] core:= foo:KEY4 [K8:14] quote ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K7:17] core:= foo:KEY4 quote ]
[ 4]  14 : MAKE_LABEL	"K8"
                                      4: [ [K7:17] core:= foo:KEY4 quote ]
[ 4]  15 : GLOBAL_GET	core:list
                                      5: [ [K7:17] core:= foo:KEY4 quote [Closure] ]
[ 5]  16 : JMP_CLOSURE	3
                                      4: [ [K7:17] core:= foo:KEY4 quote ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      2: [ [K7:17] (core:= foo:KEY4 quote) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (core:= foo:KEY4 quote) ]
[ 1]  17 : MAKE_LABEL	"K7"
                                      1: [ (core:= foo:KEY4 quote) ]
[ 1]  18 : SAVE_RETURN	"K9"	22
                                      2: [ (core:= foo:KEY4 quote) [K9:22] ]
[ 2]  19 : LOCAL_GET	0	0	; core:elt
                                      3: [ (core:= foo:KEY4 quote) [K9:22] (quote foo:error) ]
[ 3]  20 : GLOBAL_GET	core:cdr
                                      4: [ (core:= foo:KEY4 quote) [K9:22] (quote foo:error) [Closure] ]
[ 4]  21 : JMP_CLOSURE	1
                                      3: [ (core:= foo:KEY4 quote) [K9:22] (quote foo:error) ]
[ 3]   0 : CALL_PRIMOP	"cdr"
                                      3: [ (core:= foo:KEY4 quote) [K9:22] (foo:error) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (core:= foo:KEY4 quote) (foo:error) ]
[ 2]  22 : MAKE_LABEL	"K9"
                                      2: [ (core:= foo:KEY4 quote) (foo:error) ]
[ 2]  23 : GLOBAL_GET	core:cons
                                      3: [ (core:= foo:KEY4 quote) (foo:error) [Closure] ]
[ 3]  24 : JMP_CLOSURE	2
                                      2: [ (core:= foo:KEY4 quote) (foo:error) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ ((core:= foo:KEY4 quote) foo:error) ]
[ 1]   1 : RETURN_VAL
                                      6: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond) [K5:23] (((core:= foo:KEY4 2) #f) ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 6]   1 : RETURN_VAL
                                      5: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond) (((core:= foo:KEY4 2) #f) ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 5]  23 : MAKE_LABEL	"K5"
                                      5: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond) (((core:= foo:KEY4 2) #f) ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 5]  24 : GLOBAL_GET	append
                                      6: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond) (((core:= foo:KEY4 2) #f) ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) [Closure] ]
[ 6]  25 : JMP_CLOSURE	2
                                      5: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond) (((core:= foo:KEY4 2) #f) ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ core:let ((foo:KEY4 (core:+ 1 2))) [K3:26] (core:cond ((core:= foo:KEY4 2) #f) ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 4]   1 : RETURN_VAL
                                      3: [ core:let ((foo:KEY4 (core:+ 1 2))) (core:cond ((core:= foo:KEY4 2) #f) ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 3]  26 : MAKE_LABEL	"K3"
                                      3: [ core:let ((foo:KEY4 (core:+ 1 2))) (core:cond ((core:= foo:KEY4 2) #f) ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 3]  27 : GLOBAL_GET	list
                                      4: [ core:let ((foo:KEY4 (core:+ 1 2))) (core:cond ((core:= foo:KEY4 2) #f) ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) [Closure] ]
[ 4]  28 : JMP_CLOSURE	3
                                      3: [ core:let ((foo:KEY4 (core:+ 1 2))) (core:cond ((core:= foo:KEY4 2) #f) ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (core:let ((foo:KEY4 (core:+ 1 2))) (core:cond ((core:= foo:KEY4 2) #f) ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error))) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:cons?
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K2"
	18	LOCAL_GET	0	0	; core:first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; core:first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	MAKE_LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; core:first
	30	GLOBAL_GET	core:car
	31	JMP_CLOSURE	1
32	MAKE_LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	MAKE_LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; core:first
	41	GLOBAL_GET	core:cdr
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	MAKE_LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	core:cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K9"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      3: [ ((core:= foo:KEY4 2) #f) ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error) ]
[ 3]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4:32] ]
[ 2]  29 : LOCAL_GET	0	0	; core:first
                                      3: [ if [K4:32] ((core:= foo:KEY4 2) #f) ]
[ 3]  30 : GLOBAL_GET	core:car
                                      4: [ if [K4:32] ((core:= foo:KEY4 2) #f) [Closure] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4:32] ((core:= foo:KEY4 2) #f) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4:32] (core:= foo:KEY4 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (core:= foo:KEY4 2) ]
[ 2]  32 : MAKE_LABEL	"K4"
                                      2: [ if (core:= foo:KEY4 2) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (core:= foo:KEY4 2) [K5:46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (core:= foo:KEY4 2) [K5:46] [K6:38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (core:= foo:KEY4 2) [K5:46] [K6:38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (core:= foo:KEY4 2) [K5:46] [K6:38] begin [Closure] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (core:= foo:KEY4 2) [K5:46] [K6:38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (core:= foo:KEY4 2) [K5:46] [K6:38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= foo:KEY4 2) [K5:46] (begin) ]
[ 4]  38 : MAKE_LABEL	"K6"
                                      4: [ if (core:= foo:KEY4 2) [K5:46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (core:= foo:KEY4 2) [K5:46] (begin) [K7:43] ]
[ 5]  40 : LOCAL_GET	0	0	; core:first
                                      6: [ if (core:= foo:KEY4 2) [K5:46] (begin) [K7:43] ((core:= foo:KEY4 2) #f) ]
[ 6]  41 : GLOBAL_GET	core:cdr
                                      7: [ if (core:= foo:KEY4 2) [K5:46] (begin) [K7:43] ((core:= foo:KEY4 2) #f) [Closure] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (core:= foo:KEY4 2) [K5:46] (begin) [K7:43] ((core:= foo:KEY4 2) #f) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (core:= foo:KEY4 2) [K5:46] (begin) [K7:43] (#f) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= foo:KEY4 2) [K5:46] (begin) (#f) ]
[ 5]  43 : MAKE_LABEL	"K7"
                                      5: [ if (core:= foo:KEY4 2) [K5:46] (begin) (#f) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (core:= foo:KEY4 2) [K5:46] (begin) (#f) [Closure] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (core:= foo:KEY4 2) [K5:46] (begin) (#f) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (core:= foo:KEY4 2) [K5:46] (begin #f) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (core:= foo:KEY4 2) (begin #f) ]
[ 3]  46 : MAKE_LABEL	"K5"
                                      3: [ if (core:= foo:KEY4 2) (begin #f) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (core:= foo:KEY4 2) (begin #f) [K8:56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (core:= foo:KEY4 2) (begin #f) [K8:56] [K9:52] ]
[ 5]  49 : PUSH_CONST	core:cond
                                      6: [ if (core:= foo:KEY4 2) (begin #f) [K8:56] [K9:52] core:cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (core:= foo:KEY4 2) (begin #f) [K8:56] [K9:52] core:cond [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (core:= foo:KEY4 2) (begin #f) [K8:56] [K9:52] core:cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (core:= foo:KEY4 2) (begin #f) [K8:56] [K9:52] (core:cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= foo:KEY4 2) (begin #f) [K8:56] (core:cond) ]
[ 5]  52 : MAKE_LABEL	"K9"
                                      5: [ if (core:= foo:KEY4 2) (begin #f) [K8:56] (core:cond) ]
[ 5]  53 : LOCAL_GET	0	1	; core:rest
                                      6: [ if (core:= foo:KEY4 2) (begin #f) [K8:56] (core:cond) (((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (core:= foo:KEY4 2) (begin #f) [K8:56] (core:cond) (((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) [Closure] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (core:= foo:KEY4 2) (begin #f) [K8:56] (core:cond) (((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (core:= foo:KEY4 2) (begin #f) [K8:56] (core:cond ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= foo:KEY4 2) (begin #f) (core:cond ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 4]  56 : MAKE_LABEL	"K8"
                                      4: [ if (core:= foo:KEY4 2) (begin #f) (core:cond ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (core:= foo:KEY4 2) (begin #f) (core:cond ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) [Closure] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (core:= foo:KEY4 2) (begin #f) (core:cond ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error)) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (core:= foo:KEY4 2) (begin #f) (core:cond ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error))) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:cons?
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K2"
	18	LOCAL_GET	0	0	; core:first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; core:first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	MAKE_LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; core:first
	30	GLOBAL_GET	core:car
	31	JMP_CLOSURE	1
32	MAKE_LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	MAKE_LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; core:first
	41	GLOBAL_GET	core:cdr
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	MAKE_LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	core:cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K9"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      2: [ ((core:= foo:KEY4 3) #t) ((core:= foo:KEY4 quote) foo:error) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] (((core:= foo:KEY4 quote) foo:error)) ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] (((core:= foo:KEY4 quote) foo:error)) [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] (((core:= foo:KEY4 quote) foo:error)) ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]  26 : MAKE_LABEL	"L10"
                                      0: [  ]
[ 0]  27 : PUSH_CONST	if
                                      1: [ if ]
[ 1]  28 : SAVE_RETURN	"K4"	32
                                      2: [ if [K4:32] ]
[ 2]  29 : LOCAL_GET	0	0	; core:first
                                      3: [ if [K4:32] ((core:= foo:KEY4 3) #t) ]
[ 3]  30 : GLOBAL_GET	core:car
                                      4: [ if [K4:32] ((core:= foo:KEY4 3) #t) [Closure] ]
[ 4]  31 : JMP_CLOSURE	1
                                      3: [ if [K4:32] ((core:= foo:KEY4 3) #t) ]
[ 3]   0 : CALL_PRIMOP	"car"
                                      3: [ if [K4:32] (core:= foo:KEY4 3) ]
[ 3]   1 : RETURN_VAL
                                      2: [ if (core:= foo:KEY4 3) ]
[ 2]  32 : MAKE_LABEL	"K4"
                                      2: [ if (core:= foo:KEY4 3) ]
[ 2]  33 : SAVE_RETURN	"K5"	46
                                      3: [ if (core:= foo:KEY4 3) [K5:46] ]
[ 3]  34 : SAVE_RETURN	"K6"	38
                                      4: [ if (core:= foo:KEY4 3) [K5:46] [K6:38] ]
[ 4]  35 : PUSH_CONST	begin
                                      5: [ if (core:= foo:KEY4 3) [K5:46] [K6:38] begin ]
[ 5]  36 : GLOBAL_GET	list
                                      6: [ if (core:= foo:KEY4 3) [K5:46] [K6:38] begin [Closure] ]
[ 6]  37 : JMP_CLOSURE	1
                                      5: [ if (core:= foo:KEY4 3) [K5:46] [K6:38] begin ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ if (core:= foo:KEY4 3) [K5:46] [K6:38] (begin) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= foo:KEY4 3) [K5:46] (begin) ]
[ 4]  38 : MAKE_LABEL	"K6"
                                      4: [ if (core:= foo:KEY4 3) [K5:46] (begin) ]
[ 4]  39 : SAVE_RETURN	"K7"	43
                                      5: [ if (core:= foo:KEY4 3) [K5:46] (begin) [K7:43] ]
[ 5]  40 : LOCAL_GET	0	0	; core:first
                                      6: [ if (core:= foo:KEY4 3) [K5:46] (begin) [K7:43] ((core:= foo:KEY4 3) #t) ]
[ 6]  41 : GLOBAL_GET	core:cdr
                                      7: [ if (core:= foo:KEY4 3) [K5:46] (begin) [K7:43] ((core:= foo:KEY4 3) #t) [Closure] ]
[ 7]  42 : JMP_CLOSURE	1
                                      6: [ if (core:= foo:KEY4 3) [K5:46] (begin) [K7:43] ((core:= foo:KEY4 3) #t) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ if (core:= foo:KEY4 3) [K5:46] (begin) [K7:43] (#t) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= foo:KEY4 3) [K5:46] (begin) (#t) ]
[ 5]  43 : MAKE_LABEL	"K7"
                                      5: [ if (core:= foo:KEY4 3) [K5:46] (begin) (#t) ]
[ 5]  44 : GLOBAL_GET	append
                                      6: [ if (core:= foo:KEY4 3) [K5:46] (begin) (#t) [Closure] ]
[ 6]  45 : JMP_CLOSURE	2
                                      5: [ if (core:= foo:KEY4 3) [K5:46] (begin) (#t) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      4: [ if (core:= foo:KEY4 3) [K5:46] (begin #t) ]
[ 4]   1 : RETURN_VAL
                                      3: [ if (core:= foo:KEY4 3) (begin #t) ]
[ 3]  46 : MAKE_LABEL	"K5"
                                      3: [ if (core:= foo:KEY4 3) (begin #t) ]
[ 3]  47 : SAVE_RETURN	"K8"	56
                                      4: [ if (core:= foo:KEY4 3) (begin #t) [K8:56] ]
[ 4]  48 : SAVE_RETURN	"K9"	52
                                      5: [ if (core:= foo:KEY4 3) (begin #t) [K8:56] [K9:52] ]
[ 5]  49 : PUSH_CONST	core:cond
                                      6: [ if (core:= foo:KEY4 3) (begin #t) [K8:56] [K9:52] core:cond ]
[ 6]  50 : GLOBAL_GET	list
                                      7: [ if (core:= foo:KEY4 3) (begin #t) [K8:56] [K9:52] core:cond [Closure] ]
[ 7]  51 : JMP_CLOSURE	1
                                      6: [ if (core:= foo:KEY4 3) (begin #t) [K8:56] [K9:52] core:cond ]
[ 6]   0 : CALL_PRIMOP	"list"
                                      6: [ if (core:= foo:KEY4 3) (begin #t) [K8:56] [K9:52] (core:cond) ]
[ 6]   1 : RETURN_VAL
                                      5: [ if (core:= foo:KEY4 3) (begin #t) [K8:56] (core:cond) ]
[ 5]  52 : MAKE_LABEL	"K9"
                                      5: [ if (core:= foo:KEY4 3) (begin #t) [K8:56] (core:cond) ]
[ 5]  53 : LOCAL_GET	0	1	; core:rest
                                      6: [ if (core:= foo:KEY4 3) (begin #t) [K8:56] (core:cond) (((core:= foo:KEY4 quote) foo:error)) ]
[ 6]  54 : GLOBAL_GET	append
                                      7: [ if (core:= foo:KEY4 3) (begin #t) [K8:56] (core:cond) (((core:= foo:KEY4 quote) foo:error)) [Closure] ]
[ 7]  55 : JMP_CLOSURE	2
                                      6: [ if (core:= foo:KEY4 3) (begin #t) [K8:56] (core:cond) (((core:= foo:KEY4 quote) foo:error)) ]
[ 6]   0 : CALL_PRIMOP	"append"
                                      5: [ if (core:= foo:KEY4 3) (begin #t) [K8:56] (core:cond ((core:= foo:KEY4 quote) foo:error)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ if (core:= foo:KEY4 3) (begin #t) (core:cond ((core:= foo:KEY4 quote) foo:error)) ]
[ 4]  56 : MAKE_LABEL	"K8"
                                      4: [ if (core:= foo:KEY4 3) (begin #t) (core:cond ((core:= foo:KEY4 quote) foo:error)) ]
[ 4]  57 : GLOBAL_GET	list
                                      5: [ if (core:= foo:KEY4 3) (begin #t) (core:cond ((core:= foo:KEY4 quote) foo:error)) [Closure] ]
[ 5]  58 : JMP_CLOSURE	4
                                      4: [ if (core:= foo:KEY4 3) (begin #t) (core:cond ((core:= foo:KEY4 quote) foo:error)) ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      1: [ (if (core:= foo:KEY4 3) (begin #t) (core:cond ((core:= foo:KEY4 quote) foo:error))) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((if (core:null? core:rest) (if (core:cons? core:first) (append (list (quote begin)) core:first) (list (quote begin) core:first)) (list (quote if) (core:car core:first) (append (list (quote begin)) (core:cdr core:first)) (append (list (quote core:cond)) core:rest))))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	5
	2	LOCAL_GET	0	1	; core:rest
	3	GLOBAL_GET	core:null?
	4	JMP_CLOSURE	1
5	MAKE_LABEL	"K0"
	6	JMP_IF_FALSE	"L10"	26
	7	SAVE_RETURN	"K1"	11
	8	LOCAL_GET	0	0	; core:first
	9	GLOBAL_GET	core:cons?
	10	JMP_CLOSURE	1
11	MAKE_LABEL	"K1"
	12	JMP_IF_FALSE	"L3"	21
	13	SAVE_RETURN	"K2"	17
	14	PUSH_CONST	begin
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K2"
	18	LOCAL_GET	0	0	; core:first
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	2
21	MAKE_LABEL	"L3"
	22	PUSH_CONST	begin
	23	LOCAL_GET	0	0	; core:first
	24	GLOBAL_GET	list
	25	JMP_CLOSURE	2
26	MAKE_LABEL	"L10"
	27	PUSH_CONST	if
	28	SAVE_RETURN	"K4"	32
	29	LOCAL_GET	0	0	; core:first
	30	GLOBAL_GET	core:car
	31	JMP_CLOSURE	1
32	MAKE_LABEL	"K4"
	33	SAVE_RETURN	"K5"	46
	34	SAVE_RETURN	"K6"	38
	35	PUSH_CONST	begin
	36	GLOBAL_GET	list
	37	JMP_CLOSURE	1
38	MAKE_LABEL	"K6"
	39	SAVE_RETURN	"K7"	43
	40	LOCAL_GET	0	0	; core:first
	41	GLOBAL_GET	core:cdr
	42	JMP_CLOSURE	1
43	MAKE_LABEL	"K7"
	44	GLOBAL_GET	append
	45	JMP_CLOSURE	2
46	MAKE_LABEL	"K5"
	47	SAVE_RETURN	"K8"	56
	48	SAVE_RETURN	"K9"	52
	49	PUSH_CONST	core:cond
	50	GLOBAL_GET	list
	51	JMP_CLOSURE	1
52	MAKE_LABEL	"K9"
	53	LOCAL_GET	0	1	; core:rest
	54	GLOBAL_GET	append
	55	JMP_CLOSURE	2
56	MAKE_LABEL	"K8"
	57	GLOBAL_GET	list
	58	JMP_CLOSURE	4

                                      1: [ ((core:= foo:KEY4 quote) foo:error) ]
[ 1]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	5
                                      1: [ [K0:5] ]
[ 1]   2 : LOCAL_GET	0	1	; core:rest
                                      2: [ [K0:5] () ]
[ 2]   3 : GLOBAL_GET	core:null?
                                      3: [ [K0:5] () [Closure] ]
[ 3]   4 : JMP_CLOSURE	1
                                      2: [ [K0:5] () ]
[ 2]   0 : CALL_PRIMOP	"null?"
                                      2: [ [K0:5] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]   5 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]   6 : JMP_IF_FALSE	"L10"	26
                                      0: [  ]
[ 0]   7 : SAVE_RETURN	"K1"	11
                                      1: [ [K1:11] ]
[ 1]   8 : LOCAL_GET	0	0	; core:first
                                      2: [ [K1:11] ((core:= foo:KEY4 quote) foo:error) ]
[ 2]   9 : GLOBAL_GET	core:cons?
                                      3: [ [K1:11] ((core:= foo:KEY4 quote) foo:error) [Closure] ]
[ 3]  10 : JMP_CLOSURE	1
                                      2: [ [K1:11] ((core:= foo:KEY4 quote) foo:error) ]
[ 2]   0 : CALL_PRIMOP	"cons?"
                                      2: [ [K1:11] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  11 : MAKE_LABEL	"K1"
                                      1: [ #t ]
[ 1]  12 : JMP_IF_FALSE	"L3"	21
                                      0: [  ]
[ 0]  13 : SAVE_RETURN	"K2"	17
                                      1: [ [K2:17] ]
[ 1]  14 : PUSH_CONST	begin
                                      2: [ [K2:17] begin ]
[ 2]  15 : GLOBAL_GET	list
                                      3: [ [K2:17] begin [Closure] ]
[ 3]  16 : JMP_CLOSURE	1
                                      2: [ [K2:17] begin ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K2:17] (begin) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (begin) ]
[ 1]  17 : MAKE_LABEL	"K2"
                                      1: [ (begin) ]
[ 1]  18 : LOCAL_GET	0	0	; core:first
                                      2: [ (begin) ((core:= foo:KEY4 quote) foo:error) ]
[ 2]  19 : GLOBAL_GET	append
                                      3: [ (begin) ((core:= foo:KEY4 quote) foo:error) [Closure] ]
[ 3]  20 : JMP_CLOSURE	2
                                      2: [ (begin) ((core:= foo:KEY4 quote) foo:error) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ (begin (core:= foo:KEY4 quote) foo:error) ]
[ 1]   1 : RETURN_VAL
Executing:  lambda: ((append (list (append (list (quote lambda)) (list (core:map core:car core:bindings)) core:body)) (core:map core:cadr core:bindings)))
	0	MAKE_ENVDOT	1
	1	SAVE_RETURN	"K0"	24
	2	SAVE_RETURN	"K1"	21
	3	SAVE_RETURN	"K2"	7
	4	PUSH_CONST	lambda
	5	GLOBAL_GET	list
	6	JMP_CLOSURE	1
7	MAKE_LABEL	"K2"
	8	SAVE_RETURN	"K3"	17
	9	SAVE_RETURN	"K4"	14
	10	GLOBAL_GET	core:car
	11	LOCAL_GET	0	0	; core:bindings
	12	GLOBAL_GET	core:map
	13	JMP_CLOSURE	2
14	MAKE_LABEL	"K4"
	15	GLOBAL_GET	list
	16	JMP_CLOSURE	1
17	MAKE_LABEL	"K3"
	18	LOCAL_GET	0	1	; core:body
	19	GLOBAL_GET	append
	20	JMP_CLOSURE	3
21	MAKE_LABEL	"K1"
	22	GLOBAL_GET	list
	23	JMP_CLOSURE	1
24	MAKE_LABEL	"K0"
	25	SAVE_RETURN	"K5"	30
	26	GLOBAL_GET	core:cadr
	27	LOCAL_GET	0	0	; core:bindings
	28	GLOBAL_GET	core:map
	29	JMP_CLOSURE	2
30	MAKE_LABEL	"K5"
	31	GLOBAL_GET	append
	32	JMP_CLOSURE	2

                                      2: [ ((foo:KEY4 (core:+ 1 2))) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))) ]
[ 2]   0 : MAKE_ENVDOT	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	24
                                      1: [ [K0:24] ]
[ 1]   2 : SAVE_RETURN	"K1"	21
                                      2: [ [K0:24] [K1:21] ]
[ 2]   3 : SAVE_RETURN	"K2"	7
                                      3: [ [K0:24] [K1:21] [K2:7] ]
[ 3]   4 : PUSH_CONST	lambda
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   5 : GLOBAL_GET	list
                                      5: [ [K0:24] [K1:21] [K2:7] lambda [Closure] ]
[ 5]   6 : JMP_CLOSURE	1
                                      4: [ [K0:24] [K1:21] [K2:7] lambda ]
[ 4]   0 : CALL_PRIMOP	"list"
                                      4: [ [K0:24] [K1:21] [K2:7] (lambda) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   7 : MAKE_LABEL	"K2"
                                      3: [ [K0:24] [K1:21] (lambda) ]
[ 3]   8 : SAVE_RETURN	"K3"	17
                                      4: [ [K0:24] [K1:21] (lambda) [K3:17] ]
[ 4]   9 : SAVE_RETURN	"K4"	14
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] ]
[ 5]  10 : GLOBAL_GET	core:car
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ]
[ 6]  11 : LOCAL_GET	0	0	; core:bindings
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:KEY4 (core:+ 1 2))) ]
[ 7]  12 : GLOBAL_GET	core:map
                                      8: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:KEY4 (core:+ 1 2))) [Closure] ]
[ 8]  13 : JMP_CLOSURE	2
                                      7: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] [Closure] ((foo:KEY4 (core:+ 1 2))) ]
[ 7]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:car
	0	CALL_PRIMOP	"car"
	1	RETURN_VAL

                                      1: [ (foo:KEY4 (core:+ 1 2)) ]
[ 1]   0 : CALL_PRIMOP	"car"
                                      1: [ foo:KEY4 ]
[ 1]   1 : RETURN_VAL
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] [K4:14] (foo:KEY4) ]
[ 6]   1 : RETURN_VAL
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:KEY4) ]
[ 5]  14 : MAKE_LABEL	"K4"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:KEY4) ]
[ 5]  15 : GLOBAL_GET	list
                                      6: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:KEY4) [Closure] ]
[ 6]  16 : JMP_CLOSURE	1
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] (foo:KEY4) ]
[ 5]   0 : CALL_PRIMOP	"list"
                                      5: [ [K0:24] [K1:21] (lambda) [K3:17] ((foo:KEY4)) ]
[ 5]   1 : RETURN_VAL
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:KEY4)) ]
[ 4]  17 : MAKE_LABEL	"K3"
                                      4: [ [K0:24] [K1:21] (lambda) ((foo:KEY4)) ]
[ 4]  18 : LOCAL_GET	0	1	; core:body
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:KEY4)) ((if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error)))) ]
[ 5]  19 : GLOBAL_GET	append
                                      6: [ [K0:24] [K1:21] (lambda) ((foo:KEY4)) ((if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error)))) [Closure] ]
[ 6]  20 : JMP_CLOSURE	3
                                      5: [ [K0:24] [K1:21] (lambda) ((foo:KEY4)) ((if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error)))) ]
[ 5]   0 : CALL_PRIMOP	"append"
                                      3: [ [K0:24] [K1:21] (lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error)))) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:24] (lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error)))) ]
[ 2]  21 : MAKE_LABEL	"K1"
                                      2: [ [K0:24] (lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error)))) ]
[ 2]  22 : GLOBAL_GET	list
                                      3: [ [K0:24] (lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error)))) [Closure] ]
[ 3]  23 : JMP_CLOSURE	1
                                      2: [ [K0:24] (lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error)))) ]
[ 2]   0 : CALL_PRIMOP	"list"
                                      2: [ [K0:24] ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) ]
[ 2]   1 : RETURN_VAL
                                      1: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) ]
[ 1]  24 : MAKE_LABEL	"K0"
                                      1: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) ]
[ 1]  25 : SAVE_RETURN	"K5"	30
                                      2: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) [K5:30] ]
[ 2]  26 : GLOBAL_GET	core:cadr
                                      3: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) [K5:30] [Closure] ]
[ 3]  27 : LOCAL_GET	0	0	; core:bindings
                                      4: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) [K5:30] [Closure] ((foo:KEY4 (core:+ 1 2))) ]
[ 4]  28 : GLOBAL_GET	core:map
                                      5: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) [K5:30] [Closure] ((foo:KEY4 (core:+ 1 2))) [Closure] ]
[ 5]  29 : JMP_CLOSURE	2
                                      4: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) [K5:30] [Closure] ((foo:KEY4 (core:+ 1 2))) ]
[ 4]   0 : CALL_PRIMOP	"map"
Executing:  primitive: core:cadr
	0	CALL_PRIMOP	"cadr"
	1	RETURN_VAL

                                      1: [ (foo:KEY4 (core:+ 1 2)) ]
[ 1]   0 : CALL_PRIMOP	"cadr"
                                      1: [ (core:+ 1 2) ]
[ 1]   1 : RETURN_VAL
                                      3: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) [K5:30] ((core:+ 1 2)) ]
[ 3]   1 : RETURN_VAL
                                      2: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) ((core:+ 1 2)) ]
[ 2]  30 : MAKE_LABEL	"K5"
                                      2: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) ((core:+ 1 2)) ]
[ 2]  31 : GLOBAL_GET	append
                                      3: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) ((core:+ 1 2)) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))) ((core:+ 1 2)) ]
[ 2]   0 : CALL_PRIMOP	"append"
                                      1: [ ((lambda (foo:KEY4) (if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error)))) (core:+ 1 2)) ]
[ 1]   1 : RETURN_VAL
Compiled:
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:+
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	MAKE_CLOSURE	[Closure]	; ((if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))
		0	MAKE_ENV	1
		1	SAVE_RETURN	"K1"	6
		2	LOCAL_GET	0	0	; foo:KEY4
		3	PUSH_CONST	2
		4	GLOBAL_GET	core:=
		5	JMP_CLOSURE	2
	6	MAKE_LABEL	"K1"
		7	JMP_IF_FALSE	"L5"	10
		8	PUSH_CONST	#f
		9	RETURN_VAL
	10	MAKE_LABEL	"L5"
		11	SAVE_RETURN	"K2"	16
		12	LOCAL_GET	0	0	; foo:KEY4
		13	PUSH_CONST	3
		14	GLOBAL_GET	core:=
		15	JMP_CLOSURE	2
	16	MAKE_LABEL	"K2"
		17	JMP_IF_FALSE	"L4"	20
		18	PUSH_CONST	#t
		19	RETURN_VAL
	20	MAKE_LABEL	"L4"
		21	SAVE_RETURN	"K3"	26
		22	LOCAL_GET	0	0	; foo:KEY4
		23	GLOBAL_GET	quote
		24	GLOBAL_GET	core:=
		25	JMP_CLOSURE	2
	26	MAKE_LABEL	"K3"
		27	STACK_POP
		28	GLOBAL_GET	foo:error
		29	RETURN_VAL
	8	JMP_CLOSURE	1

Running...
Executing:  lambda: ((core:case (core:+ 1 2) (2 #f) (3 #t) (quote foo:error)))
	0	MAKE_ENV	0
	1	SAVE_RETURN	"K0"	6
	2	PUSH_CONST	1
	3	PUSH_CONST	2
	4	GLOBAL_GET	core:+
	5	JMP_CLOSURE	2
6	MAKE_LABEL	"K0"
	7	MAKE_CLOSURE	[Closure]	; ((if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))
		0	MAKE_ENV	1
		1	SAVE_RETURN	"K1"	6
		2	LOCAL_GET	0	0	; foo:KEY4
		3	PUSH_CONST	2
		4	GLOBAL_GET	core:=
		5	JMP_CLOSURE	2
	6	MAKE_LABEL	"K1"
		7	JMP_IF_FALSE	"L5"	10
		8	PUSH_CONST	#f
		9	RETURN_VAL
	10	MAKE_LABEL	"L5"
		11	SAVE_RETURN	"K2"	16
		12	LOCAL_GET	0	0	; foo:KEY4
		13	PUSH_CONST	3
		14	GLOBAL_GET	core:=
		15	JMP_CLOSURE	2
	16	MAKE_LABEL	"K2"
		17	JMP_IF_FALSE	"L4"	20
		18	PUSH_CONST	#t
		19	RETURN_VAL
	20	MAKE_LABEL	"L4"
		21	SAVE_RETURN	"K3"	26
		22	LOCAL_GET	0	0	; foo:KEY4
		23	GLOBAL_GET	quote
		24	GLOBAL_GET	core:=
		25	JMP_CLOSURE	2
	26	MAKE_LABEL	"K3"
		27	STACK_POP
		28	GLOBAL_GET	foo:error
		29	RETURN_VAL
	8	JMP_CLOSURE	1

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	6
                                      1: [ [K0:6] ]
[ 1]   2 : PUSH_CONST	1
                                      2: [ [K0:6] 1 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K0:6] 1 2 ]
[ 3]   4 : GLOBAL_GET	core:+
                                      4: [ [K0:6] 1 2 [Closure] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K0:6] 1 2 ]
[ 3]   0 : CALL_PRIMOP	"+"
                                      2: [ [K0:6] 3 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 3 ]
[ 1]   6 : MAKE_LABEL	"K0"
                                      1: [ 3 ]
[ 1]   7 : MAKE_CLOSURE	[Closure]	; ((if (core:= foo:KEY4 2) (begin #f) (if (core:= foo:KEY4 3) (begin #t) (begin (core:= foo:KEY4 quote) foo:error))))
                                      2: [ 3 [Closure] ]
[ 2]   8 : JMP_CLOSURE	1
                                      1: [ 3 ]
[ 1]   0 : MAKE_ENV	1
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K1"	6
                                      1: [ [K1:6] ]
[ 1]   2 : LOCAL_GET	0	0	; foo:KEY4
                                      2: [ [K1:6] 3 ]
[ 2]   3 : PUSH_CONST	2
                                      3: [ [K1:6] 3 2 ]
[ 3]   4 : GLOBAL_GET	core:=
                                      4: [ [K1:6] 3 2 [Closure] ]
[ 4]   5 : JMP_CLOSURE	2
                                      3: [ [K1:6] 3 2 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K1:6] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]   6 : MAKE_LABEL	"K1"
                                      1: [ #f ]
[ 1]   7 : JMP_IF_FALSE	"L5"	10
                                      0: [  ]
[ 0]  10 : MAKE_LABEL	"L5"
                                      0: [  ]
[ 0]  11 : SAVE_RETURN	"K2"	16
                                      1: [ [K2:16] ]
[ 1]  12 : LOCAL_GET	0	0	; foo:KEY4
                                      2: [ [K2:16] 3 ]
[ 2]  13 : PUSH_CONST	3
                                      3: [ [K2:16] 3 3 ]
[ 3]  14 : GLOBAL_GET	core:=
                                      4: [ [K2:16] 3 3 [Closure] ]
[ 4]  15 : JMP_CLOSURE	2
                                      3: [ [K2:16] 3 3 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K2:16] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  16 : MAKE_LABEL	"K2"
                                      1: [ #t ]
[ 1]  17 : JMP_IF_FALSE	"L4"	20
                                      0: [  ]
[ 0]  18 : PUSH_CONST	#t
                                      1: [ #t ]
[ 1]  19 : RETURN_VAL
test: got "#t"  - expected "#t"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (fold-left cons '() '(1 2))
==>  (core:fold-left core:cons (quote ()) (quote (1 2)))
Parsed:  (core:fold-left core:cons (quote ()) (quote (1 2)))
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:cons
	2	PUSH_CONST	()
	3	PUSH_CONST	(1 2)
	4	GLOBAL_GET	core:fold-left
	5	JMP_CLOSURE	3

Running...
Executing:  lambda: ((core:fold-left core:cons (quote ()) (quote (1 2))))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:cons
	2	PUSH_CONST	()
	3	PUSH_CONST	(1 2)
	4	GLOBAL_GET	core:fold-left
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:cons
                                      1: [ [Closure] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [Closure] () ]
[ 2]   3 : PUSH_CONST	(1 2)
                                      3: [ [Closure] () (1 2) ]
[ 3]   4 : GLOBAL_GET	core:fold-left
                                      4: [ [Closure] () (1 2) [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ [Closure] () (1 2) ]
[ 3]   0 : MAKE_ENV	3
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	10
                                      1: [ [K0:10] ]
[ 1]   2 : SAVE_RETURN	"K1"	6
                                      2: [ [K0:10] [K1:6] ]
[ 2]   3 : LOCAL_GET	0	2	; core:lst
                                      3: [ [K0:10] [K1:6] (1 2) ]
[ 3]   4 : GLOBAL_GET	core:length
                                      4: [ [K0:10] [K1:6] (1 2) [Closure] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [K0:10] [K1:6] (1 2) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K0:10] [K1:6] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:10] 2 ]
[ 2]   6 : MAKE_LABEL	"K1"
                                      2: [ [K0:10] 2 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [K0:10] 2 0 ]
[ 3]   8 : GLOBAL_GET	core:=
                                      4: [ [K0:10] 2 0 [Closure] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [K0:10] 2 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0:10] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  10 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L5"
                                      0: [  ]
[ 0]  15 : LOCAL_GET	0	0	; core:fn
                                      1: [ [Closure] ]
[ 1]  16 : SAVE_RETURN	"K2"	25
                                      2: [ [Closure] [K2:25] ]
[ 2]  17 : LOCAL_GET	0	1	; core:base
                                      3: [ [Closure] [K2:25] () ]
[ 3]  18 : SAVE_RETURN	"K3"	22
                                      4: [ [Closure] [K2:25] () [K3:22] ]
[ 4]  19 : LOCAL_GET	0	2	; core:lst
                                      5: [ [Closure] [K2:25] () [K3:22] (1 2) ]
[ 5]  20 : GLOBAL_GET	core:car
                                      6: [ [Closure] [K2:25] () [K3:22] (1 2) [Closure] ]
[ 6]  21 : JMP_CLOSURE	1
                                      5: [ [Closure] [K2:25] () [K3:22] (1 2) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [Closure] [K2:25] () [K3:22] 1 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [Closure] [K2:25] () 1 ]
[ 4]  22 : MAKE_LABEL	"K3"
                                      4: [ [Closure] [K2:25] () 1 ]
[ 4]  23 : LOCAL_GET	0	0	; core:fn
                                      5: [ [Closure] [K2:25] () 1 [Closure] ]
[ 5]  24 : JMP_CLOSURE	2
                                      4: [ [Closure] [K2:25] () 1 ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ [Closure] [K2:25] (() . 1) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [Closure] (() . 1) ]
[ 2]  25 : MAKE_LABEL	"K2"
                                      2: [ [Closure] (() . 1) ]
[ 2]  26 : SAVE_RETURN	"K4"	30
                                      3: [ [Closure] (() . 1) [K4:30] ]
[ 3]  27 : LOCAL_GET	0	2	; core:lst
                                      4: [ [Closure] (() . 1) [K4:30] (1 2) ]
[ 4]  28 : GLOBAL_GET	core:cdr
                                      5: [ [Closure] (() . 1) [K4:30] (1 2) [Closure] ]
[ 5]  29 : JMP_CLOSURE	1
                                      4: [ [Closure] (() . 1) [K4:30] (1 2) ]
[ 4]   0 : CALL_PRIMOP	"cdr"
                                      4: [ [Closure] (() . 1) [K4:30] (2) ]
[ 4]   1 : RETURN_VAL
                                      3: [ [Closure] (() . 1) (2) ]
[ 3]  30 : MAKE_LABEL	"K4"
                                      3: [ [Closure] (() . 1) (2) ]
[ 3]  31 : GLOBAL_GET	core:fold-left
                                      4: [ [Closure] (() . 1) (2) [Closure] ]
[ 4]  32 : JMP_CLOSURE	3
                                      3: [ [Closure] (() . 1) (2) ]
[ 3]   0 : MAKE_ENV	3
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	10
                                      1: [ [K0:10] ]
[ 1]   2 : SAVE_RETURN	"K1"	6
                                      2: [ [K0:10] [K1:6] ]
[ 2]   3 : LOCAL_GET	0	2	; core:lst
                                      3: [ [K0:10] [K1:6] (2) ]
[ 3]   4 : GLOBAL_GET	core:length
                                      4: [ [K0:10] [K1:6] (2) [Closure] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [K0:10] [K1:6] (2) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K0:10] [K1:6] 1 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:10] 1 ]
[ 2]   6 : MAKE_LABEL	"K1"
                                      2: [ [K0:10] 1 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [K0:10] 1 0 ]
[ 3]   8 : GLOBAL_GET	core:=
                                      4: [ [K0:10] 1 0 [Closure] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [K0:10] 1 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0:10] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  10 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L5"
                                      0: [  ]
[ 0]  15 : LOCAL_GET	0	0	; core:fn
                                      1: [ [Closure] ]
[ 1]  16 : SAVE_RETURN	"K2"	25
                                      2: [ [Closure] [K2:25] ]
[ 2]  17 : LOCAL_GET	0	1	; core:base
                                      3: [ [Closure] [K2:25] (() . 1) ]
[ 3]  18 : SAVE_RETURN	"K3"	22
                                      4: [ [Closure] [K2:25] (() . 1) [K3:22] ]
[ 4]  19 : LOCAL_GET	0	2	; core:lst
                                      5: [ [Closure] [K2:25] (() . 1) [K3:22] (2) ]
[ 5]  20 : GLOBAL_GET	core:car
                                      6: [ [Closure] [K2:25] (() . 1) [K3:22] (2) [Closure] ]
[ 6]  21 : JMP_CLOSURE	1
                                      5: [ [Closure] [K2:25] (() . 1) [K3:22] (2) ]
[ 5]   0 : CALL_PRIMOP	"car"
                                      5: [ [Closure] [K2:25] (() . 1) [K3:22] 2 ]
[ 5]   1 : RETURN_VAL
                                      4: [ [Closure] [K2:25] (() . 1) 2 ]
[ 4]  22 : MAKE_LABEL	"K3"
                                      4: [ [Closure] [K2:25] (() . 1) 2 ]
[ 4]  23 : LOCAL_GET	0	0	; core:fn
                                      5: [ [Closure] [K2:25] (() . 1) 2 [Closure] ]
[ 5]  24 : JMP_CLOSURE	2
                                      4: [ [Closure] [K2:25] (() . 1) 2 ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ [Closure] [K2:25] ((() . 1) . 2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ [Closure] ((() . 1) . 2) ]
[ 2]  25 : MAKE_LABEL	"K2"
                                      2: [ [Closure] ((() . 1) . 2) ]
[ 2]  26 : SAVE_RETURN	"K4"	30
                                      3: [ [Closure] ((() . 1) . 2) [K4:30] ]
[ 3]  27 : LOCAL_GET	0	2	; core:lst
                                      4: [ [Closure] ((() . 1) . 2) [K4:30] (2) ]
[ 4]  28 : GLOBAL_GET	core:cdr
                                      5: [ [Closure] ((() . 1) . 2) [K4:30] (2) [Closure] ]
[ 5]  29 : JMP_CLOSURE	1
                                      4: [ [Closure] ((() . 1) . 2) [K4:30] (2) ]
[ 4]   0 : CALL_PRIMOP	"cdr"
                                      4: [ [Closure] ((() . 1) . 2) [K4:30] () ]
[ 4]   1 : RETURN_VAL
                                      3: [ [Closure] ((() . 1) . 2) () ]
[ 3]  30 : MAKE_LABEL	"K4"
                                      3: [ [Closure] ((() . 1) . 2) () ]
[ 3]  31 : GLOBAL_GET	core:fold-left
                                      4: [ [Closure] ((() . 1) . 2) () [Closure] ]
[ 4]  32 : JMP_CLOSURE	3
                                      3: [ [Closure] ((() . 1) . 2) () ]
[ 3]   0 : MAKE_ENV	3
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	10
                                      1: [ [K0:10] ]
[ 1]   2 : SAVE_RETURN	"K1"	6
                                      2: [ [K0:10] [K1:6] ]
[ 2]   3 : LOCAL_GET	0	2	; core:lst
                                      3: [ [K0:10] [K1:6] () ]
[ 3]   4 : GLOBAL_GET	core:length
                                      4: [ [K0:10] [K1:6] () [Closure] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [K0:10] [K1:6] () ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K0:10] [K1:6] 0 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:10] 0 ]
[ 2]   6 : MAKE_LABEL	"K1"
                                      2: [ [K0:10] 0 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [K0:10] 0 0 ]
[ 3]   8 : GLOBAL_GET	core:=
                                      4: [ [K0:10] 0 0 [Closure] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [K0:10] 0 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0:10] #t ]
[ 2]   1 : RETURN_VAL
                                      1: [ #t ]
[ 1]  10 : MAKE_LABEL	"K0"
                                      1: [ #t ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  12 : LOCAL_GET	0	1	; core:base
                                      1: [ ((() . 1) . 2) ]
[ 1]  13 : RETURN_VAL
test: got "((() . 1) . 2)"  - expected "((() . 1) . 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (fold-right cons '() '(1 2))
==>  (core:fold-right core:cons (quote ()) (quote (1 2)))
Parsed:  (core:fold-right core:cons (quote ()) (quote (1 2)))
Compiled:
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:cons
	2	PUSH_CONST	()
	3	PUSH_CONST	(1 2)
	4	GLOBAL_GET	core:fold-right
	5	JMP_CLOSURE	3

Running...
Executing:  lambda: ((core:fold-right core:cons (quote ()) (quote (1 2))))
	0	MAKE_ENV	0
	1	GLOBAL_GET	core:cons
	2	PUSH_CONST	()
	3	PUSH_CONST	(1 2)
	4	GLOBAL_GET	core:fold-right
	5	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : GLOBAL_GET	core:cons
                                      1: [ [Closure] ]
[ 1]   2 : PUSH_CONST	()
                                      2: [ [Closure] () ]
[ 2]   3 : PUSH_CONST	(1 2)
                                      3: [ [Closure] () (1 2) ]
[ 3]   4 : GLOBAL_GET	core:fold-right
                                      4: [ [Closure] () (1 2) [Closure] ]
[ 4]   5 : JMP_CLOSURE	3
                                      3: [ [Closure] () (1 2) ]
[ 3]   0 : MAKE_ENV	3
                                      0: [  ]
[ 0]   1 : SAVE_RETURN	"K0"	10
                                      1: [ [K0:10] ]
[ 1]   2 : SAVE_RETURN	"K1"	6
                                      2: [ [K0:10] [K1:6] ]
[ 2]   3 : LOCAL_GET	0	2	; core:lst
                                      3: [ [K0:10] [K1:6] (1 2) ]
[ 3]   4 : GLOBAL_GET	core:length
                                      4: [ [K0:10] [K1:6] (1 2) [Closure] ]
[ 4]   5 : JMP_CLOSURE	1
                                      3: [ [K0:10] [K1:6] (1 2) ]
[ 3]   0 : CALL_PRIMOP	"length"
                                      3: [ [K0:10] [K1:6] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ [K0:10] 2 ]
[ 2]   6 : MAKE_LABEL	"K1"
                                      2: [ [K0:10] 2 ]
[ 2]   7 : PUSH_CONST	0
                                      3: [ [K0:10] 2 0 ]
[ 3]   8 : GLOBAL_GET	core:=
                                      4: [ [K0:10] 2 0 [Closure] ]
[ 4]   9 : JMP_CLOSURE	2
                                      3: [ [K0:10] 2 0 ]
[ 3]   0 : CALL_PRIMOP	"="
                                      2: [ [K0:10] #f ]
[ 2]   1 : RETURN_VAL
                                      1: [ #f ]
[ 1]  10 : MAKE_LABEL	"K0"
                                      1: [ #f ]
[ 1]  11 : JMP_IF_FALSE	"L5"	14
                                      0: [  ]
[ 0]  14 : MAKE_LABEL	"L5"
                                      0: [  ]
[ 0]  15 : SAVE_RETURN	"K2"	19
                                      1: [ [K2:19] ]
[ 1]  16 : LOCAL_GET	0	2	; core:lst
                                      2: [ [K2:19] (1 2) ]
[ 2]  17 : GLOBAL_GET	core:car
                                      3: [ [K2:19] (1 2) [Closure] ]
[ 3]  18 : JMP_CLOSURE	1
                                      2: [ [K2:19] (1 2) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [K2:19] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]  19 : MAKE_LABEL	"K2"
                                      1: [ 1 ]
[ 1]  20 : SAVE_RETURN	"K3"	30
                                      2: [ 1 [K3:30] ]
[ 2]  21 : LOCAL_GET	0	0	; core:fn
                                      3: [ 1 [K3:30] [Closure] ]
[ 3]  22 : LOCAL_GET	0	1	; core:base
                                      4: [ 1 [K3:30] [Closure] () ]
[ 4]  23 : SAVE_RETURN	"K4"	27
                                      5: [ 1 [K3:30] [Closure] () [K4:27] ]
[ 5]  24 : LOCAL_GET	0	2	; core:lst
                                      6: [ 1 [K3:30] [Closure] () [K4:27] (1 2) ]
[ 6]  25 : GLOBAL_GET	core:cdr
                                      7: [ 1 [K3:30] [Closure] () [K4:27] (1 2) [Closure] ]
[ 7]  26 : JMP_CLOSURE	1
                                      6: [ 1 [K3:30] [Closure] () [K4:27] (1 2) ]
[ 6]   0 : CALL_PRIMOP	"cdr"
                                      6: [ 1 [K3:30] [Closure] () [K4:27] (2) ]
[ 6]   1 : RETURN_VAL
                                      5: [ 1 [K3:30] [Closure] () (2) ]
[ 5]  27 : MAKE_LABEL	"K4"
                                      5: [ 1 [K3:30] [Closure] () (2) ]
[ 5]  28 : GLOBAL_GET	core:fold-right
                                      6: [ 1 [K3:30] [Closure] () (2) [Closure] ]
[ 6]  29 : JMP_CLOSURE	3
                                      5: [ 1 [K3:30] [Closure] () (2) ]
[ 5]   0 : MAKE_ENV	3
                                      2: [ 1 [K3:30] ]
[ 2]   1 : SAVE_RETURN	"K0"	10
                                      3: [ 1 [K3:30] [K0:10] ]
[ 3]   2 : SAVE_RETURN	"K1"	6
                                      4: [ 1 [K3:30] [K0:10] [K1:6] ]
[ 4]   3 : LOCAL_GET	0	2	; core:lst
                                      5: [ 1 [K3:30] [K0:10] [K1:6] (2) ]
[ 5]   4 : GLOBAL_GET	core:length
                                      6: [ 1 [K3:30] [K0:10] [K1:6] (2) [Closure] ]
[ 6]   5 : JMP_CLOSURE	1
                                      5: [ 1 [K3:30] [K0:10] [K1:6] (2) ]
[ 5]   0 : CALL_PRIMOP	"length"
                                      5: [ 1 [K3:30] [K0:10] [K1:6] 1 ]
[ 5]   1 : RETURN_VAL
                                      4: [ 1 [K3:30] [K0:10] 1 ]
[ 4]   6 : MAKE_LABEL	"K1"
                                      4: [ 1 [K3:30] [K0:10] 1 ]
[ 4]   7 : PUSH_CONST	0
                                      5: [ 1 [K3:30] [K0:10] 1 0 ]
[ 5]   8 : GLOBAL_GET	core:=
                                      6: [ 1 [K3:30] [K0:10] 1 0 [Closure] ]
[ 6]   9 : JMP_CLOSURE	2
                                      5: [ 1 [K3:30] [K0:10] 1 0 ]
[ 5]   0 : CALL_PRIMOP	"="
                                      4: [ 1 [K3:30] [K0:10] #f ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 [K3:30] #f ]
[ 3]  10 : MAKE_LABEL	"K0"
                                      3: [ 1 [K3:30] #f ]
[ 3]  11 : JMP_IF_FALSE	"L5"	14
                                      2: [ 1 [K3:30] ]
[ 2]  14 : MAKE_LABEL	"L5"
                                      2: [ 1 [K3:30] ]
[ 2]  15 : SAVE_RETURN	"K2"	19
                                      3: [ 1 [K3:30] [K2:19] ]
[ 3]  16 : LOCAL_GET	0	2	; core:lst
                                      4: [ 1 [K3:30] [K2:19] (2) ]
[ 4]  17 : GLOBAL_GET	core:car
                                      5: [ 1 [K3:30] [K2:19] (2) [Closure] ]
[ 5]  18 : JMP_CLOSURE	1
                                      4: [ 1 [K3:30] [K2:19] (2) ]
[ 4]   0 : CALL_PRIMOP	"car"
                                      4: [ 1 [K3:30] [K2:19] 2 ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 [K3:30] 2 ]
[ 3]  19 : MAKE_LABEL	"K2"
                                      3: [ 1 [K3:30] 2 ]
[ 3]  20 : SAVE_RETURN	"K3"	30
                                      4: [ 1 [K3:30] 2 [K3:30] ]
[ 4]  21 : LOCAL_GET	0	0	; core:fn
                                      5: [ 1 [K3:30] 2 [K3:30] [Closure] ]
[ 5]  22 : LOCAL_GET	0	1	; core:base
                                      6: [ 1 [K3:30] 2 [K3:30] [Closure] () ]
[ 6]  23 : SAVE_RETURN	"K4"	27
                                      7: [ 1 [K3:30] 2 [K3:30] [Closure] () [K4:27] ]
[ 7]  24 : LOCAL_GET	0	2	; core:lst
                                      8: [ 1 [K3:30] 2 [K3:30] [Closure] () [K4:27] (2) ]
[ 8]  25 : GLOBAL_GET	core:cdr
                                      9: [ 1 [K3:30] 2 [K3:30] [Closure] () [K4:27] (2) [Closure] ]
[ 9]  26 : JMP_CLOSURE	1
                                      8: [ 1 [K3:30] 2 [K3:30] [Closure] () [K4:27] (2) ]
[ 8]   0 : CALL_PRIMOP	"cdr"
                                      8: [ 1 [K3:30] 2 [K3:30] [Closure] () [K4:27] () ]
[ 8]   1 : RETURN_VAL
                                      7: [ 1 [K3:30] 2 [K3:30] [Closure] () () ]
[ 7]  27 : MAKE_LABEL	"K4"
                                      7: [ 1 [K3:30] 2 [K3:30] [Closure] () () ]
[ 7]  28 : GLOBAL_GET	core:fold-right
                                      8: [ 1 [K3:30] 2 [K3:30] [Closure] () () [Closure] ]
[ 8]  29 : JMP_CLOSURE	3
                                      7: [ 1 [K3:30] 2 [K3:30] [Closure] () () ]
[ 7]   0 : MAKE_ENV	3
                                      4: [ 1 [K3:30] 2 [K3:30] ]
[ 4]   1 : SAVE_RETURN	"K0"	10
                                      5: [ 1 [K3:30] 2 [K3:30] [K0:10] ]
[ 5]   2 : SAVE_RETURN	"K1"	6
                                      6: [ 1 [K3:30] 2 [K3:30] [K0:10] [K1:6] ]
[ 6]   3 : LOCAL_GET	0	2	; core:lst
                                      7: [ 1 [K3:30] 2 [K3:30] [K0:10] [K1:6] () ]
[ 7]   4 : GLOBAL_GET	core:length
                                      8: [ 1 [K3:30] 2 [K3:30] [K0:10] [K1:6] () [Closure] ]
[ 8]   5 : JMP_CLOSURE	1
                                      7: [ 1 [K3:30] 2 [K3:30] [K0:10] [K1:6] () ]
[ 7]   0 : CALL_PRIMOP	"length"
                                      7: [ 1 [K3:30] 2 [K3:30] [K0:10] [K1:6] 0 ]
[ 7]   1 : RETURN_VAL
                                      6: [ 1 [K3:30] 2 [K3:30] [K0:10] 0 ]
[ 6]   6 : MAKE_LABEL	"K1"
                                      6: [ 1 [K3:30] 2 [K3:30] [K0:10] 0 ]
[ 6]   7 : PUSH_CONST	0
                                      7: [ 1 [K3:30] 2 [K3:30] [K0:10] 0 0 ]
[ 7]   8 : GLOBAL_GET	core:=
                                      8: [ 1 [K3:30] 2 [K3:30] [K0:10] 0 0 [Closure] ]
[ 8]   9 : JMP_CLOSURE	2
                                      7: [ 1 [K3:30] 2 [K3:30] [K0:10] 0 0 ]
[ 7]   0 : CALL_PRIMOP	"="
                                      6: [ 1 [K3:30] 2 [K3:30] [K0:10] #t ]
[ 6]   1 : RETURN_VAL
                                      5: [ 1 [K3:30] 2 [K3:30] #t ]
[ 5]  10 : MAKE_LABEL	"K0"
                                      5: [ 1 [K3:30] 2 [K3:30] #t ]
[ 5]  11 : JMP_IF_FALSE	"L5"	14
                                      4: [ 1 [K3:30] 2 [K3:30] ]
[ 4]  12 : LOCAL_GET	0	1	; core:base
                                      5: [ 1 [K3:30] 2 [K3:30] () ]
[ 5]  13 : RETURN_VAL
                                      4: [ 1 [K3:30] 2 () ]
[ 4]  30 : MAKE_LABEL	"K3"
                                      4: [ 1 [K3:30] 2 () ]
[ 4]  31 : LOCAL_GET	0	0	; core:fn
                                      5: [ 1 [K3:30] 2 () [Closure] ]
[ 5]  32 : JMP_CLOSURE	2
                                      4: [ 1 [K3:30] 2 () ]
[ 4]   0 : CALL_PRIMOP	"cons"
                                      3: [ 1 [K3:30] (2) ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 (2) ]
[ 2]  30 : MAKE_LABEL	"K3"
                                      2: [ 1 (2) ]
[ 2]  31 : LOCAL_GET	0	0	; core:fn
                                      3: [ 1 (2) [Closure] ]
[ 3]  32 : JMP_CLOSURE	2
                                      2: [ 1 (2) ]
[ 2]   0 : CALL_PRIMOP	"cons"
                                      1: [ (1 2) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2)"  - expected "(1 2)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x '(1 2 3 4 5)) (list (first x) (second x) (third x)))
==>  (begin (set! foo:x (quote (1 2 3 4 5))) (core:list (core:first foo:x) (core:second foo:x) (core:third foo:x)))
Parsed:  (begin (set! foo:x (quote (1 2 3 4 5))) (core:list (core:first foo:x) (core:second foo:x) (core:third foo:x)))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	foo:x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	foo:x
	6	GLOBAL_GET	core:first
	7	JMP_CLOSURE	1
8	MAKE_LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	foo:x
	11	GLOBAL_GET	core:second
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	foo:x
	16	GLOBAL_GET	core:third
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K2"
	19	GLOBAL_GET	core:list
	20	JMP_CLOSURE	3

Running...
Executing:  lambda: ((begin (set! foo:x (quote (1 2 3 4 5))) (core:list (core:first foo:x) (core:second foo:x) (core:third foo:x))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	foo:x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	foo:x
	6	GLOBAL_GET	core:first
	7	JMP_CLOSURE	1
8	MAKE_LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	foo:x
	11	GLOBAL_GET	core:second
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	foo:x
	16	GLOBAL_GET	core:third
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K2"
	19	GLOBAL_GET	core:list
	20	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : GLOBAL_SET	foo:x
                                      1: [ (1 2 3 4 5) ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"K0"	8
                                      1: [ [K0:8] ]
[ 1]   5 : GLOBAL_GET	foo:x
                                      2: [ [K0:8] (1 2 3 4 5) ]
[ 2]   6 : GLOBAL_GET	core:first
                                      3: [ [K0:8] (1 2 3 4 5) [Closure] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [K0:8] (1 2 3 4 5) ]
[ 2]   0 : CALL_PRIMOP	"car"
                                      2: [ [K0:8] 1 ]
[ 2]   1 : RETURN_VAL
                                      1: [ 1 ]
[ 1]   8 : MAKE_LABEL	"K0"
                                      1: [ 1 ]
[ 1]   9 : SAVE_RETURN	"K1"	13
                                      2: [ 1 [K1:13] ]
[ 2]  10 : GLOBAL_GET	foo:x
                                      3: [ 1 [K1:13] (1 2 3 4 5) ]
[ 3]  11 : GLOBAL_GET	core:second
                                      4: [ 1 [K1:13] (1 2 3 4 5) [Closure] ]
[ 4]  12 : JMP_CLOSURE	1
                                      3: [ 1 [K1:13] (1 2 3 4 5) ]
[ 3]   0 : CALL_PRIMOP	"cadr"
                                      3: [ 1 [K1:13] 2 ]
[ 3]   1 : RETURN_VAL
                                      2: [ 1 2 ]
[ 2]  13 : MAKE_LABEL	"K1"
                                      2: [ 1 2 ]
[ 2]  14 : SAVE_RETURN	"K2"	18
                                      3: [ 1 2 [K2:18] ]
[ 3]  15 : GLOBAL_GET	foo:x
                                      4: [ 1 2 [K2:18] (1 2 3 4 5) ]
[ 4]  16 : GLOBAL_GET	core:third
                                      5: [ 1 2 [K2:18] (1 2 3 4 5) [Closure] ]
[ 5]  17 : JMP_CLOSURE	1
                                      4: [ 1 2 [K2:18] (1 2 3 4 5) ]
[ 4]   0 : CALL_PRIMOP	"caddr"
                                      4: [ 1 2 [K2:18] 3 ]
[ 4]   1 : RETURN_VAL
                                      3: [ 1 2 3 ]
[ 3]  18 : MAKE_LABEL	"K2"
                                      3: [ 1 2 3 ]
[ 3]  19 : GLOBAL_GET	core:list
                                      4: [ 1 2 3 [Closure] ]
[ 4]  20 : JMP_CLOSURE	3
                                      3: [ 1 2 3 ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ (1 2 3) ]
[ 1]   1 : RETURN_VAL
test: got "(1 2 3)"  - expected "(1 2 3)"


-------------------------------------------------------------------------


COMPILE AND RUN inputs:  (begin (set! x '(1 2 3 4 5)) (list (after-first x) (after-second x) (after-third x)))
==>  (begin (set! foo:x (quote (1 2 3 4 5))) (core:list (core:after-first foo:x) (core:after-second foo:x) (core:after-third foo:x)))
Parsed:  (begin (set! foo:x (quote (1 2 3 4 5))) (core:list (core:after-first foo:x) (core:after-second foo:x) (core:after-third foo:x)))
Compiled:
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	foo:x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	foo:x
	6	GLOBAL_GET	core:after-first
	7	JMP_CLOSURE	1
8	MAKE_LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	foo:x
	11	GLOBAL_GET	core:after-second
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	foo:x
	16	GLOBAL_GET	core:after-third
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K2"
	19	GLOBAL_GET	core:list
	20	JMP_CLOSURE	3

Running...
Executing:  lambda: ((begin (set! foo:x (quote (1 2 3 4 5))) (core:list (core:after-first foo:x) (core:after-second foo:x) (core:after-third foo:x))))
	0	MAKE_ENV	0
	1	PUSH_CONST	(1 2 3 4 5)
	2	GLOBAL_SET	foo:x
	3	STACK_POP
	4	SAVE_RETURN	"K0"	8
	5	GLOBAL_GET	foo:x
	6	GLOBAL_GET	core:after-first
	7	JMP_CLOSURE	1
8	MAKE_LABEL	"K0"
	9	SAVE_RETURN	"K1"	13
	10	GLOBAL_GET	foo:x
	11	GLOBAL_GET	core:after-second
	12	JMP_CLOSURE	1
13	MAKE_LABEL	"K1"
	14	SAVE_RETURN	"K2"	18
	15	GLOBAL_GET	foo:x
	16	GLOBAL_GET	core:after-third
	17	JMP_CLOSURE	1
18	MAKE_LABEL	"K2"
	19	GLOBAL_GET	core:list
	20	JMP_CLOSURE	3

                                      0: [  ]
[ 0]   0 : MAKE_ENV	0
                                      0: [  ]
[ 0]   1 : PUSH_CONST	(1 2 3 4 5)
                                      1: [ (1 2 3 4 5) ]
[ 1]   2 : GLOBAL_SET	foo:x
                                      1: [ (1 2 3 4 5) ]
[ 1]   3 : STACK_POP
                                      0: [  ]
[ 0]   4 : SAVE_RETURN	"K0"	8
                                      1: [ [K0:8] ]
[ 1]   5 : GLOBAL_GET	foo:x
                                      2: [ [K0:8] (1 2 3 4 5) ]
[ 2]   6 : GLOBAL_GET	core:after-first
                                      3: [ [K0:8] (1 2 3 4 5) [Closure] ]
[ 3]   7 : JMP_CLOSURE	1
                                      2: [ [K0:8] (1 2 3 4 5) ]
[ 2]   0 : CALL_PRIMOP	"cdr"
                                      2: [ [K0:8] (2 3 4 5) ]
[ 2]   1 : RETURN_VAL
                                      1: [ (2 3 4 5) ]
[ 1]   8 : MAKE_LABEL	"K0"
                                      1: [ (2 3 4 5) ]
[ 1]   9 : SAVE_RETURN	"K1"	13
                                      2: [ (2 3 4 5) [K1:13] ]
[ 2]  10 : GLOBAL_GET	foo:x
                                      3: [ (2 3 4 5) [K1:13] (1 2 3 4 5) ]
[ 3]  11 : GLOBAL_GET	core:after-second
                                      4: [ (2 3 4 5) [K1:13] (1 2 3 4 5) [Closure] ]
[ 4]  12 : JMP_CLOSURE	1
                                      3: [ (2 3 4 5) [K1:13] (1 2 3 4 5) ]
[ 3]   0 : CALL_PRIMOP	"cddr"
                                      3: [ (2 3 4 5) [K1:13] (3 4 5) ]
[ 3]   1 : RETURN_VAL
                                      2: [ (2 3 4 5) (3 4 5) ]
[ 2]  13 : MAKE_LABEL	"K1"
                                      2: [ (2 3 4 5) (3 4 5) ]
[ 2]  14 : SAVE_RETURN	"K2"	18
                                      3: [ (2 3 4 5) (3 4 5) [K2:18] ]
[ 3]  15 : GLOBAL_GET	foo:x
                                      4: [ (2 3 4 5) (3 4 5) [K2:18] (1 2 3 4 5) ]
[ 4]  16 : GLOBAL_GET	core:after-third
                                      5: [ (2 3 4 5) (3 4 5) [K2:18] (1 2 3 4 5) [Closure] ]
[ 5]  17 : JMP_CLOSURE	1
                                      4: [ (2 3 4 5) (3 4 5) [K2:18] (1 2 3 4 5) ]
[ 4]   0 : CALL_PRIMOP	"cdddr"
                                      4: [ (2 3 4 5) (3 4 5) [K2:18] (4 5) ]
[ 4]   1 : RETURN_VAL
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]  18 : MAKE_LABEL	"K2"
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]  19 : GLOBAL_GET	core:list
                                      4: [ (2 3 4 5) (3 4 5) (4 5) [Closure] ]
[ 4]  20 : JMP_CLOSURE	3
                                      3: [ (2 3 4 5) (3 4 5) (4 5) ]
[ 3]   0 : CALL_PRIMOP	"list"
                                      1: [ ((2 3 4 5) (3 4 5) (4 5)) ]
[ 1]   1 : RETURN_VAL
test: got "((2 3 4 5) (3 4 5) (4 5))"  - expected "((2 3 4 5) (3 4 5) (4 5))"
SUCCESS
